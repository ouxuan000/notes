1、做键盘流，不要使用鼠标，记忆各种快捷键。记忆快捷键的方式:不要被快捷键，使用鼠标点击时，看一下操作的快捷键，然后撤销操作，用快捷键解决问题。
2、firefox 安装vim插件，快捷键: f 标记出所有的链接 ngi:输入框insert
3、成批复制要比每次切换应用程序复制快,clcl （windows）多个剪切板,类似linux下的寄存器
4、要搜索不要找，无论是代码，还是其他的软件，使用系统的加载器肯定要比一个一个找快。
5、zeal (windows linux)api整合的工具,都是模仿的mac中的dash,ide有相关插件可以调用这些工具访问其中的文档
6、gnome中的类加载器，使用alt+f2调用,输入命令就可以执行程序
7、windows浏览器地址栏或者资源管理器地址栏都有补全功能，输入部分文件名按tab键即可
8、火狐浏览器快捷键使用:
9、记住历史，linuxshell的history记录了所有命令历史记录，ii命令执行上次命令
10、linux默认命令行按键的语法规则是emacs的，可以在bash.rc中加入set -o vi 设置语法规则的vi，就可以使用vi的操作习惯了
11、使用pushd和popd命令，pushd会进入一个指定的目录，使用popd就会跳转回去，堆栈的形式
12、command prompt explorer bar （windows）把资源管理器和命令行绑定在一起
13、鼠标点击的最大目标就是当前鼠标所在光标的位置，第二大目标就是屏幕的边缘，鼠标随便移动肯定最多到达边缘。
14、编程优先使用键盘而不是鼠标,各种ide的快捷键
15、学习ide的模板语言。
16、使用宏记录，windows下最牛逼的键盘宏记录工具 autohotkey,vim宏记录可以试试

**********************************专注第三章**************************************************
18、专心写代码，不要让其他事情打扰
19、google desktop search (windows),不要用文件树，要搜索
20、给文件打标签（spotlight comment Mac) windows资源管理器，都有类似的功能
21、使用正则表达式做搜索,find命令,grep命令用来从文件或者输出中查找字符串，例如：grep -n -H "public" Test.java 用来从Test.java中找到所有带有public的行，参数作用是打印出行号以及所在的文件
22、强大的命令组合 find+grep
23、这个有点问题，貌似不可以，跳转到某一个命令所在的目录 pushd `which java`/..;  `是1旁边那个，里面的命令先执行
24、使用有根视图，以某一个文件夹为根做展现
25、explorer /e,/root,E:\xxx 这句话代表在资源管理器打开文件夹，并且以后面的文件为更目录 windows有效
26、windows会根据命令的标题跟踪自定义设置，所以我们可以进行不同的管理时候，自定义命令行颜色，就可以很容易区分,最佳实践：创建一个指定名称的命令行窗口，固定打开位置，滚屏长度设置为9999，自定义背景、前景色，尽可能最大的宽度
27、多个显示器，或者使用虚拟桌面(虚拟桌面切换快捷键ctrl+alt+up or down,linux内建),windows 采用virtual desktop manager

***************************************第四章***************************************************
28、软件中需要很多显而易见的东西需要自动化:构建、持续集成、文档
29、buidix，linux下开源项目构建工具
30、使用wget获取网站的本地缓存镜像wget -mirror -w 2 --html-extension --convert-links -P filedir url,在在线api貌似没产生效果
31、curl与网站进行交互，填写表单,可以从curl官网下载windows版本
32、rss相关 yahoo pipes
33、使用构建工具make ant等管理文件，maven行不行?可以试试。能否更容易实现批处理或者shell脚本的功能。
34、选择合适的脚本语言 python shell ruby
35、使用selenium 可以记录网页的操作流程，测试或者编写网站时候很有用
36、windows power shell
37、使用svn命令添加没有纳入版本控制的文件:svn st|grep '^\?'|tr '\?' ' '|sed 's/[]*//'|sed 's/[]/\\ /g'|xargs svn add
38、以创造性的方式解决问题，有助于以后解决类似问题，而且不会变傻
39、使用bash别名。用短的代替一长串的命令
40、别给耗牛剪毛，做一些无用功.

*****************************************第五章 规范性原则******************************************************
41、junction 可以创建windows下的符号链接,这中东西根快捷方式完全不同，符号链接是工作在系统级别的，也可以试试mklink命令
42、打电话或者聊扣扣时候，有一些时候会出息那回声，这是什么原因？叫做阻抗失配impandence mismatch,由于信号无法精确同步引起
43、为了数据的一致性，如果先有数据库，再根据数据库中的字段生成model以及映射文件，那么就需要通过代码利用java或者其他脚本语言生成java代码或者xml配置文件,永远不要手动编辑一个自动生成的文件。或者先设计java代码，然后在生成数据库的表结构
44、过时的文档比没有文档更糟糕，它会故意的误导你。始终保持活的文档，文档要自动生成，不要取手动写
45、永远不要为同一份东西保存俩份拷贝，如果先写的代码，那就用代码生成图，如果画了图，那么就用图生成代码
46、测试驱动开发,对于我，每次的思路就可以写成一个测试方法，就不需要每次记下笔记了
47、把注释重构成方法，如果一个方法中会出现很多注释，说明这个方法就没有写好。
48、使用开源工具，findbugs来找java字节码中的bug，那些已经固定的bug; PMD用来检测源代码中的bug,PMD的辅助工具CPD可以找到代码中复制粘贴的代码
49、圈复杂度 边数-节点数+2

*****************************************第八章*********************************************
50、使用开源类库joda代替java的calendar

******************************************第九章*************************************************
51、如果没有必要不要给软件增加复杂度，只做当前需要的功能
52、YAGNI you aren't going to need it

******************************************第二部分***************************************************
53、80-10-10法则，软件开发前期快，后面百分之十慢，最后要到完美更慢,几乎不可能.
54、迪米特法则:只根最亲密的人讲话，对外不暴露内部细节。
55、对于一个方法，能访问的对象有：方法内部创建的对象，参数穿进来的对象，以及该对象本省
********************************************第11章*************************************************
56、挑战权威，不要太相信那些固定的教条，要知道为什么这么做，如果有更好的就使用更好的方式。比如变量命名使用下划线和使用驼峰标示，哪个在当时的环境下用的舒服就用哪个。
57、要质疑对象是否应该实现成bean,如果是model层当然可以，实现成bean,set方法返回是一个void，但是如果想使用链式设置，应该将set返回值写成当前对象,那么就可以使用诸如a.setname().setage().setpassword()这样的形式。

****************************************第12章 元语言******************************************************
58、在java的测试中可以使用groovy语言，可以编译成java字节码，语法更高级
********************************************第13章**********************************************
59、测试驱动开发强迫你写成组合方法，组合方法可以灵活的复用，java一个方法代码不要超过15行
60、平时写代码时候可以先在主方法中写出每个方法的定义，读起来比较顺口，先干这个再干那个，然后才去实现方法。
61、重构，把所有的实现细节封装在公共方法之外。
62、用真正的脚本语言去完成自动化任务，ruby，python，grooby，perl
*********************************************第14章***************************************************
63、不要手写xml而应该自动生成。
64、相比选择正确的工具而言，拒绝不正确的工具更加重要。

* 值(field)参数化 --> 行为(function) 参数化
* stream 与 collection 
  + collection主要时为了保存，访问数据
  + stream主要为了操作数据
* lambada表达式
  + 初始化数据
    #+BEGIN_SRC java
      List<Apple> inventory = Arrays.asList(new Apple(80,"green"),
          new Apple(155, "green"),
          new Apple(120, "red")); 
    #+END_SRC
  + 匿名函数
    #+BEGIN_SRC java
      System.out.println(filterApples(inventory, new Predicate<Apple>() {
          @Override
          public boolean test(Apple apple) {
              return "red".equalsIgnoreCase(apple.getColor());
          }
        })); 
    #+END_SRC
  + 匿名等价lambada (函数式接口)
    #+BEGIN_EXAMPLE
      System.out.println("j8-----> " + filterApples(inventory, (apple -> "red".equalsIgnoreCase(apple.getColor()))));
    #+END_EXAMPLE
  + lambada表达式
    #+BEGIN_SRC java
      System.out.println("nb-->" + filterApples(inventory, (Apple apple) -> "green".equalsIgnoreCase(apple.getColor()))); 
    #+END_SRC
  + 像是起名得lambada表达式
    #+BEGIN_SRC java
      System.out.println("诡异型---->" + filterApples(inventory, AppleFilter::isGreenApple)); 
      /**
      *
      * @param apple
      * @return
      */
      public static Boolean isGreenApple(Apple apple){
          return "green".equalsIgnoreCase(apple.getColor());
      }
    #+END_SRC
  + 完整代码: https://github.com/microzhao/demo/tree/master/java-core/src/main/java/com/lx/demo/j8
* 当一个接口只有一个实现时可以作为函数进行传递
* 默认实现 default
  + java8提供了接口默认实现 default, 类似便利类
  + 多个实现意味着多继承， 如何避免?
* optional
* predicate(谓词) java提供返回boolean得接口
* java8开始可以利用多核
* 策略模式进化之路(封装变化，扩展开放, 参数化配置)
  + 参考 java8实战第二章
  + java8之前只能通过策略模式封装if else变化
  + java8之后原来传递策略族(顶级接口)的地方现在可以传递函数

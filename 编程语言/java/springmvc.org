* spring-mvc 在方法参数列表为什么可以使用变量
  + 第二期课程中的 javabean描述有关， 类似于ide可以调试debug变量类似
* 内容调停
  + 第一期视频 spring rest
  + 浏览器或者类似postman的工具访问服务端时， 会在请求头中传入参数， 告诉服务端我可以接受什么样规范的数据，并且可以设置权重，根据权重传入顺序，服务端找到支持的并且最合适的返回
* srpingboot rest
** 幂等
  + PUT 
    + 初始状态：0
    + 修改状态：1 * N
    + 最终状态：1
  + DELETE
    + 初始状态：1
    + 修改状态：0 * N
    + 最终状态：0
  + 非幂等
  + POST
    + 初始状态：1
    + 修改状态：1 + 1 =2 
    + N次修改： 1+ N = N+1
    + 最终状态：N+1
  幂等/非幂等 依赖于服务端实现，这种方式是一种契约
** 浏览器请求协议顺序
  + Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
    + 第一优先顺序：text/html -> application/xhtml+xml -> application/xml
    + 第二优先顺序：image/webp -> image/apng
  + 浏览器通过accept告诉服务器我可以支持哪些类型的返回, 服务器本身也有支持的类型(WebMvcConfigurationSupport#getDefaultMediaTypes)，通过比对然后返回第一个匹配类型ContentNegotiationManager#resolveMediaTypes(访问时匹配类型)
** 学习源码入口(自描述消息)：
   + EnableWebMvc
     ​+ DelegatingWebMvcConfiguration
     ​	+ WebMvcConfigurationSupport#addDefaultHttpMessageConverters
           + 启动服务时会根据class是否存在来确定是否支持当前格式解析
             #+BEGIN_EXAMPLE
                 private static final boolean jackson2XmlPresent = ClassUtils.isPresent("com.fasterxml.jackson.dataformat.xml.XmlMapper", WebMvcConfigurationSupport.class.getClassLoader());
             #+END_EXAMPLE
           + WebMvcConfigurationSupport#getMessageConverters#extendMessageConverters该方法中可以进行扩展, list有序，所以可以自定义优先级
             #+BEGIN_SRC java
                protected final List<HttpMessageConverter<?>> getMessageConverters() {
                    if (this.messageConverters == null) {
                        this.messageConverters = new ArrayList();
                        this.configureMessageConverters(this.messageConverters);
                        if (this.messageConverters.isEmpty()) {
                            this.addDefaultHttpMessageConverters(this.messageConverters);
                        }

                        this.extendMessageConverters(this.messageConverters);
                    }

                    return this.messageConverters;
                }
             #+END_SRC
   + AbstractMessageConverterMethodProcessor#writeWithMessageConverters 这个是访问页面时写出逻辑
   所有的 HTTP 自描述消息处理器均在 messageConverters（类型：`HttpMessageConverter`)，这个集合会传递到 RequestMappingHandlerAdapter，最终控制写出。
   messageConverters，其中包含很多自描述消息类型的处理，比如 JSON、XML、TEXT等等
   以 application/json 为例，Spring Boot 中默认使用 Jackson2 序列化方式，其中媒体类型：application/json，它的处理类 MappingJackson2HttpMessageConverter，提供两类方法：
    1. 读read* ：通过 HTTP 请求内容转化成对应的 Bean
    2. 写write*： 通过 Bean 序列化成对应文本内容作为响应内容
** 思考
  问题：为什么第一次是JSON，后来怎加了 XML 依赖，又变成了 XML 内用输出
  回答：Spring Boot 应用默认没有增加XML 处理器（HttpMessageConverter）实现，所以最后采用轮训的方式去逐一尝试是否可以 canWrite(POJO) ,如果返回 true，说明可以序列化该 POJO 对象，那么 Jackson 2 恰好能处理，那么Jackson 输出了。

  问题：当 Accept 请求头未被制定时，为什么还是 JSON 来处理
  回答：这个依赖于 messageConverters 的插入顺序。(AbstractMessageConverterMethodProcessor#writeWithMessageConverters)

  问题：优先级是默认的是吧 可以修改吗
  回答：是可以调整的，通过extendMessageConverters 方法调整

** 扩展自描述消息
   + json2properties
     #+BEGIN_EXAMPLE
      controller中, 写出时会根据produces中指定，匹配到自定义扩展
      @PostMapping(value = "/person/json/to/properties",
              consumes = MediaType.APPLICATION_JSON_UTF8_VALUE,
              produces = "application/properties+person" // 响应类型
      )
      public Person personJsonToProperties(@RequestBody Person person) {
          // @RequestBody 的内容是 JSON
          // 响应的内容是 Properties
          return person;
      }
      //输入, postman请求中指定content-type: json
      {
        "id":1,
        "name":"ttang"
      }
     #+END_EXAMPLE
   + properties2json
     #+BEGIN_EXAMPLE
      @PostMapping(value = "/person/properties/to/json",
        consumes = "application/properties+person", // 请求类型 // Content-Type
        produces =  MediaType.APPLICATION_JSON_UTF8_VALUE// 响应类型 // Accept
      )
      public Person personPropertiesToJson(@RequestBody Person person) {
          // @RequestBody 的内容是 Properties
          // 响应的内容是 JSON
          return person;
      }

     //输入文本, 指定content-type:application/properties+person, 会走自定义扩展的read方法
      person.id = 1
      person.name = 小马哥
     #+END_EXAMPLE
    ```properties
    person.id = 1
    person.name = 小马哥
    ```
  + 实现 AbstractHttpMessageConverter 抽象类
    1. supports 方法：是否支持当前POJO类型
    2. readInternal 方法：读取 HTTP 请求中的内容，并且转化成相应的POJO对象（通过 Properties 内容转化成 JSON）
    3. writeInternal 方法：将 POJO 的内容序列化成文本内容（Properties格式），最终输出到 HTTP 响应中（通过 JSON 内容转化成 Properties ）
*** 注意
    + @RequestMappng 中的 consumes 对应 请求头 “Content-Type”
    + @RequestMappng 中的 produces   对应 请求头 “Accept”
  + HttpMessageConverter 执行逻辑：
    + 读操作：尝试是否能读取，canRead 方法去尝试，如果返回 true 下一步执行 read
    + 写操作：尝试是否能写入，canWrite 方法去尝试，如果返回 true 下一步执行 write
** 源码路径
   + https://github.com/offline7LY/demo/tree/master/rest-on-springmvc
* spring webmvc

MVC

M : Model

V : View

C : Controller -> DispatcherServlet

Front Controller = DispatcherServlet

Application Controller = @Controller or Controller


ServletContextListener -> ContextLoaderListener -> Root WebApplicationContext

						  DispatcherServlet -> Servlet WebApplicationContext

						  Services => @Service

						  Repositories => @Repository

​						  
​						  
​						  
2. 请求映射


Servlet / 和 /*


ServletContext path = /servlet-demo

URI : /servlet-demo/IndexServlet


DispatcherServlet < FrameworkServlet < HttpServletBean < HttpServlet

自动装配 : org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration

ServletContext path = "" or "/"

Request URI = ServletContex path + @RequestMapping("")/ @GetMapping()

当前例子：

Request URI = "" + "" = "" -> RestDemoController#index()

Request URI : "" 或者 "/"

HandlerMapping ，寻找Request URI，匹配的 Handler ：

	Handler：处理的方法，当然这是一种实例
	整体流程：Request -> Handler -> 执行结果 -> 返回（REST） -> 普通的文本
	
	请求处理映射：RequestMappingHandlerMapping -> @RequestMapping Handler Mapping
	
	拦截器：HandlerInterceptor 可以理解 Handler 到底是什么
	
			处理顺序：preHandle(true) -> Handler: HandlerMethod 执行(Method#invoke) -> postHandle -> afterCompletion
					  preHandle(false)


Spring Web MVC 的配置 Bean ：WebMvcProperties

Spring Boot 允许通过 application.properties 去定义一下配置，配置外部化

WebMvcProperties 配置前缀：spring.mvc

spring.mvc.servlet 



## 异常处理

### 传统的Servlet web.xml 错误页面

  * 优点：统一处理，业界标准
  * 不足：灵活度不够，只能定义 web.xml文件里面

  <error-page> 处理逻辑：

  * 处理状态码 <error-code>
  * 处理异常类型 <exception-type>
  * 处理服务：<location>



  ### Spring Web MVC 异常处理

  * @ExceptionHandler
      * 优点：易于理解，尤其是全局异常处理
      * 不足：很难完全掌握所有的异常类型
  * @RestControllerAdvice = @ControllerAdvice + @ResponseBody
  * @ControllerAdvice 专门拦截（AOP） @Controller





  ### Spring Boot 错误处理页面

  * 实现 ErrorPageRegistrar
      * 状态码：比较通用，不需要理解Spring WebMVC 异常体系
      * 不足：页面处理的路径必须固定
  * 注册 ErrorPage 对象
  * 实现 ErrorPage 对象中的Path 路径Web服务



  ## 视图技术

  ### View

  #### render 方法

  处理页面渲染的逻辑，例如：Velocity、JSP、Thymeleaf

  ### ViewResolver

  View Resolver = 页面 + 解析器 -> resolveViewName 寻找合适/对应 View 对象



  RequestURI-> RequestMappingHandlerMapping ->

  HandleMethod -> return "viewName" ->

  完整的页面名称 = prefix + "viewName" + suffix 

  -> ViewResolver -> View -> render -> HTML



  Spring Boot 解析完整的页面路径：

  spring.view.prefix + HandlerMethod return + spring.view.suffix



  #### ContentNegotiationViewResolver



  用于处理多个ViewResolver：JSP、Velocity、Thymeleaf

  当所有的ViewResover 配置完成时，他们的order 默认值一样，所以先来先服务（List）



  当他们定义自己的order，通过order 来倒序排列



  ### Thymeleaf





  #### 自动装配类：ThymeleafAutoConfiguration



  配置项前缀：spring.thymeleaf

  模板寻找前缀：spring.thymeleaf.prefix

  模板寻找后缀：spring.thymeleaf.suffix

  代码示例：/thymeleaf/index.htm

  prefix: /thymeleaf/

  return value : index

  suffix: .htm



  ## 国际化（i18n）

  Locale

  ```java
  LocaleContextHolder
  ```

  #### 

* 啥是dubbo
** 简述
   服务治理框架, 基于url调度的一个工具
** dubbo架构
   [[./dubbo/dubbo架构.png]]
* 干啥用, 为啥用
** 当服务越来越多时，服务 URL 配置管理变得非常困难，
  1. F5 硬件负载均衡器的单点压力也越来越大。
    此时需要一个服务注册中心，动态的注册和发现服务，使服务的位置透明。
    并通过在消费方获取服务提供方地址列表，实现软负载均衡和 Failover，降低对 F5 硬件负载均衡器的依赖，也能减
    少部分成本。
  2. 当进一步发展，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系。这时，需要自动画出应用间的依赖关系图，以帮助架构师理清理关系。
  3. 服务的调用量越来越大，服务的容量问题就暴露出来，
    这个服务需要多少机器支撑？什么时候该加机器？为了解决这些问题，第一步，要将服务现在每天的调用量，响应时间，都统计出来，作为容量规划的参考指标。
    其次，要可以动态调整权重，在线上，将某台机器的权重一直加大，并在加大的过程中记录响应时间的变化，直到响应时间到达阀值，记录此时的访问量，再以此访问量乘以机器数反推总容量
* 怎么用(参考gupao mic老湿)
** 首先设计一个用户订单模块 
   + order-api(提供给第三方调用的规范)
   + order-provider(服务端具体实现)
     + 引入dubbo.jar
     + xml配置(点对点方式，不使用zookeeper的实现)
       #+BEGIN_EXAMPLE
           <!--服务唯一标识，类似于spring中的beanid-->
          <dubbo:application name="demo-provider" owner="zhao"/>
          <!--暴露的服务地址, dubbo也是基于tcp协议，相互之间交互也需要ip:端口-->
          <dubbo:registry address="N/A"/>
          <!--当前服务所依赖的协议， 协议名称不能写错webservice, hessian, thrift....-->
          <dubbo:protocol name="dubbo" port="20880"/>

          <!--进去正题， 服务暴露的接口， 及对应的实现-->
          <dubbo:service interface="com.lx.demo.IOrderService" ref="orderService"/>
          <bean id="orderService" class="com.lx.demo.OrderServiceImpl"/>
       #+END_EXAMPLE
     + 使用Main.main(args)启动, 输出一些必要信息,跟xml配置一致, 默认dubbo协议
       #+BEGIN_EXAMPLE
        信息:  [DUBBO] Export dubbo service com.lx.demo.IOrderService to url 
        dubbo://192.168.122.1:20880/com.lx.demo.IOrderService?
        anyhost=true&application=demo-provider&dubbo=2.5.3&
        interface=com.lx.demo.IOrderService&methods=doOrder&owner=zhao&
        pid=5092&side=provider&timestamp=1529292132937,
        dubbo version: 2.5.3, current host: 127.0.0.1
       #+END_EXAMPLE
     + 结合zookeeper
       + 引入zkclient的jar包
       + 配置修改
         #+BEGIN_EXAMPLE
             <!--服务唯一标识，类似于spring中的beanid-->
            <dubbo:application name="demo-provider" owner="zhao"/>
            <!--暴露的服务地址, dubbo也是基于tcp协议，相互之间交互也需要ip:端口-->
            <!--<dubbo:registry address="N/A"/>-->
            <!-- 加入dubbo结合zookeeper后的配置, 注意： 这里的多个地址代表zookeeper构成了集群， 如果本身这些地址是几个zookeeper构成的leader follower, 配置一个即可-->
            <dubbo:registry protocol="zookeeper" address="192.168.140.128:2181,192.168.140.129:2181,192.168.140.130:2181"/>

            <!--进去正题， 服务暴露的接口， 及对应的实现-->
            <dubbo:service interface="com.lx.demo.IOrderService" ref="orderService"/>
            <bean id="orderService" class="com.lx.demo.OrderServiceImpl"/>
         #+END_EXAMPLE
       + 正常启动服务后, zkcli.sh
         #+BEGIN_EXAMPLE
          ls /dubbo/com.lx.demo.IOrderService/configurators
         #+END_EXAMPLE
     + 服务端多协议支持(webservice, hessian, thrift, http....)
       + 比如加入hession协议, 引入hession包
         #+BEGIN_EXAMPLE
          <dependency>
              <groupId>com.caucho</groupId>
              <artifactId>hessian</artifactId>
              <version>4.0.38</version>
          </dependency>
          <dependency>
              <groupId>javax.servlet</groupId>
              <artifactId>servlet-api</artifactId>
              <version>3.0.1</version>
          </dependency>
          <dependency>
              <groupId>org.mortbay.jetty</groupId>
              <artifactId>jetty</artifactId>
              <version>6.1.26</version>
          </dependency>
         #+END_EXAMPLE
       + 修改服务端配置指定为hessian协议
         #+BEGIN_EXAMPLE
             <dubbo:service interface="com.lx.demo.IOrderService" ref="orderService" protocol="hessian"/>
         #+END_EXAMPLE
       + 启动服务后注册地址变化
         #+BEGIN_EXAMPLE
          2018-06-30 13:26:49,940 INFO [com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry] -  
          [DUBBO] Register: hessian://192.168.122.1:80/com.lx.demo.IOrderService?
          anyhost=true&application=demo-provider&dubbo=2.5.3&interface=com.lx.demo.IOrderService&
          methods=doOrder&owner=zhao&pid=10224&side=provider&timestamp=1530336399578, dubbo version: 2.5.3, current host: 127.0.0.1
         #+END_EXAMPLE
       + 客户端相应也得使用hession协议的调用
         + 引入hessian相关jar
         + reference中加入protocol
          #+BEGIN_EXAMPLE
            <dubbo:reference id="orderService" interface="com.lx.demo.IOrderService" protocol="hessian"/>
          #+END_EXAMPLE
       + 使用多个协议
         + 一个服务多个协议 平滑服务迁移, 从dubbo改成hession
           #+BEGIN_EXAMPLE
              <!--当前服务所依赖的协议， 协议名称不能写错webservice, hessian, thrift...., 如果是单个协议不需要写-->
              <dubbo:protocol name="dubbo" port="20880"/>
              <dubbo:protocol name="hessian" port="8080"/>
              <dubbo:service interface="com.lx.demo.IOrderService" ref="orderService" protocol="dubbo,hessian"/>
           #+END_EXAMPLE
           注意， 这里使用必须是不同的端口 否则Caused by: java.net.BindException: Address already in use: bind
         + 多个服务多个协议
   + user(第三方调用模块)
     + xml配置, 点对点方式(没有注册中心, 开发测试方便)
       #+BEGIN_EXAMPLE
           <dubbo:application name="order-consumer"/>
          <!--不使用注册中心-->
          <dubbo:registry address="N/A"/>
          <!--生成远程服务调用代理,-->
          <dubbo:reference id="orderService" interface="com.lx.demo.IOrderService"
                          url="dubbo://192.168.122.1:20880/com.lx.demo.IOrderService"/>
       #+END_EXAMPLE
     + java代码调用实现
       #+BEGIN_SRC java
          ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
                  new String[]{"META-INF/spring/order-consumer.xml"});
          context.start();
          //访问到服务端提供的实现
          IOrderService iOrderService = (IOrderService) context.getBean("orderService");
          DoOrderRequest doOrderRequest = new DoOrderRequest();
          doOrderRequest.setName("zhao");
          DoOrderResponse doOrderResponse = iOrderService.doOrder(doOrderRequest);
          System.out.println("客户端 user输出: ==== " + doOrderResponse);
       #+END_SRC
     + 引入zookeeper后xml
       #+BEGIN_EXAMPLE
           <dubbo:application name="order-consumer"/>
          <!--不使用注册中心-->
          <!--<dubbo:registry address="N/A"/>-->
          <dubbo:registry protocol="zookeeper" address="192.168.140.128:2181,192.168.140.129:2181,192.168.140.130:2181"/>
          <!--生成远程服务调用代理, 直连方式调用-->
          <dubbo:reference id="orderService" interface="com.lx.demo.IOrderService"/>
       #+END_EXAMPLE
     + 地址缓存, 如果zookeeper意外关闭，保证可用性 (但是我测试时发现关了zookeeper就gg了。。)
       #+BEGIN_EXAMPLE
          <dubbo:registry protocol="zookeeper" address="192.168.140.128:2181" file="d:/dubbocache"/>
       #+END_EXAMPLE
       + 上述配置启动客户端访问就会在d盘生成一个dubbocache的文件及dubbocache.lock文件
       #+BEGIN_EXAMPLE
        #Dubbo Registry Cache
        #Sat Jun 30 12:47:18 CST 2018
        com.lx.demo.IOrderService=empty\://192.168.122.1/com.lx.demo.IOrderService?application\=order-consumer&category\=configurators&dubbo\=2.5.3&interface\=com.lx.demo.IOrderService&methods\=doOrder&pid\=9676&side\=consumer&timestamp\=1530334028137 empty\://192.168.122.1/com.lx.demo.IOrderService?application\=order-consumer&category\=routers&dubbo\=2.5.3&interface\=com.lx.demo.IOrderService&methods\=doOrder&pid\=9676&side\=consumer&timestamp\=1530334028137 dubbo\://192.168.122.1\:20880/com.lx.demo.IOrderService?anyhost\=true&application\=demo-provider&dubbo\=2.5.3&interface\=com.lx.demo.IOrderService&methods\=doOrder&owner\=zhao&pid\=9776&side\=provider&timestamp\=1530333270641
       #+END_EXAMPLE
** 集群环境
   + 将上述服务端部署到多个服务器上(未测试)
   + 客户端默认会随机调用不同的服务端
** 多版本支持
   + 需求: 服务版本升级，平滑迁移， 做升级测试
   + 提供另一个版本的服务实现, 并注册xml, 这样启动服务端后会在生成的dubbourl中加入version属性, revision=1.0.1&
     #+BEGIN_EXAMPLE
         <dubbo:service interface="com.lx.demo.IOrderService" ref="orderService" version="1.0.0"/>
        <bean id="orderService" class="com.lx.demo.OrderServiceImpl"/>

        <dubbo:service interface="com.lx.demo.IOrderService" ref="orderService2" version="1.0.1"/>
        <bean id="orderService2" class="com.lx.demo.OrderServiceImplV2"/>
     #+END_EXAMPLE
     + 服务端指定版本后，客户端访问同样也需要指定版本
       #+BEGIN_EXAMPLE
           <dubbo:reference id="orderService" interface="com.lx.demo.IOrderService" protocol="dubbo" version="1.0.1"/>
       #+END_EXAMPLE

** 主机绑定, dubbo服务发布后都是一个个ip地址
   + 源码com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol
   + 在发布一个Dubbo服务的时候，会生成一个dubbo://ip:port的协议地址，那么这个IP是根据什么生成的呢？大家可以在ServiceConfig.java代码中找到如下代码;可以发现，在生成绑定的主机的时候，会通过一层一层的判断，直到获取到合法的ip地址。
    1. 从配置文件中获取host
       #+BEGIN_SRC java
         host = provider.getHost();
       #+END_SRC
    2. host中获取
      #+BEGIN_SRC java
        host = InetAddress.getLocalHost().getHostAddress();
      #+END_SRC
    3. 注册中心获取 
       #+BEGIN_SRC java
          Socket socket = new Socket();
          try {
              SocketAddress addr = new InetSocketAddress(registryURL.getHost(), registryURL.getPort());
              socket.connect(addr, 1000);
              host = socket.getLocalAddress().getHostAddress();
              break;
          } finally {
              try {
                  socket.close();
              } catch (Throwable e) {}
          }
       #+END_SRC
    4. 本地网卡返回
       #+BEGIN_SRC java
          host = NetUtils.getLocalHost();
       #+END_SRC
       + 默认端口 dubbo:20880, rmi:1099, webservice/hessian/http:80
** 集群容错,(保证基本可用) 类似于物理电路中: 串联(雪崩)， 并联(容错)
*** 什么是容错机制？ 
  + 容错机制指的是某种系统控制在一定范围内的一种允许或包容犯错情况的发生，举个简单例子，我们在电脑上运行一个程序，有时候会出现无响应的情况，然后系统会弹出一个提示框让我们选择，是立即结束还是继续等待，然后根据我们的选择执行对应的操作，这就是“容错”。
在分布式架构下，网络、硬件、应用都可能发生故障，由于各个服务之间可能存在依赖关系，如果一条链路中的其中一个节点出现故障，将会导致雪崩效应。为了减少某一个节点故障的影响范围，所以我们才需要去构建容错服务，来优雅的处理这种中断的响应结果
  + Dubbo提供了6种容错机制，分别如下
    1. failsafe 失败安全，可以认为是把错误吞掉（记录日志）
    2. failover(默认)   重试其他服务器； retries（2）, 不包含自己本身访问的一次, 总共3次
    3. failfast 快速失败， 失败以后立马报错
    4. failback  失败后自动恢复。
    5. forking  forks. 设置并行数, 一个服务并发创建，只要访问成功一个就行, 吃掉错误
    6. broadcast  广播，任意一台报错，则执行的方法报错
  + 配置方式如下，通过cluster方式，配置指定的容错方案
    #+BEGIN_EXAMPLE
          <dubbo:reference id="orderService" interface="com.lx.demo.IOrderService" cluster="failsafe"/>
    #+END_EXAMPLE
** 服务降级, 容错的一种方式
*** 降级的目的是为了保证核心服务可用。
*** 降级可以有几个层面的分类： 自动降级和人工降级； 按照功能可以分为：读服务降级和写服务降级；
    1. 对一些非核心服务进行人工降级，在大促之前通过降级开关关闭哪些推荐内容、评价等对主流程没有影响的功能
    2. 故障降级，比如调用的远程服务挂了，网络故障、或者RPC服务返回异常。 那么可以直接降级，降级的方案比如设置默认值、采用兜底数据
（系统推荐的行为广告挂了，可以提前准备静态页面做返回）等等
    3. 限流降级，在秒杀这种流量比较集中并且流量特别大的情况下，因为突发访问量特别大可能会导致系统支撑不了。这个时候可以采用限流来限制访问量。
当达到阀值时，后续的请求被降级，比如进入排队页面，比如跳转到错误页（活动太火爆，稍后重试等）
*** dubbo的降级方式： Mock
**** 实现步骤
    1. 在client端创建一个DemoMock类，实现对应IOrderService的接口（需要对哪个接口进行mock，就实现哪个），名称必须以Mock结尾
       #+BEGIN_SRC java
        public class DemoMock implements IOrderService{
            @Override
            public DoOrderResponse doOrder(DoOrderRequest request) {
                DoOrderResponse doOrderResponse = new DoOrderResponse();
                doOrderResponse.setCode("404");
                doOrderResponse.setData("hello boy");
                doOrderResponse.setMemo("访问超时");
                return doOrderResponse;
            }
        }
       #+END_SRC
    2. 在client端的xml配置文件中，添加如下配置，增加一个mock属性指向创建的DemoMock
       #+BEGIN_EXAMPLE
        <dubbo:reference id="orderService"
                        interface="com.lx.demo.IOrderService"
                        protocol="dubbo"
                        version="1.0.1"
                        mock="com.lx.demo.DemoMock"/>
       #+END_EXAMPLE
    3. 模拟错误（设置timeout），模拟超时异常，运行测试代码即可访问到DemoMock这个类。当服务端故障解除以后，调用过程将恢复正常
       #+BEGIN_EXAMPLE
          <dubbo:reference id="orderService"
                          interface="com.lx.demo.IOrderService"
                          protocol="dubbo"
                          version="1.0.1"
                          mock="com.lx.demo.DemoMock"
          timeout="1"/>
       #+END_EXAMPLE
*** 降级方式
  + 验证码
  + 12306 按地域区分
  + 延时访问 抢红包, 饥饿营销
** 配置优先级别
    + 以timeout为例，显示了配置的查找顺序，其它retries, loadbalance等类似。
      + 方法级优先，接口级次之，全局配置再次之。
      + 如果级别一样，则消费方优先，提供方次之。其中，服务提供方配置，通过URL经由注册中心传递给消费方。
      +最佳实践 建议由服务提供方设置超时，因为一个方法需要执行多长时间，服务提供方更清楚，如果一个消费方同时引用多个服务，就不需要关心每个服务的超时设置。
** 什么是spi
+ 在Dubbo中，SPI是一个非常核心的机制，贯穿在几乎所有的流程中。搞懂这块内容，是接下来了解Dubbo更多源码的关键因素。
Dubbo是基于Java原生SPI机制思想的一个改进，所以，先从JAVA SPI机制开始了解什么是SPI以后再去学习Dubbo的SPI，就比较容易了
+ 关于JAVA 的SPI机制, 约定优于配置
  SPI全称（service provider interface），是JDK内置的一种服务提供发现机制，目前市面上有很多框架都是用它来做服务的扩展发现，大家耳熟能详的如JDBC、日志框架都有用到；
简单来说，它是一种动态替换发现的机制。举个简单的例子，如果我们定义了一个规范，需要第三方厂商去实现，那么对于我们应用方来说，只需要集成对应厂商的插件，既可以完成对应规范的实现机制。 形成一种插拔式的扩展手段。
+ spi简单实用
  + 定义基于spi规范的接口及实现
    #+BEGIN_SRC java
      /**
      * 数据库驱动接口规范
      *
      */
      public interface DatabaseDriver
      {
          String connect(String host);
      }

      public class MySqlDatabaseDriver implements DatabaseDriver
      {
          public String connect(String host) {
              return "mysql connect " + host;
          }
      }
    #+END_SRC
  + 接口实现模块中需要建立META-INF/services/接口全路径 命名的文件 META-INF/services/com.lx.demo.DatabaseDriver, 文件内容为:com.lx.demo.MySqlDatabaseDrive
  + 将该模块引入需要引用的服务即可， 调用方式
    #+BEGIN_SRC java
        <!--加入自定义数据库驱动支持-->
        <dependency>
            <groupId>com.lx.demo</groupId>
            <artifactId>databasedriver</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.lx.demo</groupId>
            <artifactId>mysqldatabasedriver</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
      public class DatabaseConnect {
          public static void main(String[] args) {
              ServiceLoader<DatabaseDriver> load = ServiceLoader.load(DatabaseDriver.class);
              for (DatabaseDriver databaseDriver : load) {
                  System.out.println(databaseDriver.connect("localhost"));
              }
          }
      }
    #+END_SRC
+ SPI规范总结
  实现SPI，就需要按照SPI本身定义的规范来进行配置，SPI规范如下
      1. 需要在classpath下创建一个目录，该目录命名必须是：META-INF/services
      2. 在该目录下创建一个properties文件，该文件需要满足以下几个条件
          + 文件名必须是扩展的接口的全路径名称
          + 文件内部描述的是该扩展接口的所有实现类
          + 文件的编码格式是UTF-8
      3. 通过java.util.ServiceLoader的加载机制来发现
+ SPI的实际应用
  SPI在很多地方有应用，大家可以看看最常用的java.sql.Driver驱动。JDK官方提供了java.sql.Driver这个驱动扩展点，但是你们并没有看到JDK中有对应的Driver实现。 那在哪里实现呢？
以连接Mysql为例，我们需要添加mysql-connector-java依赖。然后，你们可以在这个jar包中找到SPI的配置信息。如下图，所以java.sql.Driver由各个数据库厂商自行实现。这就是SPI的实际应用。当然除了这个意外，大家在spring的包中也可以看到相应的痕迹
+ SPI的缺点
  +	JDK标准的SPI会一次性加载实例化扩展点的所有实现，什么意思呢？就是如果你在META-INF/service下的文件里面加了N个实现类，那么JDK启动的时候都会一次性全部加载。那么如果有的扩展点实现初始化很耗时或者如果有些实现类并没有用到，那么会很浪费资源
  +	如果扩展点加载失败，会导致调用方报错，而且这个错误很难定位到是这个原因
+ Dubbo优化后的SPI实现
  大部分的思想都是和SPI是一样，只是下面两个地方有差异。
    1.	需要在resource目录下配置META-INF/dubbo或者META-INF/dubbo/internal或者META-INF/services，并基于SPI接口去创建一个文件
    2.	文件名称和接口名称保持一致，文件内容和SPI有差异，内容是KEY对应Value
    3. 客户端加入一个扩展实现, 并且在meta-inf/dubbo下建立一个配置文件, 文件名META-INF/dubbo/com.alibaba.dubbo.rpc.Protocol, 内容myprotocol=com.lx.demo.MyProtocol
       #+BEGIN_SRC java
            public class MyProtocol implements Protocol {
          @Override
          public int getDefaultPort() {
              return 8888;
          }

          @Override
          public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
              return null;
          }

          @Override
          public <T> Invoker<T> refer(Class<T> aClass, URL url) throws RpcException {
              return null;
          }

          @Override
          public void destroy() {

          }
          }
       #+END_SRC
    4. 调用方式
      #+BEGIN_SRC java
        Protocol myprotocol = ExtensionLoader.getExtensionLoader(Protocol.class).getExtension("myprotocol");
        System.out.println(myprotocol.getDefaultPort());
      #+END_SRC
** 源码分析
*** spi, 调用扩展
    + 找入口, 在上面客户端 user模块中加入
      #+BEGIN_SRC java
              //源码阅读入口
              Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
      #+END_SRC
    + 把上面这段代码分成两段，一段是getExtensionLoader、 另一段是getAdaptiveExtension。 初步猜想一下；
      + 第一段是通过一个Class参数去获得一个ExtensionLoader对象，有点类似一个工厂模式。
      + 第二段getAdaptiveExtension，去获得一个自适应的扩展点
    + 源码结构
      [[./dubbo/extension代码结构.png]]
    + Protocol源码
      以下是Protocol的源码，在这个源码中可以看到有两个注解，一个是在类级别上的@SPI(“dubbo”). 另一个是@Adaptive
      + 源码路径: com.alibaba.dubbo.rpc.Protocol
      + @SPI 表示当前这个接口是一个扩展点，可以实现自己的扩展实现，默认的扩展点是DubboProtocol。
      + @Adaptive  表示一个自适应扩展点，在方法级别上，会动态生成一个适配器类
    + getextensionloader 
      #+BEGIN_SRC java
              /**
        *该方法需要一个Class类型的参数，该参数表示希望加载的扩展点类型，
        * 该参数必须是接口，且该接口必须被@SPI注解注释，否则拒绝处理。
        * 检查通过之后首先会检查ExtensionLoader缓存中是否已经存在该扩展对应的ExtensionLoader，
        * 如果有则直接返回，否则创建一个新的ExtensionLoader负责加载该扩展实现，
        * 同时将其缓存起来。可以看到对于每一个扩展，dubbo中只会有一个对应的ExtensionLoader实例
        * @param type
        * @param <T>
        * @return
        */
        @SuppressWarnings("unchecked")
        public static <T> ExtensionLoader<T> getExtensionLoader(Class<T> type) {
            if (type == null)
                throw new IllegalArgumentException("Extension type == null");
            if (!type.isInterface()) {
                throw new IllegalArgumentException("Extension type(" + type + ") is not interface!");
            }
            if (!withExtensionAnnotation(type)) {
                throw new IllegalArgumentException("Extension type(" + type +
                        ") is not extension, because WITHOUT @" + SPI.class.getSimpleName() + " Annotation!");
            }

            ExtensionLoader<T> loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);
            if (loader == null) {
                EXTENSION_LOADERS.putIfAbsent(type, new ExtensionLoader<T>(type));
                loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);
            }
            return loader;
        }
      #+END_SRC
    + getAdaptiveExtension
      通过getExtensionLoader获得了对应的ExtensionLoader实例以后，再调用getAdaptiveExtension()方法来获得一个自适应扩展点。
      ps：简单对自适应扩展点做一个解释，大家一定了解过适配器设计模式，而这个自适应扩展点实际上就是一个适配器。
      #+BEGIN_SRC java
          /**
     *     1. 从cacheAdaptiveInstance 这个内存缓存中获得一个对象实例
     *     2. 如果实例为空，说明是第一次加载，则通过双重检查锁的方式去创建一个适配器扩展点
     * @return
     */
    @SuppressWarnings("unchecked")
    public T getAdaptiveExtension() {
        Object instance = cachedAdaptiveInstance.get();
        if (instance == null) {
            if (createAdaptiveInstanceError == null) {
                synchronized (cachedAdaptiveInstance) {
                    instance = cachedAdaptiveInstance.get();
                    if (instance == null) {
                        try {
                            instance = createAdaptiveExtension();
                            cachedAdaptiveInstance.set(instance);
                        } catch (Throwable t) {
                            createAdaptiveInstanceError = t;
                            throw new IllegalStateException("fail to create adaptive instance: " + t.toString(), t);
                        }
                    }
                }
            } else {
                throw new IllegalStateException("fail to create adaptive instance: " + createAdaptiveInstanceError.toString(), createAdaptiveInstanceError);
            }
        }

        return (T) instance;
    }
      #+END_SRC
      + createAdaptiveExtension
        #+BEGIN_SRC java
            @SuppressWarnings("unchecked")
      private T createAdaptiveExtension() {
          try {
              return injectExtension((T) getAdaptiveExtensionClass().newInstance());
          } catch (Exception e) {
              throw new IllegalStateException("Can not create adaptive extenstion " + type + ", cause: " + e.getMessage(), e);
          }
      }
        #+END_SRC
        + getAdaptiveExtensionClass
          #+BEGIN_SRC java
            /**
            * 获取adap
            * cachedAdaptiveClass这里有个判断，用来判断当前Protocol这个扩展点是否存在一个自定义的适配器，
            * 如果有，则直接返回自定义适配器，否则，就动态创建
            * @return
            */
            private Class<?> getAdaptiveExtensionClass() {
                getExtensionClasses();
                //是否存在自定义适配器
                if (cachedAdaptiveClass != null) {
                    return cachedAdaptiveClass;
                }
                return cachedAdaptiveClass = createAdaptiveExtensionClass();
            }
          #+END_SRC
          + createAdaptiveExtensionClass
            #+BEGIN_SRC java
                /**
        * 基于动态代理创建适配器扩展点
        * 动态创建一个扩展点
        * 动态生成适配器代码，以及动态编译
        *     1. createAdaptiveExtensionClassCode,  动态创建一个字节码文件。返回code这个字符串
        *     2. 通过compiler.compile进行编译（默认情况下使用的是javassist）
        *     3. 通过ClassLoader加载到jvm中
        * @return
        */
        private Class<?> createAdaptiveExtensionClass() {
            //创建字节码文件
            String code = createAdaptiveExtensionClassCode();
            //动态加载
            ClassLoader classLoader = findClassLoader();
            com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();
            return compiler.compile(code, classLoader);
        }
            #+END_SRC
            + createAdaptiveExtensionClassCode生成的Protocol$Adaptive的主要功能 
              #+BEGIN_SRC java
              public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
          public void destroy() {
              throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
          }

          public int getDefaultPort() {
              throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
          }

          public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
              if (arg1 == null) throw new IllegalArgumentException("url == null");
              com.alibaba.dubbo.common.URL url = arg1;
              String extName = (url.getProtocol() == null ? "dubbo" : url.getProtocol());
              if (extName == null)
                  throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
              com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
              return extension.refer(arg0, arg1);
          }

          public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
              if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
              if (arg0.getUrl() == null)
                  throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");
              com.alibaba.dubbo.common.URL url = arg0.getUrl();
              String extName = (url.getProtocol() == null ? "dubbo" : url.getProtocol());
              if (extName == null)
                  throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
              com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
              return extension.export(arg0);
          }
      }
              #+END_SRC
              1. 从url或扩展接口获取扩展接口实现类的名称； 
              2.根据名称，获取实现类ExtensionLoader.getExtensionLoader(扩展接口类).getExtension(扩展接口实现类名称)，然后调用实现类的方法。
              需要明白一点dubbo的内部传参基本上都是基于Url来实 现的，也就是说Dubbo是基于URL驱动的技术
              所以，适配器类的目的是在运行期获取扩展的真正实现来调用，解耦接口和实现，这样的话要不我们自己实现适配器类，要不dubbo帮我们生成，而这些都是通过Adpative来实现。

*** dubbo服务发布
* 一些小问题
** Main方法怎么启动的
   + main方法里封装了获取配置文件及启动过程, 其实就是封装了官方文档中provicer启动逻辑
     #+BEGIN_SRC java
      ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
                new String[] {"META-INF/spring/dubbo-demo-provider.xml"});
        context.start();
        // press any key to exit
        System.in.read();
     #+END_SRC
** 日志怎么集成
   + 直接将log4j.properties放入到resource根目录下
   + dubbo没有指定日志容器默认使用log4j, 源码中进行了处理
** admin控制台的安装
  1.下载dubbo的源码
  2.找到dubbo-admin
  3.修改webapp/WEB-INF/dubbo.properties
  dubbo.registry.address=zookeeper的集群地址
  控制中心是用来做服务治理的，比如控制服务的权重、服务的路由、。。。
** simple监控中心
  Monitor也是一个dubbo服务，所以也会有端口和url, 使用jetty进行启动
  修改/conf目录下dubbo.properties /order-provider.xml
  dubbo.registry.address=zookeeper://192.168.140.128:2181?backup=192.168.140.129:2181,192.168.140.130:2181
  监控服务的调用次数、调用关系、响应事件
** telnet命令
   + 用来连接dubbo，可以做一些接口的测试访问
     #+BEGIN_EXAMPLE
      telnet  ip port 
      ls、cd、pwd、clear、invoker
     #+END_EXAMPLE
** 如何解决循环依赖， a-->b b-->a
   + 必须有一方启动默认不检测依赖(不需要关心服务端是否被启动), 可以在上面的user模块中加入check=false
     #+BEGIN_EXAMPLE
          <dubbo:reference id="orderService" interface="com.lx.demo.IOrderService" check="false"/>
     #+END_EXAMPLE
     

* 实现目标
** 前后端分离
** 后端服务之间通过rpc调用
** 各个模块可以建立单独项目独立开发， 只需要提供jar包
* 项目整体架构
** 技术架构, 技术选型
   + 使用Dubbo+spring 构建整个项目
   + Maven构建项目
   + Jenkins作为持续集成
   + 使用 Apollo 配置中心
   + 使用Spring+Spring MVC+MyBatisSSM框架
   + 数据库连接池使用druid
   + 数据库使用MySQL和Redis
   + 网页采用Velocity生成静态化页面
   + 采用ElasticSearch实现搜索服务
   + 负载均衡使用Nginx、keepalived实现高可用
   + 消息中间件采用ActiveMQ
   + 在分布式事务上则采用了TCC解决时效性要求性高的分布式事务
   + 可靠的消息服务则来解决时效性要求低的分布式事务.
   + 前端采用vue nginx bootstrap 
** 数据库表设计
*** 全部设计， 或者单表设计
** maven构建项目框架
    #+BEGIN_EXAMPLE
          + 父级目录, 创建好后修改pom.xml中package为pom, 该目录作为项目依赖包的目录
          mvn archetype:generate -DgroupId=com.lx.lotterysys -DartifactId=lotterysys -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
    #+END_EXAMPLE
** 用户中心
*** 项目构建 
    + maven 构建项目骨架
      #+BEGIN_EXAMPLE
        mvn archetype:generate -DgroupId=com.lx.user -DartifactId=demo-user -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
        mvn archetype:generate -DgroupId=com.lx.user -DartifactId=user-api -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
        mvn archetype:generate -DgroupId=com.lx.user -DartifactId=user-provider -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
      #+END_EXAMPLE
    + dubbo架构搭建
      + manven引入相关的jar包, dubbo, spring等
        #+BEGIN_EXAMPLE

        #+END_EXAMPLE
      + user-api :服务端对外暴露接口
        + 提供可供消费端使用的xml文件, 服务端更了解一些信息
        + 方法以功能为单位
        + 客户端构建根据dubbo官方推荐开发方式， client文件放入到api中，提供给消费方
      + user-provider: 服务端具体实现
        + 建立持久话类以及实体， 可以自己写，也可以使用mybatis插件生成
        + 具体实现登录方法
        + 异常处理
        + 返回请求编码
        + 日志处理， 统一处理或者代码中嵌入
        + 提供dubbo服务, 通过dubbo来启动spring配置文件, 服务端配置文件一定是在META-INF/{spring, dubbo}(约定， dubbo源码中有体现, 路径:)
          + application.properties /service-common.xml/ service-provider.xml
          + 采用dubbo管理spring配置文件有个好处就是可以以文件形式添加配置， 比如加入spring-aop.xml, 加入spring-db.xml等
          + 目前本地测试直接暴露url， 没有使用zookeeper
*** 登录校验
*** 填坑之路
    + 一直访问不到mapper?
      + 报错信息Mapped Statements collection does not contain value for
      + 检查发现java源码下的xml没有编译到class中
        + 修改pom.xml文件
            #+BEGIN_EXAMPLE
            <build>
                ...
                <resources>
                    ...
                    <!--指定xml文件位置-->
                    <resource>
                        <directory>src/main/java</directory>
                        <includes>
                            <include>**/*.xml</include>
                        </includes>
                        <filtering>true</filtering>
                    </resource>
                </resources>
            </build>
            #+END_EXAMPLE
        + 将xml文件放到resources中, 默认会编译到classes中
      + 检查mapper.xml文件格式是否正确，namespace, 接口路径等
      + 测试知道mybatis先可以正常访问
        #+BEGIN_EXAMPLE
        @ContextConfiguration(locations = {"classpath*:META-INF/spring/application-common.xml","classpath*:META-INF/spring/application-db.xml"})
        @RunWith(SpringJUnit4ClassRunner.class)
        public class AppTest
        {
            @Autowired
            private SqlSessionFactory sqlSessionFactory = null;

            @Test
            public void loadById() {

                SqlSession sqlSession = null;
                try{
                    sqlSession = sqlSessionFactory.openSession();
                    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
                    User user = userMapper.selectByPrimaryKey(1);
                    System.out.println(user);
                }finally{
                    assert sqlSession != null;
                    sqlSession.close();
                }
            }
        }
        #+END_EXAMPLE
    + mavan 打包访问不到本地jar包
      + 临时使用systempath直接访问
        #+BEGIN_EXAMPLE
            <dependency>
              <groupId>com.lx.user</groupId>
              <artifactId>user-api</artifactId>

              <scope>system</scope>
              <systemPath>/home/lx7ly/.m2/repository/com/lx/user/user-api/1.0-SNAPSHOT/user-api-1.0-SNAPSHOT.jar</systemPath>
            </dependency>
        #+END_EXAMPLE
*** 涨姿势
    + 引入mybatis的方式
      + 直接使用mapperlocations属性
        #+BEGIN_EXAMPLE
        <!-- 创建spring的SqlSessionFactory -->
          <bean id="userSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <!-- 注入数据库连接池 -->
            <property name="dataSource" ref="dataSource" />
            <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
            <!--<property name="configLocation" value="classpath:META-INF/spring/mybatis-config.xml" />-->
            <!-- 扫描entity包 使用别名 -->
            <property name="typeAliasesPackage" value="com.lx.user.dal.entity" />
            <!-- 加载实体类映射文件 -->
            <property name="mapperLocations" value="classpath*:com/lx/user/dal/persistence/*Mapper.xml" />
          </bean>
        #+END_EXAMPLE
      + 使用configlocations属性, 再mybatis的配置文件中进行配置
        #+BEGIN_EXAMPLE
        <!-- 创建spring的SqlSessionFactory -->
          <bean id="userSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <!-- 注入数据库连接池 -->
            <property name="dataSource" ref="dataSource" />
            <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
            <property name="configLocation" value="classpath:META-INF/spring/mybatis-config.xml" />
            <!-- 扫描entity包 使用别名 -->
            <property name="typeAliasesPackage" value="com.lx.user.dal.entity" />
          </bean>

          ## mybatis配置文件
            <configuration>
              <!-- 配置全局属性 -->
              <!--<settings>-->
                <!--&lt;!&ndash; 使用jdbc的getGeneratedKeys获取数据库自增主键值 &ndash;&gt;-->
                <!--<setting name="useGeneratedKeys" value="true" />-->
                <!--&lt;!&ndash; 使用列别名替换列名 默认:true &ndash;&gt;-->
                <!--<setting name="useColumnLabel" value="true" />-->
                <!--&lt;!&ndash; 开启驼峰命名转换:Table{create_time} -> Entity{createTime} &ndash;&gt;-->
                <!--<setting name="mapUnderscoreToCamelCase" value="true" />-->
              <!--</settings>-->

              <!-- 配置分页插件 -->
              <!--<plugins>-->
                <!--<plugin interceptor="com.github.pagehelper.PageHelper">-->
                  <!--&lt;!&ndash; 设置数据库类型 Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库&ndash;&gt;-->
                  <!--<property name="dialect" value="mysql"/>-->
                <!--</plugin>-->
              <!--</plugins>-->
              <mappers>
                <mapper resource="com/lx/user/dal/persistence/UserMapper.xml"></mapper>
              </mappers>
            </configuration>
        #+END_EXAMPLE
      + 上述俩种方式只是保证了mapper配置已经被mybatis管理, 可以使用下面配置， 将mapper直接注入到spring容器中
        #+BEGIN_EXAMPLE
          <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
          <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <!-- 注入sqlSessionFactory -->
            <property name="sqlSessionFactory" ref="userSqlSessionFactory">
            </property>
            <!-- 给出需要扫描Dao接口包 -->
            <property name="basePackage" value="com.lx.user.dal.persistence" />
          </bean>
        #+END_EXAMPLE

*** 疑惑
    到底需不需要写那么多dto，注册和登录只有属性值不同而已
** 订单服务
** 商品中心
** 运营服务
** 订单服务
** 支付服务
** 搜索引擎
** 前端访问
*** 基于springmvc
    + 通过dubbo使用user服务暴露的接口校验用户进行登录
    + 引入提供者提供的bean信息
      #+BEGIN_EXAMPLE
      <?xml version="1.0" encoding="UTF-8"?>
      <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
            xsi:schemaLocation="http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

          <dubbo:application name="demo-web" owner="zhao"/>

          <dubbo:registry address="N/A"/>
          <!--<dubbo:registry protocol="zookeeper" group="dubbo-dev"-->
                          <!--address="192.168.11.156:2181"/>-->

          <!--引入提供者提供的bean信息-->
          <import resource="classpath*:client/user-reference.xml"/>


      </beans>
      #+END_EXAMPLE

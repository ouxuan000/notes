* 从官网下载所需安装包
  + struts: http://struts.apache.org/
    + 主页后点击"download"
    + 下载页面会显示最新的版本，选择第一项full distrubution
  + spring: http://spring.io/
    + 点击project
    + 选择springframwork
    + 点击小黑猫
    + 在git页面readme中找到 download spring artifacts
    + 点击http://repo.spring.io, 选择artifacts页签
    + 选择lib-realease-local，依次进入org-->springframework-->spring根据不同需要选择不同版本的dist
  + hibernate: http://hibernate.org
    + download

* 工程搭建
  + 建议开发时只留下当前的工程
  + 可以把关闭的工程隐藏
  +Tomcat下只有当前测试的工程，其他全部删掉

** 引入struts2
  +  jar包：/mnt/resource/lib/struts-2.3.4.1/apps/struts2-blank/WEB-INF/lib
    
    file:三大框架整合_files/170900301.png
  +  配置文件（打开其中的web.xml中过滤器部分，修改项目中的web.xml）    
  #+BEGIN_EXAMPLE
    <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring.xml</param-value>
    </context-param>
    <!-- 配置struts2的主过滤器 -->
    <filter>
    <filter-name>struts2</filter-name>
    <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
    </filter>
    <filter-mapping>
    <filter-name>struts2</filter-name>
    <url-pattern>/*</url-pattern>
    </filter-mapping>
  #+END_EXAMPLE
** 测试struts2
    + 建立java类
      #+BEGIN_SRC java
      public class TestAction extends ActionSupport{
      @Override
      public String execute() throws Exception {
      System.out.println("-------->TestAction.execute()");
      return super.execute();
      }
      }
      #+END_SRC
    + 修改struts.xml
      #+BEGIN_EXAMPLE
      <action name="testAction" class="com.oa.test.TestAction">
      <result>/test.jsp</result>
      </action>
      #+END_EXAMPLE
    + 部署测试: http://127.0.0.1:8080/ssh/testAction
** 引入hibernate
    + jar包
      + hibernate-distribution-3.6.8.Final／hibernate3.jar
      + hibernate-distribution-3.6.8.Final/lib/required／＊
      + hibernate-distribution-3.6.8.Final/lib/jpa／hibernate-jpa-2.0-api-1.0.1.Final.jar
      + hibernate-distribution-3.6.8.Final/lib/optional/c3p0／c3p0-0.9.1.jar
      + hibernate-distribution-3.6.8.Final/lib/bytecode/cglib/cglib-2.2.jar
      + 数据库驱动包
      file:三大框架整合_files/1608445150.png
   
    + 配置文件
      + hibernate-distribution-3.6.8.Final/project/etc/hibernate.cfg.xml
    + User.java
    #+BEGIN_SRC java
        package com.tt.model;
        public class User {
        private Long id;
        private String name;
        private String password;
        public User() {
        } 
        public Long getId() {
        return id;
        }    
        private void setId(Long id) {
        this.id = id;
        }
        public String getName() {
        return name;
        }
        public void setName(String name) {
        this.name = name;
        }
        public String getPassword() {
        return password;
        }
        public void setPassword(String password) {
        this.password = password;
        }
        }
    #+END_SRC
    + User.hbm.xml
      #+BEGIN_EXAMPLE
      <hibernate-mapping package="com.tt.model">
      <class name="User" table="user">
      <id name="id" column="id">
      <generator class="native"/>
      </id>
      <property name="name" type="java.lang.String" column="name"/>
      <property name="password" type="java.lang.String"/>
      </class>
      </hibernate-mapping>
      #+END_EXAMPLE
    + hibernate.cfg.xml
        #+BEGIN_EXAMPLE   
        <!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
        <hibernate-configuration>
        <session-factory>
        <property name="hibernate.current_session_context_class">thread</property>
        <property name="connection.url">
        jdbc:mysql://localhost:3306/ssh
        </property>
        <property name="connection.username">root</property>
        <property name="connection.password">root</property>
        <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
        <property name="dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="show_sql">true</property>
        <mapping resource="com/tt/model/User.hbm.xml"/>
        </session-factory>
        </hibernate-configuration>
        #+END_EXAMPLE
    + HibernatUtil.java
      #+BEGIN_SRC java
        package com.tt.util;
        import org.hibernate.SessionFactory;
        import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
        import org.hibernate.cfg.Configuration;
        import org.hibernate.service.ServiceRegistry;
        public class HibernateUtil {
        private static final SessionFactory sessionFactory = buildSessionFactory();
        private static SessionFactory buildSessionFactory() {
        try {
        //下面hibernate官方代码会报错: Initial SessionFactory creation failed.org.hibernate.HibernateException : Access to DialectResolutionInfo cannot be null when
        // Create the SessionFactory from hibernate.cfg.xml
        //            return new Configuration().configure().buildSessionFactory(
        //           new StandardServiceRegistryBuilder().build() );
        //修改为下面代码即可，感谢csdn id:qq649912323
        Configuration conf = new Configuration().configure();
        ServiceRegistry sr = new StandardServiceRegistryBuilder().applySettings(conf.getProperties()).build();
        return conf.buildSessionFactory(sr);
        } catch (Throwable ex) {
        // Make sure you log the exception, as it might be swallowed
        System.err.println("Initial SessionFactory creation failed." + ex);
        throw new ExceptionInInitializerError(ex);
        }
        }
        public static SessionFactory getSessionFactory() {
        return sessionFactory;
        }
        }
      #+END_SRC
    + UserManager.java
      #+BEGIN_SRC java
        package com.tt.test;
        import com.tt.model.User;
        import com.tt.util.HibernateUtil;
        import org.hibernate.Session;
        /**
    + Created by lx7ly on 9/15/16.
    */
    public class UserManager {
    public static void main(String[] args) {
    UserManager mgr = new UserManager();
    mgr.createAndStoreUser("ligoudan", "123");
    HibernateUtil.getSessionFactory().close();
    }
    private void createAndStoreUser(String name, String password) {
    //使用getcurrentsession需要在hibernate的配置文件配置session
    Session session = HibernateUtil.getSessionFactory().getCurrentSession();
    //        Session session = HibernateUtil.getSessionFactory().openSession();
    session.beginTransaction();
    User theUser = new User();
    theUser.setName(name);
    theUser.setPassword(password);
    session.save(theUser);
    session.getTransaction().commit();
    }
    }
      #+END_SRC
**  引入spring
  +  导入包
      +  /mnt/resource/lib/spring-framework-3.1.3.RELEASE/dist／＊
      +  日志包commons-loging
      + Aop包，dbcp包
      file:三大框架整合_files/2121315007.png

  + jdbc.properties
      #+BEGIN_EXAMPLE
      jdbcUrl = jdbc:mysql://localhost:3306/ssh
      driverClass = com.mysql.jdbc.Driver
      username = root
      password = root
      #+END_EXAMPLE
  + spring 配置文件
      #+BEGIN_EXAMPLE
      <?xml version="1.0" encoding="UTF-8"?>
      <beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:aop="http://www.springframework.org/schema/aop"
      xmlns:tx="http://www.springframework.org/schema/tx"
      xmlns:context="http://www.springframework.org/schema/context"
      xsi:schemaLocation="
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.0.xsd">
      <!-- 加载外部的properties配置文件 -->
      <context:property-placeholder location="classpath:jdbc.properties"/>
      <!-- 配置数据库连接池（c3p0） -->
      <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
      <!-- 基本信息 -->
      <property name="jdbcUrl" value="${jdbcUrl}"></property>
      <property name="driverClass" value="${driverClass}"></property>
      <property name="user" value="${username}"></property>
      <property name="password" value="${password}"></property>
      </bean>
      <!-- 配置SessionFactory -->
      <!--   <bean id="sessionFactory"
      class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
      <property name="dataSource" ref="dataSource"></property>
      <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
      </bean>-->
      <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
      <property name="dataSource" ref="dataSource"/>
      <!-- 设置spring去哪个包中去查找实体类 -->
      <property name="annotatedPackages">
      <value>com.tt.model</value>
      </property>
      <property name="hibernateProperties">
      <props>
      <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
      <prop key="hibernate.show_sql">true</prop>
      <prop key="hibernate.hbm2ddl.auto">update</prop>
      <prop key="hibernate.format_sql">false</prop>
      </props>
      </property>
      </bean>
      <bean id="testAction" class="com.tt.TestAction"></bean>
      </beans>
      #+END_EXAMPLE
 
** spring结合struts2
    +  再加入一个jar包，从struts2中找一个jar包，用来和spring做连接的jar包/mnt/resource/lib/struts-2.3.4.1/lib／struts2-spring-plugin-2.3.4.1.jar
    +  修改struts配置文件
      #+BEGIN_EXAMPLE
      <!-- 测试用的action，当与struts做整合后，class后面写的就是bean的名称，默认是首字母小写 -->
      <action name="testAction" class="testAction">
      <result>/test.jsp</result>
      </action>
      #+END_EXAMPLE
** struts2+spring+hibernate (最终整合:  hibernate4.3.11、 spring4.1.3、struts2.3.30)
    + web.xml
        #+BEGIN_EXAMPLE
        <?xml version="1.0" encoding="UTF-8"?>
        <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
        version="3.1">
        <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
        </listener>
        <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring.xml</param-value>
        </context-param>
        <!-- OpenSessionInViewFilter过滤器需要配置在Struts2框架过滤器前面，否则不起作用。 -->
        <filter>
        <filter-name>OpenSessionInViewFilter</filter-name>
        <filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>
        </filter>
        <filter-mapping>
        <filter-name>OpenSessionInViewFilter</filter-name>
        <url-pattern>/*</url-pattern>
        </filter-mapping>
        <!-- 配置struts2的主过滤器 -->
        <filter>
        <filter-name>struts2</filter-name>
        <filter-class>
        org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter
        </filter-class>
        </filter>
        <filter-mapping>
        <filter-name>struts2</filter-name>
        <url-pattern>/*</url-pattern>
        </filter-mapping>
        <welcome-file-list>
        <welcome-file>/index.jsp</welcome-file>
        </welcome-file-list>
        </web-app>
        #+END_EXAMPLE
    + struts2.xml
        #+BEGIN_EXAMPLE
        <?xml version="1.0" encoding="UTF-8" ?>
        <!DOCTYPE struts PUBLIC
        "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
        "http://struts.apache.org/dtds/struts-2.3.dtd">
        <struts>
        <constant name="struts.enable.DynamicMethodInvocation" value="false"/>
        <constant name="struts.devMode" value="true"/>
        <package name="default" namespace="/" extends="struts-default">
        <!-- 不指定method属性 默认访问TestAction中的execute方法-->
        <action name="testAction" class="com.tt.TestAction">
        <result>/test.jsp</result>
        </action>
        <action name="login" class="userAction" method="login">
        <result name="success" type="dispatcher">/success.jsp</result>
        <result name="login" type="redirect">/login.jsp</result>
        </action>
        </package>
        </struts>
        #+END_EXAMPLE

    + spring.xml (没启用aop)
        #+BEGIN_EXAMPLE
        <?xml version="1.0" encoding="UTF-8"?>
        <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd">
        <!-- 启用AOP功能 -->
        <!--    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>-->
        <bean id="user" class="com.tt.model.User">
        <property name="name" value="root"></property>
        <property name="password" value="root"></property>
        </bean>
        <!-- action，service和dao层配置，这里使用了默认装配功能 -->
        <bean id="userAction" class="com.tt.control.UserAction">
        <property name="user" ref="user"></property>
        <property name="userService" ref="userService"></property>
        </bean>
        <bean id="userService" class="com.tt.service.UserService" >
        <property name="userDao" ref="userDao"></property>
        </bean>
        <bean id="userDao" class="com.tt.dao.UserDao">
        <property name="sessionFactory" ref="sessionFactory"></property>
        </bean>
        <!-- 加载外部的properties配置文件 -->
        <context:property-placeholder location="classpath:jdbc.properties"/>
        <!-- 配置数据库连接池（c3p0） -->
        <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 基本信息 -->
        <property name="jdbcUrl" value="${jdbcUrl}"></property>
        <property name="driverClass" value="${driverClass}"></property>
        <property name="user" value="${username}"></property>
        <property name="password" value="${password}"></property>
        </bean>
        <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
        <props>
        <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
        <prop key="hibernate.show_sql">true</prop>
        <prop key="hibernate.hbm2ddl.auto">update</prop>
        <prop key="hibernate.format_sql">false</prop>
        </props>
        </property>
        <!-- 映射文件的包路径 -->
        <property name="mappingDirectoryLocations">
        <list>
        <value>classpath:com/tt/model</value>
        </list>
        </property>
        </bean>
        <!-- 配置功能扩展对象 - 事务管理 -->
        <!--    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
        </bean>-->
        <!-- 声明事务管理AOP功能 -->
        <!--    <aop:config>
        <aop:advisor advice-ref="transactionAdvice" pointcut="execution(* com.tt..service.*.*(..))"/>
        </aop:config>
        <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
        <tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>
        <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>
        <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>
        <tx:method name="select*" read-only="true"/>
        </tx:attributes>
        </tx:advice>-->
        </beans>
        #+END_EXAMPLE
      + 这里不再需要hibernate的配置文件， User和user对应的hbm配置文件不变

    + java类
      #+BEGIN_SRC java
        package com.tt.control;
        import com.opensymphony.xwork2.ActionSupport;
        import com.tt.model.User;
        import com.tt.service.UserService;
        public class UserAction extends ActionSupport {
        private User user;
        private UserService userService;
        public String execute() throws Exception {
        System.out.println("-------->TestAction.execute()");
        return super.execute();
        }
        public String login() throws Exception {
        userService.register(user);
        return "success";
        }
        public User getUser() {
        return user;
        }
        public void setUser(User user) {
        this.user = user;
        }
        public UserService getUserService() {
        return userService;
        }
        public void setUserService(UserService userService) {
        this.userService = userService;
        }
        }
      #+END_SRC
    + service
      #+BEGIN_SRC java
        package com.tt.service;
        import com.tt.dao.UserDao;
        import com.tt.model.User;
        public class UserService {
        private UserDao userDao;
        public void register(User user) {
        userDao.addUser(user);
        }
        public UserDao getUserDao() {
        return userDao;
        }
        public void setUserDao(UserDao userDao) {
        this.userDao = userDao;
        }
        }
      #+END_SRC
    + dao
      #+BEGIN_SRC java
        package com.tt.dao;
        import com.tt.model.User;
        import org.hibernate.Session;
        import org.hibernate.SessionFactory;
        public class UserDao {
        private SessionFactory sessionFactory;
        public void addUser(User user) {
        Session session = sessionFactory.getCurrentSession();
        session.beginTransaction();
        session.save(user);
        session.getTransaction().commit();
        }
        public SessionFactory getSessionFactory() {
        return sessionFactory;
        }
        public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
        }
        }
      #+END_SRC
    + ssh.sql
      #+BEGIN_EXAMPLE
      create database ssh;
      use ssh;
      create table test (id int primary key auto_increment, name varchar(20));
      create table user (id int primary key auto_increment, name varchar(20), password varchar(20));
      #+END_EXAMPLE
    + success.jsp
      #+BEGIN_EXAMPLE
      <%--
      Created by IntelliJ IDEA.
      User: lx7ly
      Date: 8/28/16
      Time: 5:18 PM
      To change this template use File | Settings | File Templates.
      --%>
      <%@ page contentType="text/html;charset=UTF-8" language="java" %>
      <html>
      <head>
      <title></title>
      </head>
      <body>
      hello world,success.jsp
      </body>
      </html>
      #+END_EXAMPLE
    + 测试
      #+BEGIN_EXAMPLE
        http://127.0.0.1:8080/ssh/login
      #+END_EXAMPLE


* springboot 2.1.0.REALEASE
  + 参考文档: https://cloud.spring.io/spring-cloud-static/Finchley.SR2/single/spring-cloud.html
* Spring Cloud Config Client
** 预备知识
*** 发布/订阅模式
    + java.util.Observable 是一个发布者
    + java.util.Observer 是订阅者
      发布者和订阅者：1 : N
      发布者和订阅者：N : M
*** 事件/监听模式
    + *java.util.EventObject* ：事件对象
  ​	*事件对象总是关联着事件源（source*
    + *java.util.EventListener* ：事件监听接口（标记）
** Spring 事件/监听
  + *ApplicationEvent* : 应用事件
  + *ApplicationListener* : 应用监听器
*** Spring Boot 事件/监听器
**** ConfigFileApplicationListener
      管理配置文件，比如：*application.properties* 以及 *application.yaml*
      *application-{profile}.properties*:
      profile  = dev 、test
      1. *application-{profile}.properties*
      2. application.properties
      Spring Boot 在相对于 ClassPath ： /META-INF/spring.factories
    + Java SPI : *java.util.ServiceLoader*
    + Spring SPI：
      Spring Boot "/META-INF/spring.factories"
      #+BEGIN_EXAMPLE
        org.springframework.context.ApplicationListener=\
        org.springframework.boot.ClearCachesApplicationListener,\
        org.springframework.boot.builder.ParentContextCloserApplicationListener,\
        org.springframework.boot.context.FileEncodingApplicationListener,\
        org.springframework.boot.context.config.AnsiOutputApplicationListener,\
        org.springframework.boot.context.config.ConfigFileApplicationListener,\
        org.springframework.boot.context.config.DelegatingApplicationListener,\
        org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener,\
        org.springframework.boot.logging.ClasspathLoggingApplicationListener,\
        org.springframework.boot.logging.LoggingApplicationListener
      #+END_EXAMPLE

*** spring中如何控制顺序
    实现*Ordered* 以及 标记*@Order* ,在 Spring 里面，数值越小，越优先
*** Spring Cloud 事件/监听器
**** BootstrapApplicationListener
    + Spring Cloud "/META-INF/spring.factories":
      #+BEGIN_EXAMPLE
        org.springframework.context.ApplicationListener=\
        org.springframework.cloud.bootstrap.BootstrapApplicationListener,\
        org.springframework.cloud.bootstrap.LoggingSystemShutdownListener,\
        org.springframework.cloud.context.restart.RestartListener
      #+END_EXAMPLE
    + 为什么BootstrapApplicationListener加载的优先级 高于 *ConfigFileApplicationListener*，所以 application.properties 文件即使定义也配置不到！
    + 原因在于：
    + *BootstrapApplicationListener* 第6优先
      1. 负责加载*bootstrap.properties* 或者 *bootstrap.yaml*
      2. 负责初始化 Bootstrap ApplicationContext ID = "bootstrap"
      #+BEGIN_EXAMPLE
      org.springframework.cloud.bootstrap.BootstrapApplicationListener#bootstrapServiceContext
      #+END_EXAMPLE
    + *ConfigFileApplicationListener* 第11优先
**** ConfigurableApplicationContext
    标准实现类：*AnnotationConfigApplicationContext*
**** spring的listener主要关注onapplication， 这个方法都是基于applicationlistener接口来实现
*** Env 端点：*EnvironmentEndpoint*
    *Environment* 关联多个带名称的*PropertySource*
    可以参考一下Spring Framework 源码：
    *AbstractRefreshableWebApplicationContext*
      #+BEGIN_SRC java
      protected void initPropertySources() {
        ConfigurableEnvironment env = getEnvironment();
        if (env instanceof ConfigurableWebEnvironment) {
          ((ConfigurableWebEnvironment) env).initPropertySources(this.servletContext, this.servletConfig);
        }
      }
      #+END_SRC
  *Environment* 有两种实现方式：
    普通类型：*StandardEnvironment*
    Web类型：*StandardServletEnvironment*
    *Environment*
      + *AbstractEnvironment*
        ​	+ *StandardEnvironment*, org.springframework.core.env.StandardEnvironment
  Enviroment 关联着一个*PropertySources* 实例
  *PropertySources* 关联着多个*PropertySource*，并且有优先级
  其中比较常用的*PropertySource* 实现：
    Java System*getProperties 实现：  名称"systemProperties"，对应的内容 *System.getProperties()*
    Java System*getenv 实现(环境变量）：  名称"systemEnvironment"，对应的内容 *System.getProperties()*
    org.springframework.core.env.StandardEnvironment#customizePropertySources
  关于 Spring Boot 优先级顺序，可以参考：
  https://docs.spring.io/spring-boot/docs/2.1.1.BUILD-SNAPSHOT/reference/htmlsingle/24. Externalized Configuration
**** 实现自定义配置
    参考: https://cloud.spring.io/spring-cloud-static/Finchley.SR2/single/spring-cloud.html/2.6 Customizing the Bootstrap Property Sources
    1. 实现*PropertySourceLocator*
    2. 暴露该实现作为一个Spring Bean
    3. 实现*PropertySource*:
       #+BEGIN_SRC java
          @Configuration
          @Order(Ordered.HIGHEST_PRECEDENCE)
          public static class CustomPropertySourceLocator implements PropertySourceLocator {

              @Override
              public PropertySource<?> locate(Environment environment) {
                  Map<String, Object> source = new HashMap<>();
                  source.put("server.port","8080");
                  MapPropertySource propertySource =
                          new MapPropertySource("mycustom-property-source", source);
                  return propertySource;
              }
          }
       #+END_SRC
    4. 定义并且配置 /META-INF/spring.factories:
      #+BEGIN_SRC properties
      org.springframework.cloud.bootstrap.BootstrapConfiguration=com.lx.demo.springcloudconfigclient.SpringCloudConfigClientApplication.CustomPropertySourceLocato
      #+END_SRC
**** property加载原理
    *Environment* 允许出现同名的配置，不过优先级高的胜出
    内部实现：*MutablePropertySources* 关联代码：
    ***java
    List<PropertySource<?>> propertySourceList = new CopyOnWriteArrayList<PropertySource<?>>();
    ***
    propertySourceList FIFO，它有顺序
    可以通过 MutablePropertySources*addFirst 提高到最优先，相当于调用：
    *List*add(0,PropertySource);*
*** 问题
1. yml和.yaml是啥区别？
   答：没有区别，就是文件扩展名不同
2. 自定义的配置在平时使用的多吗 一般是什么场景
   答：不多，一般用于中间件的开发
3. Spring 里面有个`@EventListener`和`ApplicationListener`什么区别
   答：没有区别，前者是 Annotation 编程模式，后者 接口编程
4. 小马哥 可以讲课的时候简单的实现一个小项目，在讲原理和源码吧，直接上源码，感觉讲得好散，听起来好累
   答：从第三节开始直接开始从功能入
5. */env* 端点的使用场景 是什么
  答：用于排查问题，比如要分析*@Value("${server.port}")*里面占位符的具体值
6. Spring cloud 会用这个实现一个整合起来的高可用么
  答：Spring Cloud 整体达到一个目标，把 Spring Cloud 的技术全部整合到一个项目，比如负载均衡、短路、跟踪、服务调用等
7. 怎样防止Order一样
   答：Spring Boot 和 Spring Cloud 里面没有办法，在 Spring Security 通过异常实现的。
8. 服务监控跟鹰眼一样吗
   答：类似
9. bootstrapApplicationListener是引入cloud组件来有的吗
   答：是的
10. pom.xml引入哪个cloud组件了？
    #+BEGIN_EXAMPLE
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-config</artifactId>
      </dependency>
    #+END_EXAMPLE
*** 书籍推荐
    翟永超《Spring Cloud 微服务实战》

* Spring Cloud Config Server
** 构建 Spring Cloud 配置服务器
*** 实现步骤
    1. 在 Configuration Class 标记`@EnableConfigServer`
    2. 配置文件目录（基于 git）
       1. demo.properties （默认） // 默认环境，跟着代码仓库
       2. demo-dev.properties ( profile = "dev") // 开发环境
       3. demo-test.properties ( profile = "test") // 测试环境
       4. demo-staging.properties ( profile = "staging") // 预发布环境
       5. demo-prod.properties ( profile =  "prod") // 生产环境
       6. *这个前缀demo在客户端配置需要*
    4. 服务端配置配置版本仓库（本地）
      #+BEGIN_EXAMPLE
        spring.cloud.config.server.git.uri = \
          file://D:/workspace/spring-cloud-server-config
      #+END_EXAMPLE
    5. *注意：放在存有`.git`的根目录*
      java.lang.IllegalStateException: No .git at file://D:/workspace/spring-cloud-server-config
    6. application.properties配置项：
    #+BEGIN_SRC properties
    + 配置服务器配置项
      spring.application.name = config-server
    + 定义HTTP服务端口
    server.port = 9090
    + 本地仓库的GIT URI 配置
    spring.cloud.config.server.git.uri = \
              file://D:/workspace/spring-cloud-server-config
    #+END_SRC
    7. 代码路径: https://github.com/microzhao/demo/tree/master/spring-cloud/spring-cloud-config-server
** 构建 Spring Cloud 配置客户端
*** 实现步骤
1. 创建`bootstrap.properties` 或者 `bootstrap.yml`文件
2. `bootstrap.properties` 或者 `bootstrap.yml`文件中配置客户端信息
   #+BEGIN_SRC properties
    # 配置configserver 地址
    spring.cloud.config.uri=http://127.0.0.1:9090
    #这里必须是连接服务端的配置文件名称
    spring.cloud.config.name=demo
    #激活类型
    spring.cloud.config.profile=dev
    #git的分支名称
    spring.cloud.config.label=master
   #+END_SRC
3. 为了方便测试，打开actuator
   1. spring会默认加载demo-default.properties
   2. 客户端连接成功会输出日志 Fetching config from server at : http://127.0.0.1:9090
4. 代码路径: https://github.com/microzhao/demo/tree/master/spring-cloud/spring-cloud-config-client
** 刷新客户端配置
   + 通过修改demo-dev.properties中my.name的value观察客户端变化
*** @RefreshScope 用法
   #+BEGIN_SRC java
   @RestController
   @RefreshScope
   public class EchoController {

       @Value("${my.name}")
       private String myName;

       @GetMapping("/my-name")
       public String getName(){
           return myName;
       }

   }
   #+END_SRC
   通过调用`/refresh` Endpoint 控制客户端配置更新
   *注意*, 这里必须使用post请求 curl -X POST http://127.0.0.1:8080/actuator/refresh
*** 实现定时更新客户端
    + 2.1版本springboot中，需要先在配置类@EnableScheduling
      + https://docs.spring.io/spring-boot/docs/2.1.1.BUILD-SNAPSHOT/reference/htmlsingle/ 搜索Scheduled看到后随便试的。。
    #+BEGIN_SRC java
      @Scheduled(fixedRate = 5 * 1000, initialDelay = 3 * 1000)
        public void autoRefresh() {
          Set<String> updatedPropertyNames = contextRefresher.refresh();
          updatedPropertyNames.forEach( propertyName ->
              System.err.printf("[Thread :%s] 当前配置已更新，具体 Key：%s , Value : %s \n",
              Thread.currentThread().getName(),
              propertyName,
              environment.getProperty(propertyName)
              ));
        }
    #+END_SRC
    + 代码路径: 
** 健康检查
*** 意义
    比如应用可以任意地输出业务健康、系统健康等指标
    端点URI：`/health`
    实现类：`HealthEndpoint`
    健康指示器：`HealthIndicator`，
    `HealthEndpoint`：`HealthIndicator` ，一对多
*** 自定义实现`HealthIndicator`
1. 实现`AbstractHealthIndicator`
   #+BEGIN_SRC java
    public class MyHealthIndicator extends AbstractHealthIndicator {

        @Override
        protected void doHealthCheck(Health.Builder builder)
                throws Exception {
            builder.up().withDetail("MyHealthIndicator","Day Day Up");
        }
    }
   #+END_SRC
2.  暴露 `MyHealthIndicator` 为 `Bean`
   #+BEGIN_SRC java
    @Bean
    public MyHealthIndicator myHealthIndicator(){
      return new MyHealthIndicator();
    }	
   #+END_SRC
3. 关闭安全控制
   #+BEGIN_SRC properties
    management.security.enabled = false
   #+END_SRC
**** 其他内容
    REST API = /users , /withdraw
    HATEOAS =  REST 服务器发现的入口，类似 UDDI (Universal Description Discovery and Integration)
    HAL
    /users
    /withdraw

    Spring Boot 激活 `actuator` 需要增加 Hateoas 的依赖：

    #+BEGIN_SRC xml
    <dependency>
      <groupId>org.springframework.hateoas</groupId>
      <artifactId>spring-hateoas</artifactId>
    </dependency>
    #+END_SRC
    以客户端为例：
    #+BEGIN_SRC json
    {
        "links": [{
            "rel": "self",
            "href": "http://localhost:8080/actuator"
        }, {
            "rel": "heapdump",
            "href": "http://localhost:8080/heapdump"
        }, {
            "rel": "beans",
            "href": "http://localhost:8080/beans"
        }, {
            "rel": "resume",
            "href": "http://localhost:8080/resume"
        }, {
            "rel": "autoconfig",
            "href": "http://localhost:8080/autoconfig"
        }, {
            "rel": "refresh",
            "href": "http://localhost:8080/refresh"
        }]
    }
    #+END_SRC
** 问答
1. 小马哥，你们服务是基于啥原因采用的springboot 的， 这么多稳定性的问题？
   答：Spring Boot 业界比较稳定的微服务中间件，不过它使用是易学难精！

2. 小马哥 为什么要把配置项放到 git上，为什么不放到具体服务的的程序里边 ；git在这里扮演什么样的角色 ;是不是和 zookeeper 一样

   答：Git 文件存储方式、分布式的管理系统，Spring Cloud 官方实现基于 Git，它达到的理念和 ZK 一样。

3. 一个DB配置相关的bean用@RefreshScope修饰时，config service修改了db的配置，比如mysql的url，那么这个Bean会不会刷新？如果刷新了是不是获取新的连接的时候url就变了？

   如果发生了配置变更，我的解决方案是重启 Spring Context。@RefreshScope 最佳实践用于 配置Bean，比如：开关、阈值、文案等等

   A B C
   1 1 1

   A* B C
   0  1 1

   A* B* C
   1  0  1

   A* B* C
   1  1  0

   A* B* C*
   1  1  1

4. 如果这样是不是动态刷新就没啥用了吧

   答：不能一概而论，@RefreshScope 开关、阈值、文案等等场景使用比较多

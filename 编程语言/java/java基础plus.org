* 思维方式
** 程序员思维
*** 开发模式： 面向功能开发
    PD ->开发 （代码设计、库表设计、编码） 
    缺少：非功能需求（安全、性能、代码结构）
*** 驱动模式: mdd(面向金钱开发)
    通常：心态被动（老板、PD、丈母娘）
    例外：主动学习（兴趣、理想、习惯）
    *知之者不如好知者, 好知者不如乐之者
** 架构师思维
*** 开发模式：功能+非功能开发
    + 功能
      + 技术选型
      + 开发效率
      + 团队接受情况
        + 主动接受
        + 心里抵制
        + 半推半就
    + 非功能需求
      + 安全
        + Web安全
        + SQL安全
        + 代码安全（反射滥用）
      + 性能
        + 并发
        + I/O
        + CPU
      + 代码结构
        + 设计模式
        + 代码风格
        + 个人偏好
          + 字段命名
            #+BEGIN_EXAMPLE
              private int age;
              private int _age;
            #+END_EXAMPLE
          + 缩进格式
          + 类命名
            + 前缀模式
              I开头表示接口
            + 后缀模式：
              VO（Value Object）
              DTO（Data Transfter Object）
              DO（Data Object）
              DAO（Data Access Object） JDBC、数据库
*** 小马哥经验：
    数据模型：不需要前后缀，Entity -> Person
    仓储模型：PersonRepository
    数据库、Redis、Cache、Mongo
    接口：如果没有两个以上的实现或远程调用，不要写接口
* 学习方法
** 点：知识的梳理
*** JavaSE
    + 语言
      + Java 5泛型/注解/ For Each
      + Java 7 try-catch提升/ AutoCloseable
      + Java 8 Lambda
      + Java 9模块化
    + 元编程
      + Class、Package、ModuleClassLoader
      + 反射（Reﬂection）
      + Bytecode：ClassLoader、ASM、CgLib等
      + Annotations
      + Common Annotations
      + Function
        + Consumer
        + Supplier
        + Function
        + Predicate
    + 数据结构
      + Java集合：Collection、List、Set、Map 
      + Apachecommons-collection扩展：Bag
      + GoogleGuava扩展
    + I/O和 网络
      + 文件系统
      + URL资源
      + Socket（BIO）NIO（Non-Blocking I/O）
      + NIO 2
        + 文件系统提升
          + 文件监听修改
      + AIO
        + Future + NIO
    + 并发/并行
      + Java Thread / Runnable
      + Java5Executor/ExecutorServiceJava 7Fork/Join
      + Java 8 CompletableFuture（函数式+非阻塞）
      + Java9FlowAPI（ReactiveStreamsAPI）
    + 数据库
      + JDBC
      + 数据源（DataSource）
        + Apache DBCP 
        + C3P0
        + Hikari
      + 事务/隔离级别
        + 关注数据一致性
        + 数据库隔离级别
          + java.sql.Connection#TRANSACTION_NONE
          + SQL 92 / 99 / 03
            + MySQL
            + OraclePostgreSQL
  + 安全
    + Permission管理
    + 加密/解密
    + 安全证书管理
  + 管理/运维
    + JMX
    + 进程管理
      + Process
      + Java进程管理API



Java EE
Servlet/JSP/JSTL/EL JSF
EJB JPAJMS
BeanValidation
JTA（Java Transaction API）JTS（JavaTransactionService）JAX-RS（REST）
JAX-WS（Web Services）


线：知识的衔接

JavaSE
语言





面向对象编程（OOP）与设计模式（GoF 23）面向函数编程（FOP）与Reactive
数据结构
接口设计与数据结构选择
Java集合和线程安全
Apache commons-collection与Guava扩展背景
I/O与 网络
BIO与I/O接口的关系
NIO新数据结构（ByteBuﬀer）数据库
DML、DDL与JDBC API的关系
JDBC与数据事务的关系
Spring事务（AOP）
setAutoCommit(false) begin transactionINSERT、DELETE、Updateendtransaction
commit()
事务传播
EJB容器

Java EE
数据层
Bean ValidationJPA
Web相关
Servlet/JSP/JSTL/EL JSF
JAX-RS（REST）
JAX-WS（Web Services）
WebSockets
服务/集成层
EJBJMS
事务
JTA（Java Transaction API）JTS（JavaTransactionService）
* 学习路径

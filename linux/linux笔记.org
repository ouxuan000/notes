#### 回顾
#+BEGIN_EXAMPLE
echo：输出并换行
ls:[list]显示目录下的文件
clear：清屏
pwd：printf working directory 打印当前工作目录
cal：打印日历
date：输出日期和时间
man:帮助手册
格式：man [段号] 命令
退出：q
共 9 段  1 系统命令  2 系统函数 3 C 语言库函数
#+BEGIN_EXAMPLE

#### 目录操作相关命令
#+BEGIN_EXAMPLE
目录：地址
路径：过程
相对路径：从当前目录出发到目标地址的路径
绝对路径：从根目录出发到目标地址的路径
特殊表示：
..:上一级目录
. :当前目录
~ ：当前用户主目录
/ :根目录
#+BEGIN_EXAMPLE
1. cd -change directory 切换工作目录
格式：cd 路径
cd /bin
cd -:返回前一个工作目录
cd :无参数，返回主目录
2. mkdir 创建新目录
格式：mkdir 目录名
mkdir test
mkdir -p com/tt/zhao 递归创建目录
mkdir -p com/tt/{11,22} //大括号里面内容不能有空格
3. rmdir 删除目录
格式：rmdir 目录名
rmdir test
注意：rmdir 不能删除非空目录
-p: 删除目录，如果删除后父目录为空，则连同父目录一并删除
rmdir -p test/C  ==>rmdir test/C  test
练习
在主目录下创建 test 目录，test 目录中创建 C D E F 目录
cd
mkdir test 
cd test
mkdir C D E F
在主目录下删除 test 下的 F
cd 
rm test/F
4. Shell 命令格式：
命令  [选项] [参数]
命令：做什么操作
选项：如何去做
参数：操作的对象是谁
注意：各项间须用空格进行分隔
5. ls 显示文件下的内容
默认显示当前目录的内容
-a:[all]显示目录下的所有文件，包含隐藏文件
Linux 系统中隐藏文件以.开头
-l:[long]以长格式显示文件的信息（详细信息）
-h:（需要与-l 同时使用）以易读的方式显示文件的大小
-i:(需要与-l 同时使用)显示文件的编号 
-d:显示当前目录的信息，而不是目录的内容.
格式：ls  [-a|l|h|i|d] 文件
详细信息：
drwxr-xr-x 2 jsjx jsjx 4096 2013-12-07 05:06 Desktop
d:文件类型
d:目录文件    l:符号链接文件   -：普通文件   p:管道文件  b:块设备文件   c:字符设备文件  
rwxr-xr-x:文件的权限
2：硬链接数
jsjx:所有者（属主）
jsjx:属组
4096:文件的大小（默认单位是字节）
2013-12-07 05:06 最后修改时间
Desktop:文件名

#### 文件的权限
#+BEGIN_EXAMPLE
rwx rwx rwx
拥有者(u)   同组人(g)  其他人(o) 
查询     购票      测试
rwx     r-x      r-x
7        5         5
三种权限：
r:读 （查看）
w:写 （修改）
x:执行（运行）
-:无此权限
修改权限(字符方式)
chmod  [u|g|o|a] [+|-|=] [r|w|x]   文件
chmod g+x test.txt
修改权限(数字方式)
r-4    w-2   x-1   -0         r--4  -w-2 --x1  rw-6  r-x5 -wx3 rwx7 ---0
chmod 755 test.txt
      目录的权限
r:可以查看目录下的内容  ls
w:可以创建或删除文件  mkdir  rmdir
x:可以进入目录  cd
#+BEGIN_EXAMPLE
#### 文件操作命令
1. 创建文件 touch
touch note
作用 2：修改已存在文件 的最后修改时间为当前时间
2. 删除文件
rm [选项] 文件 
-i:删除前提示
-f:强制删除
-r:删除目录及目录下的内容
                sudo rm -rf amule 删除非空目录
注意：rm 删除的文件不进入回收站，直接删除
rm `ls |grep 1.txt`(删除 1.txt 文件  引号是反引号，键盘 1 旁边那个) grep 后面可以随便折腾了
3. 复制文件 cp
格式：cp 源文件  目标文件
复制 test.txt 到 C
cp test.txt  C
复制 test.txt 到 C,以 test.bak 命名
cp test.txt C/test.bak
复制多个文件 
cp  test.txt test.bak   ../D
复制 C 目录到 D 目录
cp -r C D  （加上-r 参数可以解决略过目录）
cp email.txt email_bak.txt 等价 cat < email.txt > email_bak.txt
4. 移动文件 mv
mv 源文件  目标文件
移动 test.txt 到 C
mv test.txt C
主目录新建 test.txt，移动到 C,以 test.bak 命名
mv test.txt C/test.bak
移动多个文件 
mv f1 f2 D
移动目录到目录
mv C D
作用 2：同一目录下重命名
mv test.txt test.dat
5. 查看文件内容 cat
格式：cat 文件名
cat test.dat
echo "101 hh" >> test.dat
echo:打印字符串到标准输出(stdout)
>>:重定向符 文件
>:覆盖           echo hello >test.txt;echo world>test.txt  ---->world
>>:追加      echo hello >>test.txt;echo world>>test.txt  ---->hello /n world
cp /etc/services ~
6. 其他查看方式
head/tail、more/less
head:查看文件前 n 行信息
-n(行数)默认显示前 10 行
tail:后 n 行
more/less 以分布形式查看文件 
内置命令：空格-下翻一页  b-上翻一页  回车-下翻一行  q-退出
less 与 more 区别：
功能更强大（1）支持 VI 命令（2）支持上下翻页（PageUp/PageDown）
7. wc 计数
格式：wc [-l|w|c] 文件
-l:[line]行数
-w:[word]单词数
-c:[charactor]字符数
8. ln 符号链接和硬链接
符号链接格式：ln -s 源文件 目标文件
硬链接格式：ln 源文件 目标文件 
除文件名之外，与源文件一致
相同点：与源文件同步更新
区别：
+ 文件类型不同
硬链接类型与源文件致
软链接：符号链接文件 l
+ 权限可能不同
硬链接：权限与源文件一致
软链接：权限一般与源文件不同
+ 存储方式不同
硬链接：与源文件是同一个文件（复制了一份源文件，删除源文件不影响）
软链接：与源文件是一个文件 ，存储源文件的路径（删除源文件后，其中内容也消失）
+ 文件大小
硬链接：与源文件大小相同
软链接：一般与源文件不同
+ 跨分区：
硬链接：不可跨分区
软链接：可以在不同分区间链接
+ 最后修改时间：
硬链接：与源文件致
软链接：取决于链接文件的最后修改时间
tt@tt-Lenovo-G470:~$ ln -s /mnt/media/KuGou/* 音乐(如果当前所处的目录是音乐的上一级，这样软链接的东西就是 kugou 里面的文件，如果是处于音乐里面，那么就会在音乐里建立酷狗这个目录，即 tt@tt-Lenovo-G470:~/音乐$ ln -s /mnt/media/KuGou/*，当前处于音乐中)
#### 文件的查找
1. find 查找文件
格式：find [目录] [选项] 文件名
-name:
find ~ -name test.txt
在主目录下查找以 test 开头的文件
find ~ -name test*
*:匹配 1 个或多个字符
  ？:匹配 1 个字符
-user:按文件的属主进行查找
find / -user sram >>find.txt
-type:类型
find /etc -type l
f:普通文件   l:链接文件   d:目录    c:字符设备文件   b:块设备文件   p:管道文件
-size:大小 
+ - = 分别表示> < =
find /home/apache -size =100
注意：
+ 不要在 CPU 繁忙时执行,尽量缩小查找范围
+ 条件可以叠加  -and
find ~ -name "test*" -and -size +50
实例:
#+BEGIN_EXAMPLE
把比思图图里那些小图片删了：find /mnt/media/比思图图 -name *avatar* -exec rm {} \;
 find . \(name "*.pdf" or -name "*.txt")//打印当前目录下所有以.pdf 和以.txt 结尾的文件
 find . -type f \(! -perm 777 -and ! -perm 644 \)
 说明一下{}和\;，{}其实它就是一个占位符，在 find 命令的执行过程中会不断地替换成当前找到的文件，相当于”ls -l 找到的文件”。而\;是-exec 的命令结束标记，因为规定-exec 后面的命令必须以;结束，但;在 shell 中有特殊含义，必须要转义，所以写成\;。
脚本修改的一个笨办法，找到所有的 sql 文件，在前面加入 begin，后面删除俩行
[tt@localhost 01_平台]$find . -name *.sql -exec sed -i '1i begin' {} \;
[tt@localhost 01_平台]$ find . -name *.sql -exec sed -i '$d' {} \;
[tt@localhost 01_平台]$ find . -name *.sql -exec sed -i '$d' {} \;
上面这俩行可能用替换更好。用删除效果不好
#+BEGIN_EXAMPLE
2. grep 过滤信息
功能：查找文件中匹配字符串的行
格式：grep [选项] 字符串 文件
grep "ftp" services 
选项：
-i:不区分大小写搜索
-v:搜索不匹配的行
正则表达式：
^:锚定行首
例：查找非注释行：
grep -v "^#" services
$:锚定行尾
第二种用法：
cat services|grep "string "
|作用：将前一个命令的输出作为后一个命令的输入
特殊用法 ：
匹配多个字符串
grep tcp services | grep ftp
显示出/etc/services 中的非注释行
grep -v "^#" /etc/services
前目录下递归搜索文件中包含 main()的文件，经常用于查找某些函数位于哪些源代码文件中，可以使用如下命令：
grep -r “main()” .

#### VIM 操作
类 Unix 编辑器：VIM、emacs、nano
1. 三种模式：底行模式、命令模式、编辑模式
2. 编辑文件过程
vim a.txt 创建文件并打开 ,进入命令模式
输入 a/i/o 进入编辑模式，进行编辑
<ESC>进入命令模式
输入：进入底行模式
输入 wq 回车，保存并退出
cat a.txt
3. 复制和粘贴(命令模式)
复制一行：yy
n 行：nyy
粘贴：p
剪切一行：dd
n 行：ndd
撤销上一行操作：u
剪切一个字符:x
4. 定位
第一行---gg
末行--G
第 n 行--nG   (:n)
设置行号--:set nu
取消行号--：set nonu
h(左) j（下）k（上）l（右）
5. 搜索和替换
末行模式 /string
n:定位下一个匹配的字符串
%string 向上
替换：
:%s/oldstring/newstring/g 全局替换
:%s/oldstring/newstring 只替换每行第一个匹配字符串
查找指令：
/xxx 往下查找
?xxx 往上
n    下一个
:set hls 打开高亮
:set nohls 关闭高亮
6. 配置文件
/etc/vimrc  全局配置
~/.vimrc  只对当前用户有效
7. 插入命令
   a（光标后）i（光标前插入）o（下一行） 
   A（行末）   I（行首）   O（上一行）
#### 网络
1. 配置 ip
ifconfig eth0  192.168.56.100
ifconfig eth0 down
ifconfig eth0 up
/etc/network/interfaces
2. netstat
监视各端口发送和接收数据情况
3. ping
测试网络是否连通
4. telnet
连接到远程服务器
5. route
路由
#### 进程
1. 查看所有进程
ps aux
ps aux|grep jsjx
ps aux|grep firefox
pstree 以树状的形式显示进程
pgrep firefox 显示 firefox 进程号
2. 终止进程
kill
kill Pid:杀死进程号为 PID 的进程
kill -9 pid:强制杀死进程
xkill:结束图形界面进程
kill all:结束用户的所有进程  --注销
pkill bash:杀死名称为 bash 进程
结束 firefox 进程：pgrep firefox  kill pid
3. top:动态显示进程
4. 周期性任务：
at .batch .crontab
shutdown -h now 现在关机
shutdown -r 重启
reboot 重启
poweroff 关闭电源
注销：logout
nice:修改程序的优先级
renice:修改正在运行中的程序的优先级

#### 环境变量配置
PATH:可执行程序的路径的集合
打印环境变量：echo $PATH
环境变量配置：
PATH=$PATH:新目录
配置文件(SHELL)
/etc/profile:系统启动时执行一次
~/.profile：用户登录时执行一次
~/.bashrc：Shell 启动时执行一次
~/.bash_logout：用户退出时执行
1. 临时配置
PATH=$PATH:新目录
2. SHELL 相关配置文件
/etc/profile:所有用户的配置文件，登录时执行一次
~/.profile:用户登录时执行一次
~/.bashrc:每次启动 SHell 时加载一次
~/.log_out:用户退出时执行一次
在~/.bashrc 中添加
PATH=$PATH:新目录
export PATH
命令重命名：alias
alias c='clear'
alias ll='ls -l'

#### 软件包的管理
sudo apt-get install vim
解压：
*.tar.gz :tar xzvf *.tar.gz 
*.tar.bz2:tar xjvf *.tar.bz2
打包并压缩：
*.tar.gz:tar czvf wang.tar.gz  wang/*
*.tar.bz2:tar cjvf wang/* wang.tar.bz2
1. 二进制包
Redhat：rpm 包
rpm -i *.rpm 安装
Debian : deb 包 
dpkg -i *.deb  安装软件
dpkg -r *  卸载软件
缺陷：rpm、deb 软件依赖性强，不能自动解决依赖问题
在线安装：
RedHat：yum
Debian:apt-get
apt-get install 软件名
apt-get reinstall 软件名
apt-get remove 软件名 卸载 
apt-get upgrade 软件名  更新 
2. 源代码包
*.tar.gz
*.tar.bz2
安装说明：INSTALL  README
make  (makefile--gcc *.c)
make install
3. 解压和打包
*.tar.gz
解压：tar xzvf *.tar.gz
打包：tar czvf  *.tar.gz  d/*
*.tar.bz2
解压：tar xjvf *.tar.bz2
打包：tar cjvf  *.tar.bz2  d/*
4. 打包和压缩
tar
创建新的 tar 文件：tar cvf wang.tar  ./*
解包：tar xvf *.tar
gzip
压缩：gzip -v *
解压：gunzip *.gz
bzip2 
压缩：bzip2 *
解压：bunzip2  *.bz2

#### 开启键盘灯（与输入法冲突）
 + 方法一（冲突 使用命令后需要按下键盘 scrlk 按键）：xmodmap -e "add mod3 =Scroll_Lock"
 + 方法二（与输入法不冲突  不需要按键直接灯亮）：xset led 3（开启）xset -led 3(关灯)

#### ubuntu 设置服务开机启动不启动
1. 安装类似于 windows 下的 msconfig
sudo apt-get install rcconf
2. 启动 rcconf
sudo rcconf
3. 把 mysql 相关的启动项去掉
4. 手动启动 mysql 服务命令
#+BEGIN_EXAMPLE
sudo /etc/init.d/mysql start
[sudo /etc/init.d/mysql stop 关闭 mysql 服务]
#+BEGIN_EXAMPLE
#### **删除 Ubuntu Unity 应用程序菜单中的无效图标***
如果你想要删除某个快捷方式的话，进入/usr/share/applications 文件夹，删掉相应的.desktop 文件，这个快捷方式图标就不会在主菜单里出现了。
nautilus /usr/share/applications 命令，在窗口里打开这个文件夹，看了一下图标缩略图

#### ubuntu 通过命令查看 dns
1. nm-tool
2. 可以查看文件/etc/resolv.conf

#### ubuntu 12.04 LTS 下安装 wps，完成后提示系统缺失字体，下载该字体，解压后将整个 wps_symbol_fonts 目录拷贝到 /usr/share/fonts/  目录下
注意，wps_symbol_fonts 目录要有可读可执行权限
1. 权限设置,执行命令如下
    cd /usr/share/fonts/
    chmod 755 wps_symbol_fonts
    cd /usr/share/fonts/wps_symbol_fonts 
    chmod 644 *
2. 生成缓存配置信息
    进入字体目录  
    cd /usr/share/fonts/wps_symbol_fonts
    生成
    mkfontdir
    mkfontscale
    fc-cache

#### ubuntu15.04 使用中遇到的一些问题及解决方式
1. audacious 解决乱码问题，自定义格式 %f。当时可能不会直接变化，重新导入歌曲即可
这个需要看你是哪个分区的硬盘空间不足
首先 fdisk -l 看下有几个分区
然后 df -lh 看下每个分区的剩余空间

2.  【转】tar 命令的 C 参数——tar 解包提示‘归档中找不到’
问题：在/home/usr1 目录下，想要打包/home/usr2 目录中的文件 file2，应该使用什么样的 tar 命令？

解答 1：
$ tar -cvf file2.tar /home/usr2/file2
tar: Removing leading '/' from members names
home/usr2/file2
该命令可以将/home/usr2/file2 文件打包到当前目录下的 file2.tar 中，需要注意的是：使用绝对路径标识的源文件，在用 tar 命令压缩后，文件名连同绝对路径（这里是 home/usr2/，根目录'/'被自动去掉了）一并被压缩进来。使用 tar 命令解压缩后会出现以下情况：
$ tar -xvf file2.tar
$ ls
…… …… home …… …… 
解压缩后的文件名不是想象中的 file2，而是 home/usr2/file2。

解答 2：
$ tar -cvf file2.tar -C /home/usr2 file2
该命令中的-C dir 参数，将 tar 的工作目录从当前目录改为/home/usr2，将 file2 文件（不带绝对路径）压缩到 file2.tar 中。注意：-C dir 参数的作用在于改变工作目录，其有效期为该命令中下一次-C dir 参数之前。
使用 tar 的-C dir 参数，同样可以做到在当前目录/home/usr1 下将文件解压缩到其他目录，例如：
$ tar -xvf file2.tar -C /home/usr2
而 tar 不用-C dir 参数时是无法做到的：
$ tar -xvf file2.tar /home/usr2
tar: /tmp/file: Not found in archive
tar: Error exit delayed from previous errors

20、netcat 可以查到端口，详细见浏览器收藏

21、aria2 各种下载，包括.torrent 文件

22、siege 进行 web 压力测试的命令行工具，Tsung 是对服务器压力测试的工具。

23、Ubuntu 下 crontab 命令的用法

cron 是一个 Linux 下的后台进程，用来定期的执行一些任务。

想要让 cron 执行你指定的任务，首先就要编辑 crontab 文件。crontab 是一个文本文件，用来存放你要运行的命令。

你可以以下命令 crontab -e  来打开你的用户所属的 crontab 文件。

第一次用这个命令，会让你选择文本编辑器，我选的是 vim。选定的编辑器也可以使用 select-editor 命令来更改。

打开后的 crontab 文件类似这种样子：

    # m h  dom mon dow   command  
    */2 * * * * date >> ~/time.log  

第二行是我为了测试写的一个定期任务，它的意思是，每隔两分钟就执行 date >> ~/time.log 命令（记录当前时间到 time.log 文件）。你可以把它加入你的 crontab 中，然后保存退出。

保存了 crontab 之后，我们还需要重启 cron 来应用这个计划任务。使用以下命令：

    sudo service cron restart  

下面稍微解释下 crontab 中每行的含义。crontab 中的每一行代表一个定期执行的任务，分为 6 个部分。前 5 个部分表示何时执行命令，最后一个部分表示执行的命令。每个部分以空格分隔，除了最后一个部分（命令）可以在内部使用空格之外，其他部分都不能使用空格。前 5 个部分分别代表：分钟，小时，天，月，星期，每个部分的取值范围如下：

分钟          0 - 59

小时          0 - 23

天              1 - 31

月              1 - 12

星期          0 - 6       0 表示星期天

除了这些固定值外，还可以配合星号（*），逗号（,），和斜线（/）来表示一些其他的含义：

星号          表示任意值，比如在小时部分填写 * 代表任意小时（每小时）

逗号          可以允许在一个部分中填写多个值，比如在分钟部分填写 1,3 表示一分钟或三分钟

斜线          一般配合 * 使用，代表每隔多长时间，比如在小时部分填写 */2 代表每隔两分钟。所以 */1 和 * 没有区别

          */2 可以看成是能被 2 整除的任意值。

以下是一些例子（省略了命令部分）：

    * * * * *                  # 每隔一分钟执行一次任务  
    0 * * * *                  # 每小时的 0 点执行一次任务，比如 6:00，10:00  
    6,10 * 2 * *            # 每个月 2 号，每小时的 6 分和 10 分执行一次任务  
    */3,*/5 * * * *          # 每隔 3 分钟或 5 分钟执行一次任务，比如 10:03，10:05，10:06  

 

以上就是在 cron 中加入计划任务的基本知识。因为 cron 中的任务基本就是执行命令行，所以当然也会有权限问题。以上例子中的任务就是以你当前登录用户的权限执行的，如果你需要以 root 用户执行某个任务，可以在 crontab 前加上 sudo。

    sudo crontab -e  

顺带一提，crontab 文件对每个用户都是不同的，所以刚才设置的定期看时间的任务，在这里是看不到的。因为我们没有为 root 用户增加这样的计划任务。

24、ubuntu 下载 dota2 的 stream 链接 steam://run/570（千万不要下哪个 free to play（百度经验推荐的方法 坑），这个是纪录片）

25、linux 下的命令行下载工具 aria2c 和 rtorrent

26、bind "set completion-ignore-case on"忽略大小写，cd baiduyun。。<tab><tab>会自动提示

27、ubuntu 安装 ap-hotspot 分享无线网 ：添加这个源 sudo add-apt-repository ppa:nilarimogard/webupd8，sudo apt-get update
sudo apt-get install ap-hotspot  配置$sudo ap-hotspot configure  启动（关闭其他无线）： $sudo ap-hotspot start
如果出现无法建立链接，一直卡在 start 命令
1、无法出现 Wireless Hotspot active，并一直保持 Starting Wireless Hotspot...
hostapd 默认版本有 bug
解决方法：
移除 hostapd

sudo apt-get remove hostapd

然后：
64 bit

cd /tmp
wget http://archive.ubuntu.com/ubuntu/pool/universe/w/wpa/hostapd_1.0-3ubuntu2.1_amd64.deb
sudo dpkg -i hostapd*.deb
sudo apt-mark hold hostapd
重新命令行 sudo apt-get install ap-hotspot 安装即可
28、https://launchpad.net/~nilarimogard/+archive/ubuntu/webupd8 这个网站有一些软件的源

29、qq
sudo add-apt-repository ppa:lainme/pidgin-lwqq

sudo apt-get update

sudo apt-get install pidgin-lwqq

sudo apt-get install pidgin

30、ftp 命令
登录 ftp localhost  或者 ftp://ftp 用户名称:Ftp 密码@Ftp 服务器
上传
ftp> ls
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rw-r--r--    1 0        0              65 Jun 28 01:08 1.txt
drwxrw-rw-    2 1001     1001         4096 Jun 28 01:01 upload
226 Directory send OK.
ftp> put
(local-file) /home/tt/1.png
(remote-file) upload/2.png
local: /home/tt/1.png remote: upload/2.png
200 PORT command successful. Consider using PASV.
150 Ok to send data.
226 Transfer complete.
35732 bytes sent in 0.00 secs (224.1888 MB/s)

下载
ftp> ls
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rw-------    1 1001     1001        35732 Jun 28 01:19 2.png
226 Directory send OK.
ftp> get
(remote-file) 2.png
(local-file) /home/tt/2.png
local: /home/tt/2.png remote: 2.png
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for 2.png (35732 bytes).
226 Transfer complete.
35732 bytes received in 0.00 secs (131.5702 MB/s)

退出 bye quiet

31、/etc/profile 配置 java 环境变量
#configure java environment variables
JAVA_HOME=/home/tt/application/jdk1.7.0_65
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/dt.jar
export JAVA_HOME PATH CLASSPATH

32、15.04 中 avi 格式闪屏，好坑

33、配置开机启动
方法一：可以在 rc.local 中加入挂载语句
方法二：在/etc 中加入
#windows c,d,e,f mount
# /mnt/windows was on /dev/sda1 UUID="E47A87957A876362"
UUID=E47A87957A876362  /mnt/windows      ntfs    defaults      
  0       0
# /mnt/applications was on /dev/sda5 UUID="0005241A0001DE15"
UUID=0005241A0001DE15  /mnt/applications  ntfs   defaults      
  0       0
# /mnt/resource was on /dev/sda6 UUID="000FDC74000D8E23"
UUID=000FDC74000D8E23 /mnt/resource      ntfs   defaults      
  0       0
# /mnt/media was on /dev/sda7 UUID="0009ED4F00048FE0"
UUID=0009ED4F00048FE0 /mnt/media    ntfs   defaults      
  0       0

sudo fdisk -l 查看磁盘盘号
sudo blkid 查看磁盘类型
mount -a 会/etc/fstab 中的项全部挂载，如果有错，则会提示错误，然后根据错误找出原因修改。

自动挂载:
    1. /usr/lib/systemd/system/systemd-udevd.service 复制到 /etc/systemd/system/systemd-udevd.service，将 MountFlags=slave 替换为 MountFlags=shared
    2. cd  /etc/udev/rules.d & touch 03-my-udev.rules
    3. vi 03-my-udev.rules 写入: KERNEL=="sd[b-z][0-9]", RUN+="/media/usbmount.sh %k", OPTI #!/bin/bash

下面是 usbmount.sh 脚本 chmod a+x
#目前来说代码创建的文件夹挂载不上， 后续再看
LOG=/var/log/usb-hotplug.log

lap=$(date --rfc-3339=ns)
echo "$lap: $DEVPATH requesting $ACTION $1" >> $LOG

if [ $ACTION == "add" ]
then
    #mkdir -p /media/usb
    mount  -o iocharset=utf8  /dev/$1 /media/usb
elif [ $ACTION == "remove" ]
then
    umount -l /media/sbhd-$1
    sync
    #rm -rf /media/usbhd-$1
fi



34、火狐的 ftp   http://ftp.mozilla.org/pub/mozilla.org/

35、保持屏幕亮度
sudo cat /sys/class/backlight/acpi_video0/max_brightness

到了 ubuntu14.10 后，路径就变为了 /sys/class/backlight/intel_backlight/max_brightness.但改不改都没什么所谓了，因为 14.10 中可以手动的调节光亮度，并且系统自动保存。再次启动系统的时候已经不需要再手动改了咯！ubuntu 终于修改了这一设定了。

我的是 15，也就是说亮度值可以在 0 ~ 15 之间。

修改 /etc/rc.local ,在最后的 exit 0 之前添加：

echo 3 > /sys/class/backlight/acpi_video0/brightness

系统完成启动最后会执行这个脚本，因此每次开机，都会把亮度值设置成 3。 

36、ubuntu 配置 vsftpd

注意：很多时候连接不到肯能是 linux 的防火墙导致，可以选择关闭防火墙，或者禁用防火墙服务

fedora 用：systemctl stop firewalld.service 有必要的话就 systemctl disable firewalld.service
其他 linux 例如 ubuntu 使用 service stop xxx 即可
看了网上很多关于 vsftpd 的安装配置教程，发现很多都是不可以用的，经过多次尝试，总结了一个最简单的设置方法。

第一步：安装 vsftpd

sudo apt-get install vsftpd

第二步：配置

sudo vi /etc/vsftpd/vsftpd.conf

注销掉，关闭匿名访问

#anonymous_enable=YES

去掉注销，#让本地账号可以访问，比如 root，等系统登录账号

local_enable=YES 

write_enable=YES

第三步：如果你需要让 root 可以访问需要执行第三步

sudo vi /etc/vsftpd/ftpusers

把 root 去掉

第四步：增加一个访问账号

增加一个 ftpgroup 用户组

sudo groupadd ftpgroup

增加用户 ftpuser 并设置其目录为/ftp/ftpuser(可以修改，但是必须创建该文件夹) （我用的是/home/myftp -d 参数。配置用户家目录）

sudo useradd -g ftpgroup -d /ftp/ftpuser -M ftpuser

如果上面的/ftp/ftpuser 没有被创建，即需要创建该文件夹

sudo mkdir /ftp

sudo mkdir /ftp/ftpuser

用户必须拥有权限才可以访问，赋予访问/ftp/ftpuser 的权限

sudo chmod 777 /ftp/ftpuser

第五步：设置 ftpuser 密码

sudo passwd ftpuser

第六步：重启 vsftpd

sudo restart vsftpd

这时候直接用 useradd 的帐号登录 ftp 会 530 login incorrect
解决方案
sudo vim /etc/pam.d/vsftpd
注释掉 
#auth    required pam_shells.so

在修改了 chroot_local_user 属性以后，发现进行客户端访问的时候会报错：500 OOPS: vsftpd: refusing to run with writable root inside chroot()
"如果启用 chroot,必须保证 ftp 根目录不可写,这样对于 ftp 根直接为网站根目录的用户不方便,所以建议假如 ftp 根目录是/home/${cjh},则将访问权限改写如下
chmod a-w /home/cjh


37、pkg-config --modversion glib-2.0 查看 glib 版本

38、利用 ubuntu 的 alias 命令来简化许多复杂难打的命令

39、系统设置缺失：sudo apt-get install unity-control-center 修复

40、气泡提醒 notify-send

41、查看 gnome 版本 gnome-session --version（ubuntu 自带版本 gnome-session 3.9.90） 
42、# 更新软件源
$ sudo apt-get update
# 升级没有依赖问题的软件包
$ sudo apt-get upgrade
# 升级并解决依赖关系
$ sudo apt-get dist-upgrade

# 不保留配置文件的移除
$ sudo apt-get purge w3m
# 或者 sudo apt-get --purge remove
# 移除不再需要的被依赖的软件包
$ sudo apt-get autoremove

$ sudo dpkg -L emacs//软件安装到了什么地方


*****************************fedora**************************
1、可以创建 shell 的子进程，比如使用 bash 命令或者 zsh 命令，根据不同的 shell 版本

2、head 和 tail 命令 查看文件的头几行和尾几行

3、在命令行中 ctrl+a == home,ctrl + e == end, ctrl + k == '从光标处往后删除'

4、>表示以覆盖的形式重定向到文件中   >>表示以追加的方式重定向到一个文件中

5、.和 source 作用相同 但是用法有时候不一样  source 命令的别名就是. ，记得与表示当前路径的.区分

6、updatedb 更新文件数据库，刚刚添加的文件就可以通过 locate 找到了，whereis 命令只能找到二进制、源代码、帮助文件

7、搜索总结 whereis 简单快速 locate 快而全 which 小而精(只找 path) find 精而细  $ find ~ -newer /home/shiyanlou/Code  //列出家目录下比 code 文件夹新的文件
$ find ~ -mtime 0 //当天有改动的文件

8、linux 有趣命令: cmatrix(黑客帝国) sl(train run) cowsay(牛说话，可以通过-f 变其他动物，通过-l 参数看可以变成什么) oneko(猫捉老鼠)  rev(字符串倒置) yes 可以不停的同意，相当于输入很多的 y    banner(图形显示字符)  xeyes(眼睛 前面加入 nohup 可以后台执行)  aafire(着火)   asciiquarium(水族馆)  fortune 命令，随机输出一句话，或者是一句英文名言，或者是一首唐诗宋词来，如果没有唐诗宋词，那就需要用 fortune-zh

9、zip -r -9 -q -o shiyanlou_9.zip /home/shiyanlou -x ~/*.zip  //设置压缩级别为 9 和 1（9 最大,1 最小）
$ zip -r -e -o shiyanlou_encryption.zip /home/shiyanlou //加密压缩包
zip -r -l -o shiyanlou.zip /home/shiyanlou //加上-l 参数将 LF 转换为 CR+LF 使得压缩包在 windows 下也可以使用

10、du 命令分别查看默认压缩级别、最低、最高压缩级别及未压缩的文件的大小 du -h -d 0 *.zip ~ | sort9、zip -r -9 -q -o shiyanlou_9.zip /home/shiyanlou -x ~/*.zip  //设置压缩级别为 9 和 1（9 最大,1 最小）最后那个-x 是为了排除我们上一次创建的 zip 文件，否则又会被打包进这一次的压缩文件中，注意:这里只能使用绝对路径，否则不起作用。

11、unzip
unzip -O GBK 中文压缩文件.zip //制定压缩文件原来的编码格式，防止减压后乱码
unzip -O GBK 中文压缩文件.zip //查看文件 不解压

12、rar
注意：rar 的命令参数没有-，如果加上会报错。
rar d shiyanlou.rar .zshrc   //从指定压缩包文件中删除某个文件：

13、tar
-f 用于指定创建的文件名，注意文件名必须紧跟在-f 参数之后，比如不能写成 tar -fc shiyanlou.tar，可以写成 tar -f shiyanlou.tar -c ~。
tar -czf shiyanlou.tar.gz ~  //后面的～是为了去掉开头路径中的/，避免减压时候减压到根目录

14、压缩文件格式        参数
*.tar.gz        -z
*.tar.xz        -J
*.tar.bz2       -j

15、df 命令查看磁盘容量

16、使用 du 命令查看目录的容量
-d 参数指定查看目录的深度
# 只查看 1 级目录的信息
$ du -h -d 0 ~
# 查看 2 级
$ du -h -d 1 ~

17、dd 命令
dd 的命令行语句与其他的 Linux 程序不同，因为它的命令行选项格式为选项=值，而不是更标准的--选项 值或-选项=值。dd 默认从标准输入中读取，并写入到标准输出中，但可以用选项 if（input file，输入文件）和 of（output file，输出文件）改变。
# 输出到文件
$ dd of=test bs=10 count=1 # 或者 dd if=/dev/stdin of=test bs=10 count=1
# 输出到标准输出
$ dd if=/dev/stdin of=/dev/stdout bs=10 count=1
上述命令从标准输入设备读入用户输入（缺省值，所以可省略）然后输出到 test 文件，bs（block size）用于指定块大小（缺省单位为 Byte，也可为其指定如'K'，'M'，'G'等单位），count 用于指定块数量。
$ dd if=/dev/stdin of=test bs=10 count=1 conv=ucase //数据转换,变大写字母

使用 dd 命令创建虚拟镜像文件
$ dd if=/dev/zero of=virtual.img bs=1M count=256
$ du -h virtual.img
使用 mkfs 命令格式化磁盘
$ mkfs.ext4 virtual.img //将我们的虚拟磁盘镜像格式化为 ext4 文件系统  带有文件系统的文件，可以就像硬盘一样挂载

18、想知道 Linux 支持哪些文件系统你可以输入 ls -l /lib/modules/$(uname -r)/kernel/fs

19、fdisk
# 查看硬盘分区表信息
$ sudo fdisk -l
# 进入磁盘分区模式
$ sudo fdisk virtual.img


20、选择执行
$ which cowsay>/dev/null && echo "exist" || echo "not exist"
上面的&&就是用来实现选择性执行的，它表示如果前面的命令执行结果（不是表示终端输出的内容，而是表示命令执行状态的结果）返回 0 则执行后面的，否则不执行
||在这里就是与&&相反的控制效果，当上一条命令执行结果为≠0($?≠0)时则执行它后面的命令

21、管道分为匿名管道和具名管道，一般我们使用的|是匿名管道，程序中一般使用具名管道

22、cut 命令
$ cut /etc/passwd -d ':' -f 1,6  //打印用：分隔的第一个和第六个域
# 前五个（包含第五个）
$ cut /etc/passwd -c -5
# 前五个之后的（包含第五个）
$ cut /etc/passwd -c 5-
# 第五个
$ cut /etc/passwd -c 5
# 2 到 5 之间的（包含第五个）
$ cut /etc/passwd -c 2-5
cut -d" " -f2 filename
意思就是我以空格为列的分隔符，提取第二列

或者使用 awk
awk '{print $2}' filename 
awk 默认以空格为分隔符，打印第二列


23、wc
wc 命令用于统计并输出一个文件中行、单词和字节的数目

cut 命令:
# 前五个（包含第五个）
$ cut /etc/passwd -c -5
# 前五个之后的（包含第五个）
$ cut /etc/passwd -c 5-
# 第五个
$ cut /etc/passwd -c 5
# 2 到 5 之间的（包含第五个）
$ cut /etc/passwd -c 2-5

ls -dl /etc/*/ | wc -l  //统计 /etc 下面所有目录数

24、sort 排序
$ cat /etc/passswd | sort //默认字典排序
$ cat /etc/passwd | sort -r //反转排序
$ cat /etc/passwd | sort -t':' -k 3 //特定字段排序
$ cat /etc/passwd | sort -t':' -k 3 -n //数字排序

25、uniq
uniq 命令可以用于过滤或者输出重复行。
$ history | cut -c 8- | cut -d ' ' -f 1 | uniq //去连续重复
uniq 命令只能去连续重复的行，不是全文去重，想要全文需要先排序
story | cut -c 8- | cut -d ' ' -f 1 | sort | uniq
# 或者$ history | cut -c 8- | cut -d ' ' -f 1 | sort -u

# 输出重复过的行（重复的只输出一个）及重复次数
$ history | cut -c 8- | cut -d ' ' -f 1 | sort | uniq -dc
# 输出所有重复的行
$ history | cut -c 8- | cut -d ' ' -f 1 | sort | uniq -D

26、文本处理命令
tr 命令
# 删除 "hello shiyanlou" 中所有的'o','l','h'
$ echo 'hello shiyanlou' | tr -d 'olh'
# 将"hello" 中的 ll,去重为一个 l
$ echo 'hello' | tr -s 'l'
# 将输入文本，全部转换为大写或小写输出
$ cat /etc/passwd | tr '[:lower:]' '[:upper:]'
# 上面的'[:lower:]' '[:upper:]'你也可以简单的写作'[a-z]' '[A-Z]',当然反过来将大写变小写也是可以的

col 命令
# 查看 /etc/protocols 中的不可见字符，可以看到很多 ^I，这其实就是 Tab 转义成可见字符的符号
$ cat -A /etc/protocols
# 使用 col -x 将 /etc/protocols 中的 Tab 转换为空格,然后再使用 cat 查看，你发现 ^I 不见了
$ cat /etc/protocols | col -x | cat -A

join 命令
# 创建两个文件
$ echo '1 hello' > file1
$ echo '1 shiyanlou' > file2
$ join file1 file2
# 将/etc/passwd 与/etc/shadow 两个文件合并，指定以':'作为分隔符
$ sudo join -t':' /etc/passwd /etc/shadow
# 将/etc/passwd 与/etc/group 两个文件合并，指定以':'作为分隔符, 分别比对第 4 和第 3 个字段
$ sudo join -t':' -1 4 /etc/passwd -2 3 /etc/group

paste 命令
$ echo hello > file1
$ echo shiyanlou > file2
$ echo www.shiyanlou.com > file3
$ paste -d ':' file1 file2 file3
$ paste -s file1 file2 file3

27、grep 模式匹配命令

28、sed 工具在 man 手册里面的全名为"sed - stream editor for filtering and transforming text "，意即，用于过滤和转换文本的流编辑器。
sed [参数]... [执行命令] [输入文件]...
# 形如：
$ sed -i '1s/sad/happy/' test # 表示将 test 文件中第一行的"sad"替换为"happy"

[n1][,n2]command
[n1][~step]command
# 其中一些命令可以在后面加上作用范围，形如：
$ sed -i 's/sad/happy/g' test # g 表示全局范围
$ sed -i 's/sad/happy/4' test # 4 表示指定行中的第四个匹配字符串

# 打印 2-5 行
$ nl passwd | sed -n '2,5p'
# 打印奇数行
$ nl passwd | sed -n '1~2p'

# 将输入文本中"shiyanlou" 全局替换为"hehe",并只打印替换的那一行，注意这里不能省略最后的"p"命令
$ sed -n 's/shiyanlou/hehe/gp' passwd

$ nl passwd | grep "shiyanlou"
# 删除第 21 行
$ sed -n '21c\www.shiyanlou.com' passwd

find -type f -name \*.java -exec sed -i '/package/s/tt\./lx/' {} \;

28、awk 文本处理语言

使用 awk 将文本内容打印到终端
# "quote>" 不用输入
$ awk '{
> print
> }' test
# 或者写到一行
$ awk '{print}' test


将 test 的第一行的每个字段单独显示为一行
$ awk '{
> if(NR==1){
> print $1 "\n" $2 "\n" $3
> } else {
> print}
> }' test

# 或者
$ awk '{
> if(NR==1){
> OFS="\n"
> print $1, $2, $3
> } else {
> print}
> }' test

awk 的处理逻辑, 输入行前 输入行 最后一行之后
awk 'BEGIN {} END'
#+BEGIN_EXAMPLE
echo -e "zhangsan 85 92 78 94 88\nlisi 89 90 75 90 86\nwangwu 84 88 80 92 84"|awk '{total=$2+$3+$4+$5+$6; avg=total/5; print $1"-->总成绩:"total" 平均分:"avg}'
#+END_EXAMPLE
+ 正则表达式匹配某个字段
  #+BEGIN_EXAMPLE
  #low b 写法
  echo -e "zhangsan 85 92 78 94 88\nlisi 89 90 75 90 86\nwangwu 84 88 80 92 84"|awk '$1 ~ /z.+/ {total=$2+$3+$4+$5+$6; avg=total/5; print $1"-->总成绩:"total" 平均分:"avg}'
  # for 循环
echo -e "zhangsan 85 92 78 94 88\nlisi 89 90 75 90 86\nwangwu 84 88 80 92 84"|awk '$1 ~ /z.+/ {total=0; for(i=2; i<=NF; i++){total+=$i;}; avg=total/5; print $1"-->总成绩:"total" 平均分:"avg}'
  #+END_EXAMPLE
+ 统计文件数及总大小
  #+BEGIN_EXAMPLE
    ll |awk '{print $5 "\t" $9}'|awk '$1 !~ '/^$/' {sum+=$1; ++filenum} END {print sum "\t" filenum}'
  #+END_EXAMPLE

29、vim 技巧  Ctrl+o 就可以回到你之前的位置

30、缩进

    普通模式下输入 15G，跳转到 15 行
    普通模式下输入>> 整行将向右缩进（使用，用于格式化代码超爽）
    普通模式下输入<< 整行向左回退
    普通模式下输入:进入命令行模式下对 shiftwidth 值进行设置可以控制缩进和回退的字符数

31、命令行  :ce 居中  :ri 右对齐  :le 左对齐

32、vim 同时编辑多个文件

    命令行模式下输入:n 编辑 2.txt 文件，可以加!即:n!强制切换，之前一个文件的输入没有保存，仅仅切换到另一个文件
    命令行模式下输入:N 编辑 1.txt 文件，可以加!即:N!强制切换，之前文件内的输入没有保存，仅仅是切换到另一个文件

33、进入 vim 后打开新文件

    命令行模式下输入:e 3.txt 打开新文件 3.txt
    命令行模式下输入:e# 回到前一个文件
    命令行模式下输入:ls 可以列出以前编辑过的文档
    命令行模式下输入:b 2.txt（或者编号）可以直接进入文件 2.txt 编辑
    命令行模式下输入:bd 2.txt（或者编号）可以删除以前编辑过的列表中的文件项目
    命令行模式下输入:e! 4.txt，新打开文件 4.txt，放弃正在编辑的文件
    命令行模式下输入:f 显示正在编辑的文件名
    命令行模式下输入:f new.txt，改变正在编辑的文件名字为 new.txt

34、
    命令行模式下输入:new 打开一个新的 vim 视窗
    命令行模式下输入:sp 2.txt 打开新的横向视窗来编辑 2.txt
    命令行模式下输入:vsp 3.txt 打开新的横向视窗来编辑 3.txt
    如果使用非 chrome 浏览器可以使用 Ctrl+w 进行视窗间的跳转
    分别在不同视窗的命令行模式下输入:q!退出多视窗编辑

35、mkdir -vp shiyanlou/{lib/,bin/,doc/{info,product}}  //创建目录，好方法

36、自定义回收站功能

命令：

myrm(){ D=/tmp/$(date +%Y%m%d%H%M%S); mkdir -p $D; mv "$@" $D && echo "moved to $D ok"; }

输出：

[root@localhost test]# myrm(){ D=/tmp/$(date +%Y%m%d%H%M%S); mkdir -p $D;  mv "$@" $D && echo "moved to $D ok"; }

[root@localhost test]# alias rm='myrm'

[root@localhost test]# touch 1.log 2.log 3.log

[root@localhost test]# ll

总计 16

-rw-r--r-- 1 root root    0 10-26 15:08 1.log

-rw-r--r-- 1 root root    0 10-26 15:08 2.log

-rw-r--r-- 1 root root    0 10-26 15:08 3.log

drwxr-xr-x 7 root root 4096 10-25 18:07 scf

drwxrwxrwx 2 root root 4096 10-25 17:46 test3

drwxr-xr-x 2 root root 4096 10-25 17:56 test4

drwxr-xr-x 3 root root 4096 10-25 17:56 test5

[root@localhost test]# rm [123].log

moved to /tmp/20121026150901 ok

[root@localhost test]# ll

总计 16drwxr-xr-x 7 root root 4096 10-25 18:07 scf

drwxrwxrwx 2 root root 4096 10-25 17:46 test3

drwxr-xr-x 2 root root 4096 10-25 17:56 test4

drwxr-xr-x 3 root root 4096 10-25 17:56 test5

[root@localhost test]# ls /tmp/20121026150901/

1.log  2.log  3.log

[root@localhost test]#

说明：

上面的操作过程模拟了回收站的效果，即删除文件的时候只是把文件放到一个临时目录中，这样在需要的时候还可以恢复过来。


&的作用：
ping www.baidu.com >> xx.txt & //&符号作用是把前面的命令放到后台执行

38、包含本地所有文件信息的数据库/var/lib/mlocate/

39、xargs 作用
将多行输入转换为单行输出，可以使用如下命令：

cat a.txt | xargs

将单行输入转换为多行输出，可以使用如下命令：

echo “1 2 3 4 5 6 7” | xargs -n 3

单行输入转换为多行输出，指定分隔符为 i，可以使用如下命令：

cat b.txt | xargs -d i -n 3

当前目录下所有 c 代码文件，统计总行数，可以使用如下命令：

find . -type f -name “*.c” | xargs wc -l

40、文件名转换 
convmv -f gb2312 -t utf8 -r --notest *

convmv -f cp936 -t utf8 -r --nosmart --notest <目录>

41、sort 排序
ls -l /usr/bin/ | sort -nr -k 5 | head -10

/bin 目录和/usr/bin 目录下所有相同的命令，可以使用如下命令：
ls /bin /usr/bin  | sort | uniq -d

sort  -k 1,1  -k 2n data.txt
第一个-k 选项指明只对第一个字段排序，1,1 意味着“始于并且结束于第一个字段”。 第二个-k 选项 2n 表示对第二个字段按数值排序。 还有一种格式，如-k 3.4，表示始于第三个字段的第四个字符，按数值排序。(这里的位数，需要在实际的位数基础上加 1)

统计出各个区号的总人数
student:
list 2000 89 1-24-56
wuli 2001 85 2-15-24
shen 2003 90 1-17-56
suya 2004 92 1-08-12
zhan 2005 86 2-06-15

实现思路：首先按区号对每行信息排序，然后使用 uniq 命令对区号进行重复行统计。使用命令如下：
sort -k 4.1n,4.1n student.txt | uniq -c -f 3 -w 2
sort -k 4.1n,4.1n 表示对第四个字段的第一个字符按数值排序。
uniq -c -f 3 -w 2 中-f 3 表示跳过前三列的比较，那么现在只剩下最后一列，-w 2 表示第 2 个字符后的内容不做比较，为什么是 2 呢，因为跳过前三列时并没有跳过最后一列前面的空格分隔符，区号前都还有一个空格。 -c 是对满足条件的重复记录数进行统计

排序后才能使用的命令：uniq join comm

42、将 time 命令的执行结果保存到文件中，可以使用如下命令：
{ time date; } 2>1.txt
(time date) 2>2.txt
time 命令的输出信息是打印在标准错误输出上的，所以用的是 2

43、脚本和二进制
可执行程序一般有两种实现方式：一种是二进制方式；另一种是脚本（script）方式。 二进制方式是先将编写好的程序（如 C/C++程序）进行编译，变成计算机可识别的指令代码（如.exe 文件），然后再执行。这种编译好的程序只能执行、使用，却看不到它的程序内容。 脚本，简单地说就是由一条一条的命令组成的文本文件，可以用记事本查看或者编辑。脚本程序在执行时，是由系统的一个解释器将其一条条地翻译成计算机可识别的指令，并按程序的逻辑顺序执行（一般来说，脚本程序是确定的一系列控制计算机进行运算操作的动作的组合，在其中可以实现一定的逻辑分支等）


44、浏览文件命令: cat more less head tail

45、Bash 的命令解释顺序：alias→keyword→function→built-in→$PATH 即，一旦出现重名的命令，那么优先级由高到低，依次是：别名→关键字→函数→内置命令→外部命令。

46、在一个命令或程序结束之后，都会返回一个退出状态。状态值范围为 0 到 255，0 表示成功执行，非零均表示失败，其中 127 表示未找到命令，内置变量$?存储着上一条命令的退出状态。 例如，date 命令运行成功，退出状态为 0：

$ date

Fri Oct 12 00:08:35 CST 2012

$ echo $?

0

47、使用 cat 命令将键盘输入重定向到文件 file1.txt，按〈Ctrl+D〉键结束键盘输入：
$ cat > file1.txt

48、 > file.txt # 将“空操作”重定向到文件 文件 file.txt 不存在时，命令“> file.txt”将产生一个新的空文件 file.txt；如果 file.txt 事先已经存在，file.txt 原有的内容将消失，字节数变为 0。除了 touch 命令之外，这里又介绍了一种产生新的空文件的方法。注意，file.txt 事先不存在的话，命令> file.txt 与命令 touch file.txt 效果相同；file.txt 事先存在的话，命令 touch file.txt 只改变了文件的时间戳，文件内容不受影响，命令> file.txt 将文件的内容清空（文件字节数变为 0），当然也同时改变文件的时间戳。

49、一条或者多条命令，可以放在小括号之中，也可以放在大括号之中。放在小括号之中时，命令是在一个子 shell 里面运行；放在大括号之中时，命令是在当前 shell 里面运行。看一个例子：

$ x=5

$ (x=10)

$ echo $x

5

$ { x=10;}

$ echo $x

10 因为(x=10)是在子 shell 里面给 x 赋值为 10，并不影响当前 shell 中的 x 的值，所以第一个 echo 命令显示 5。而{ x=10;}是当前 shell 里面给 x 赋值为 10，所以第二个 echo 命令显示 10。使用大括号的时候注意，左大括号的右面必须有空格，右大括号的左面必须有分号。

50、cd $(echo Documents) 和 反引号效果相同  cd `echo Documents` 都是进入到 Documents 目录

51、Shell 脚本中常用的操作符

算术操作
    +  -  *    /    %
   
关系操作
    <  >    >=      <=    ==    !=    &&  ||
   
测试操作
    测试命令 :  test    [ ]      [[ ]]    (( ))
   
1、测试文件状态
      -d  目录
      -b  块设备
      -s  文件长度 > 0、非空
      -f  正规文件
      -w  可写
      -L  符号连接
      -u  文件有 suid 位设置
      -r  可读
      -x  可执行
如：  [ -w tmp.txt ]        测试文件 tmp.txt 是否可写

2、字符串测试
      =  两个字符串相等
      !=  两个字符串不相等
      -z  空串
      -n  非空串
 
      $ VAR1='abc'
      $ VAR2='123'
      $ [ "$VAR1" = "$VAR2" ]
$ echo $?
1

3、测试数值
      -eq 等于
      -ne 不等于
      -gt 大于
      -lt 小于
      -ge 大于等于
      -le 小于等于

4. 拓展测试符号  [[ ]]  (( ))
# [[ 2 > 10 ]]  # 结果错误
# echo $?
  0
# ((  2 >10 ))  结果正确
# echo $?
  0

# [[ "aa" = "aa" ]]
# echo $?
  0
# (( "aa" = "aa" )) #结果错误
# echo $?
    1

结论:
    比较数字,使用(( ))
    其他测试使用 [[ ]]
    包含数字比较的混合测试,使用标准语法


52、逻辑运算
-a 逻辑与 exp1 -a exp2 如果表达式 exp1 和 exp2 都为真的话，那么结果为真。

-o 逻辑或 exp1 -o exp2 如果表达式 exp1 和 exp2 中至少有一个为真的话，那么结果为真。

注意：这与 Bash 中的比较操作符 && 和 || 非常相像，但是这个两个操作符是用在双中括号结构中的。

[[ condition1 && condition2 ]]

-o 和-a 操作符一般都是和 test 命令或者是单中括号结构一起使用的

if [ "$exp1" -a "$exp2" ]

unrar x xxxx.part1.rar 把多个分解的压缩文件，解压到一起
unzip -x xxx.zip

53、svn 使用
import project:
svn import -m "xxxxx" projectname file:///mnt/resource/local/projectname
ps:上面适用与处于项目的父目录下，后面的本地路径中 local 时当时建库的位置，后面加项目名，可以在库中添加多个项目

        //只添加没有纳入版本控制的文件
        svn st|grep '^\?'|tr '\?' ' '|sed 's/\ //'|xargs svn add
        svn st|grep ?|sed 's/^\?\ *//'|xargs svn add
    
        codetag 打标签
        svn update /home/lx7ly/Oracle/Middleware/user_projects/app/ifmis3.0
        svn update /home/lx7ly/Documents/codetag/01-pay
        cp -r /home/lx7ly/Oracle/Middleware/user_projects/app/ifmis3.0/PAY /home/lx7ly/Documents/codetag/01-pay/V3_0_3_0/code
        svn status /home/lx7ly/Documents/codetag/01-pay |grep -v '^\?' | tr '\?' ' '|sed 's/\ //' |xargs svn commit -m "";
54、打开多个文件：
1.vim 还没有启动的时候：
在终端里输入 
vim file1 file2 ... filen 便可以打开所有想要打开的文件
2.vim 已经启动
输入
:open file
可以再打开一个文件，并且此时 vim 里会显示出 file 文件的内容。

同时显示多个文件：
:split
:vsplit

在文件之间切换：
1.文件间切换
Ctrl+6—下一个文件
:bn—下一个文件
:bp—上一个文件
对于用(v)split 在多个窗格中打开的文件，这种方法只会在当前窗格中切换不同的文件。
2.在窗格间切换的方法
Ctrl+w+方向键——切换到前／下／上／后一个窗格
Ctrl+w+h/j/k/l ——同上
Ctrl+ww——依次向后切换到下一个窗格中

55、linux 挂载 windows 共享目录
sudo mount -t cifs -o username="Administrator",password="901401" //192.168.155.1/share /mnt/share

56、默认配置下，匿名用户登录 vsftpd 服务后的根目录是 /var/ftp/；
系统用户登录 vsftpd 服务后的根目录是系统用户的家目录。
若要修改登录 vsftpd 服务后的根目录，只要修改 /etc/vsftpd/vsftpd.conf 文件即可。
假设要把 vsftpd 服务的登录根目录调整为 /vae/www/html，可加入如下三行：
 local_root=/var/www/html
chroot_local_user=YES
anon_root=/var/www/html
注解：local_root 针对系统用户；anon_root 针对匿名用户。
 
编辑 vsftpd.conf 文件后，保存退出，参照如下指令重新启动服务：service vsftpd restart
之后 ftp 客户端登陆 vsftpd 服务后，其根目录是 /var/www/html。 


×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
1、管道与重定向的区别：
a、左边应该有标准输出|右边应该接受标准输入
b、左边的命令应该有标准输出>右边应该是文件
c、左边命令应该需要标准输入<右边应该是文件
read name < test.txt
echo $name

linux 下的记账软件 ledger
一辈子玩的游戏，nethack


**************************压缩加密****************************
方法一：用 tar 命令 对文件加密压缩和解压
压缩：
tar -zcf  - filename |openssl des3 -salt -k password | dd of=filename.des3 
此命令对 filename 文件进行加码压缩 生成 filename.des3 加密压缩文件，password 为加密的密码

解压：

dd if=filename.des3 |openssl des3 -d -k password | tar zxf -
注意命令最后面的“-”  它将释放所有文件， -k password 可以没有，没有时在解压时会提示输入密码

方法二：用 zip 命令对文件加密压缩和解压

压缩：
zip -re filename.zip filename 回车，输入 2 次密码 
zip -rP passwork filename.zip filename  passwork 是要输入的密码  
解压：
unzip filename.zip 按提示输入密码  
unzip -P passwork filename.zip passwork 是要解压的密码，这个不会有提示输入密码的操作  
====================================================分卷===================================================
    1.rar
　　
    rar a -m5 -v12m myarchive myfiles # 最大限制为 12M
　　rar e myarchive.part1.rar #解压
　　分卷压缩
　　ubuntu 下没有默认安装 rar，可以通过 sudo apt-get install rar,sudo apt-get install unrar 来安装 rar.
　　安装过后，使用以下命令进行分卷压缩：
　　rar a -vSIZE 压缩后的文件名 被压缩的文件或者文件夹
　　例如：rar a -v50000k eclipse.rar eclipse
　　此命令即为对 eclipse 文件夹进行分卷压缩，每卷的大小为 50000k，压缩后的文件名为 eclipse.rar


　　2.tar


　　举例说明：
　　要将目录 logs 打包压缩并分割成多个 1M 的文件，可以用下面的命令：
　　tar cjf - logs/ |split -b 1m - logs.tar.bz2.
　　完成后会产生下列文件：
　　logs.tar.bz2.aa, logs.tar.bz2.ab, logs.tar.bz2.ac
　　要解压的时候只要执行下面的命令就可以了：
　　cat logs.tar.bz2.a* | tar xj
　　再举例：
　　要将文件 test.pdf 分包压缩成 500 bytes 的文件：
　　tar czf - test.pdf | split -b 500 - test.tar.gz
　　最后要提醒但是那两个"-"不要漏了，那是 tar 的 ouput 和 split 的 input 的参数。


　　3、用 7z
　
    同样用以上例子
　　在 film 上层目录操作，保留 film 目录名
　　压缩：7z a film.7z film -v80m
　　解压到当前目录：7z x film.7z.001
　　解压到目录 a: mkdir a && cd a && 7z x ../film.7z.001
　　或者 7z -oa x film.7z.001
　　不保留 film 目录名
　　压缩 cd film && find . | xargs 7z a film.7z -v80m
　　解压 7z -oa x film.7z.001
　　单纯采用 7z 的话，文件的权限(拥有者)属性会丢失， 采用如下办法则可以保留：
　　压缩：
　　tar cf - film | 7z a -si film.tar.7z -v80m
　　解压缩：
　　7z x -so film.tar.7z.001 | tar xf -


*********************************************学习 vim 笔记*****************************************************************
1.vim 推荐查询手册
help autocmd  help scripts help variables help functions help usr_41.txt
2、80 个事件 200 个函数
3、打开折叠 zo 关闭折叠 zc
4、set foldlevel=0 查看当前文件最高级别折叠，查看源文件时候可以从整个模块看，好牛逼
5、linux 补全，输入 ctrl+x 然后 ctrl+k,ctrl+L 补全整行(搜索的是当前文件中内容),ctrl+f(搜索文件名)


1、firefox 使用 vimperator 或者 penpadactly 插件，实现全键盘操作，windows 的火狐开发版部支持这个插件
２、linux 切换标签页面 ctrl+pageup/pagedown


linux 快捷键:
alt+f2 快速执行一条命令
alt+tab  + super + 1 旁边那个 `
ctrl+alt+tab 切换键盘焦点
super+a 显示所有的应用程序
super+pageup/pagedown 切换工作区
super+shift+pageup/pagedown 移动到工作区
super+m 显示消息托盘
ctrl+alt+delete 关机
    PRTSC (Print Screen) - 截屏
    Alt + PRTSC - 当前窗口截图
    Shift + PRTSC - 所选区域截图
这里还有一个比较特殊的按键，主要是为了大家可以更容易的制作视频教程的。
    CTRL + ALT + SHIFT + R - 录制视频
    CTRL + ALT + SHIFT + R 第二次按下时 - 停止录制


********************************************samba***********************************************
https://wiki.archlinux.org/index.php/Samba_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)
1、安装 samba yaourt -S samba
   网上的教程还说要装一个 smbfs(sudo

apt-get install smbfs)。但实际运行的时候会报这个报已经被取代。所以不装也没事。
   然后配置 samba 配置文件
# wget "https://git.samba.org/samba.git/?p=samba.git;a=blob_plain;f=examples/smb.conf.default;hb=HEAD" -O /etc/samba/smb.conf
    sudo vim /etc/samba/smb.conf
   要把 workgroup=workgroup，

工作组要配对
2、首先用-L 命令查看远程服务器共享的目录：
    smbclient

-L //192.168.1.108/ -U username%password 
    smbclient

-L 192.168.1.108 -U username%password
上面的两条命令分别用了 FTP 的地址表达格式和 IP 地址的表达方式。
 然后可以看到远程服务器上的共享目录都被列了出来：
Sharename       Type      Comment
---------       ----      -------
ADMIN$          Disk      远程管理
C$              Disk      默认共享
E$              Disk      默认共享
F$              Disk      默认共享
forshare        Disk      
IPC$            IPC       远程 IPC
此外，还会报错：
session request to 192.168.1.108 failed (Called name not present)

session request to 192 failed (Called name not present)

session request to *SMBSERVER failed (Called name not present)

NetBIOS over TCP disabled -- no workgroup available
不用管它。
3、然后就可以去访问具体的目录：
smbclient //192.168.31.160/BaiduNetdiskDownload -U zhao%xxx
   然后进入 smb 的子 shell：
   smb: \> 
   在其中可以用 cd（进入目录），ls（罗列文件和文件夹），get（下载文件），put（上载文件） 等命令进行 相应操作。
注意:在哪一个目录下运行 smbclient，smb 就会把下载的文件放到该目录下，某些目录创建文件需要权限，要 sudo smbclient //ip/dir -U username%psd
sudo mount -t cifs //192.168.31.160/BaiduNetdiskDownload /home/lx7ly/windows/baidudownload -o user=zhao,password="xxxx",iocharset=utf8
执行上面命令报错：  原因， 更新了内核后， 需要重启机器， 没有加载磁盘格式


autojump
   需要记住的一点 :  j 是 autojump 的一个封装，你可以使用  j 来代替 autojump， 相反亦可。
    j -v 查看版本
    j 目录 --跳转
    jo 目录 --在文件管理器中打开目录

常见问题：
1. weblogic 启动报错 java.net.UnknownHostException
问题基本定位修改在/etc/hosts 文件

Linux 下设置 DNS 的位置主要是，
   网卡设置配置文件里面 DNS 服务器地址设置，2.系统默认 DNS 服务器地址设置。3,hosts 文件指定
生效顺序是：
hosts 文件 ---- 2 网卡配置文件 DNS 服务地址 ---3 /etc/resolv.conf
 连接网络但是打不开浏览器页面， 访问不到 dns  需要在/etc/resolv.conf 加入 8.8.8.8 等

dumpe2fs

##### find -print0 |xargs -0 作用
find 在打印出一个文件名之后接着输出一个 NULL 字符 ('\0') 而不是换行符, 然后再告诉 xargs 也用 NULL 字符来作为记录的分隔符. 
这就是 find 的 -print0 和 xargs 的 -0 的内涵。
一般的编程语言中都用 '\0' 来作为字符串的结束标志, 文件的路径名中不可能包含 '\0' 字符.选 '\0' 而不是其他字符做分隔符大概也是因此而来。

###### linux 不解压 war 包修改内容
1. 直接用 vim xx.war 进入目录修改配置文件
2. jar -uvf xxx.war xx 目录/xx 文件 (注意: 文件路径要与在 war 包中路径一致， 否则压缩进去位置页不对)
3. 或者使用 zip 命令  http://www.cnblogs.com/lucyjiayou/archive/2011/12/25/2301046.html

###### 匹配 ip
1. ((1[0-9][0-9]\.)|(2[0-4][0-9]\.)|(25[0-5]\.)|([1-9][0-9]\.)|([0-9]\.)){3}((1[0-9][0-9])|(2[0-4][0-9])|(25[0-5])|([1-9][0-9])|([0-9]))
2. 正则表达式替换(192.168.0.235) : \(\(1[0-9][0-9]\.\)\|\(2[0-4][0-9]\.\)\|\(25[0-5]\.\)\|\([1-9][0-9]\.\)\|\([0-9]\.\)\)\{3\}\(\(1[0-9][0-9]\)\|\(2[0-4][0-9]\)\|\(25[0-5]\)\|\([1-9][0-9]\)\|\([0-9]\)\) 

###### paste 命令
paste -s 文件名  可以当作行转列
paste file1 file2  文件合并， 按列

###### diff 命令
＋ 添加行，这一行将会出现在第二个文件内，而不是第一个文件内 (第二个文件增加行)

－ 删除行，这一行将会出现在第一个文件中，而不是第二个文件内（第一个文件到第二个文件会删除行）

！ 更改行，将会显示某个文本行的两个版本，每个版本会出现在更改组的各自部分

这些特殊字符很容易混淆，实际上记住一点就行：所有操作目的是将第一个文件变成第二个文件。

#####time
time 命令的输出信息是打印在标准错误输出上的。

##### 查看当前使用的 shell
1. ps-p $$
2.  echo $0
3.  echo $SHELL
chsh -s $(which zsh)//修改 shell 为 zsh

#####编码转换
1.安装

　　$sudo apt-get install enca

　　2.查看当前文件编码

　　enca -L zh_CN ip.txt

   Simplified Chinese National Standard; GB2312

   Surrounded by/intermixed with non-text data

　　3.转换

　　命令格式如下

　　$enca -L 当前语言 -x 目标编码 文件名

　　例如要把当前目录下的所有文件都转成 utf-8

　　enca -L zh_CN -x utf-8 *

   enca -L zh_CN file 检查文件的编码　

　　enca -L zh_CN -x UTF-8 file 将文件编码转换为"UTF-8"编码　

　　enca -L zh_CN -x UTF-8 < file1 > file2 如果不想覆盖原文件可以这样，很简单吧。

##### 排除文件
#+BEGIN_EXAMPLE
find /home/lx7ly/Documents -path "/home/lx7ly/Documents/notes" -prune -o -print
#+BEGIN_EXAMPLE

#### emacs 中文输入法
+ 在 home application 下新建 emacs25.sh
+ 在该文件中加入
#+BEGIN_EXAMPLE
#!/bin/bash  
  
export GTK_IM_MODULE=fcitx  
export QT_IM_MODULE=fcitx  
export XMODIFIERS=@im=fcitx  
export LC_CTYPE=zh_CN.UTF-8  
emacs  
#+BEGIN_EXAMPLE
+ 修改 emacs.desktop 引向的文件为 该文件，enjoy it

* linux ssh 远程连接
  + 普通方式
    ssh 用户名@IP 地址 -p 端口号 如果连接成功的话会提示你输入远程服务器的密码。全部成功之后 SSH 就会显示远程服务器的提示符，这时候就说明连接成功了。
  + 密钥登录
    每次登录 SH 都需要输入密码很麻烦，而且可能不太安全。SSH 还能使用另外一种登录方式，也就是使用密钥登录。这种登录方式需要客户端生成一堆公钥私钥对，然后将公钥添加到服务器中，这样下次就可以直接登录了。
    + 首先在本地生成 SSH 密钥(ssh-keygen)，依照提示输入信息即可。默认生成在用户主目录中的.ssh 文件夹中。带 pub 的是公钥，接下来需要添加到服务器中。
    + 然后将本地公钥添加到服务器中，需要使用另一个命令：scp -P 端口号 本地文件路径 用户名@远程服务器地址:远程路径
    + 然后登陆服务器，找到复制进去的公钥，将公钥名字改为 authorized_keys 并添加到对应的.ssh 文件夹中(more id_rsa.pub >> authorized_keys)。然后退出 SSH 重新登陆试试，成功的话不需要输入密码就会直接进入远程服务器。
* Linux 查看物理 CPU 个数、核数、逻辑 CPU 个数
  + 总核数 = 物理 CPU 个数 X 每颗物理 CPU 的核数 
  + 总逻辑 CPU 数 = 物理 CPU 个数 X 每颗物理 CPU 的核数 X 超线程数
** 查看物理 CPU 个数
  cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l
** 查看每个物理 CPU 中 core 的个数(即核数)
  cat /proc/cpuinfo| grep "cpu cores"| uniq
** 查看逻辑 CPU 的个数
  cat /proc/cpuinfo| grep "processor"| wc -l
** 查看 CPU 信息（型号）
  cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c
* archlinux 查看开启启动的服务, 解决无法静态连接网络
  + systemctl list-unit-files --state=enabled
    + 发现 dhcpcd 和静态配置同时存在，关闭 dhcp.service
    +  参考 archlinx 官方文档网络配置， 动态 dhcp 和 static 不要同时配置
    + nmcli命令查看网络配置
* 屏幕亮度
  + 最大亮度查看
    #+BEGIN_EXAMPLE
    cat  /sys/class/backlight/intel_backlight/max_brightness
    #+END_EXAMPLE
* 键盘按键编码
  + xev | grep -A2 --line-buffered '^KeyRelease' | sed -n '/keycode /s/^.*keycode \([0-9]*\).* (.*, \(.*\)).*$/\1 \2/p'
  + 输入上面命令后按键就会输出对应的编码
  + 参考: https://wiki.archlinux.org/index.php/Extra_keyboard_keys
* fc命令
  + 输出上次执行的命令
* type
  + 查看文件类型
  + 查看命令来源
    + type -a ll # 一个别名

* oracle表连接
  在左外连接和右外连接时都会以一张表为基表，该表的内容会全部显示，然后加上两张表匹配的内容(所以，显示的记录数可能比原来左表的记录条数更多)。 如果基表的数据在另一张表没有记录。 那么在相关联的结果集行中列显示为空值（NULL）。对于外连接， 也可以使用“(+) ”来表示。 关于使用（+）的一些注意事：
    1. （+）操作符只能出现在where子句中，并且不能与outer join语法同时使用。
    2.  当使用（+）操作符执行外连接时，如果在where子句中包含有多个条件，则必须在所有条件中都包含（+）操作符
    3. （+）操作符只适用于列，而不能用在表达式上。
    4. （+）操作符不能与or和in操作符一起使用。
    5. （+）操作符只能用于实现左外连接和右外连接，而不能用于实现完全外连接。
* oracle 表复制语句
  + INSERT INTO SELECT语句
      + Insert into Table2(field1,field2,...) select value1,value2,... from Table1
  + SELECT INTO FROM语句
      +  SELECT vale1, value2 into Table2 from Table1
* 标准SQL修改字段类型和长度语句：
  ALTER TABLE tableName modify column columnName 类型;
  例如Mysql的修改字段类型语句：
  alter table test modify column name varchar(255);
  Oracle修改字段类型和长度语句：
  ALTER TABLE tableName modify(columnName 类型);
* 递归查询
  #+BEGIN_EXAMPLE
  select * 
  from FASP_T_PUBAGENCYGL t 
  start with exists (select 1 
  from (SELECT * 
  FROM FASP_T_PUBAGENCYGL 
  WHERE GUID IN 
  ((select l.guid 
  from fasp_t_busrumprulelink l 
  where l.batchguid = 
  'BBEA8FAC43254C58B7CFCCD19343D0F1'))) t2 
  where t2.guid = t.guid) 
  connect by t.guid = prior t.superguid;
  #+END_EXAMPLE 
** 树状结构展现
  #+BEGIN_EXAMPLE
  oracle中的select语句可以用START WITH…CONNECT BY PRIOR子句实现递归查询，connect by 是结构化查询中用到的，其基本语法是： 
  select … from 
  where 
  start with 
  connect by ;
  #+END_EXAMPLE 
  ：过滤条件，用于对返回的所有记录进行过滤。 
  ：查询结果重起始根结点的限定条件。 
  ：连接条件 
** 数据库表结构如下：
  #+BEGIN_EXAMPLE
  create table t2( 
  root_id number, 
  id number, 
  name varchar(5), 
  description varchar(10) 
  ); 
  insert into t2(root_id,id,name,description) values(0,1,'a','aaa'); 
  insert into t2(root_id,id,name,description) values(1,2,'a1','aaa1'); 
  insert into t2(root_id,id,name,description) values(1,3,'a2','aaa2'); 
  insert into t2(root_id,id,name,description) values(0,4,'b','bbb'); 
  insert into t2(root_id,id,name,description) values(4,5,'b1','bbb1'); 
  insert into t2(root_id,id,name,description) values(4,6,'b2','bbb2'); 
  #+END_EXAMPLE
** 获取完整树：
  #+BEGIN_EXAMPLE 
  select * from t2; 
  select * from t2 start with root_id = 0 connect by prior id = root_id; 
  #+END_EXAMPLE
** 获取特定子树： 
  #+BEGIN_EXAMPLE
  select * from t2 start with id = 1 connect by prior id = root_id; 
  如果connect by prior中的prior被省略，则查询将不进行深层递归。 
  如： 
  select * from t2 start with root_id = 0 connect by id = root_id; 
  select * from t2 start with id = 1 connect by id = root_id; 
  #+END_EXAMPLE
** 总结：
  + start with id= 是定义起始节点（种子），可以是id也可以是root_id,定义为root_Id查询该节点下所有的树结构，定义为id（子节点）则查询指定的树 
  + connect by prior ：prior的含义为先前，前一条记录。prior id=root_id 也就是前一条记录 
  + 的id等于当前记录的root_id(父id) 
  +可以向下或者向上查找。。。。 
  +level字段为oracle特有的层级字段，可以通过level字段查询指定的层级 
  +select root_id,id,name,level from t2 where level=1 
  +start with root_id = 0 
  +connect by prior id = root_id;
* 索引创建
  1.  明确地创建索引
      #+BEGIN_EXAMPLE	
      create index index_name on table_name(field_name)
      tablespace tablespace_name
      pctfree 5
      initrans 2
      maxtrans 255
      storage
      (
      minextents 1
      maxextents 16382
      pctincrease 0
      );
      #+END_EXAMPLE
  2.  创建基于函数的索引
    + 常用与UPPER、LOWER、TO_CHAR(date)等函数分类上，例：
      #+BEGIN_EXAMPLE	
      create index idx_func on emp(UPPER(ename)) tablespace tablespace_name;
      #+END_EXAMPLE
  3. 创建位图索引
    + 对基数较小，且基数相对稳定的列建立索引时，首先应该考虑位图索引，例：
      #+BEGIN_EXAMPLE
      create bitmap index idx_bitm on class (classno) tablespace tablespace_name;
      #+END_EXAMPLE
  4. 明确地创建唯一索引
    + 可以用create unique index语句来创建唯一索引，例：
      #+BEGIN_EXAMPLE
      create unique index dept_unique_idx on dept(dept_no) tablespace idx_1;
      #+END_EXAMPLE
  5. 创建与约束相关的索引
    + 可以用using index字句，为与unique和primary key约束相关的索引，例：
      #+BEGIN_EXAMPLE
    alter table table_name
    add constraint PK_primary_keyname primary key(field_name)
    using index tablespace tablespace_name;
      #+END_EXAMPLE
  6. 如何创建局部区索引？
    + 基础表必须是分区表
    + 分区数量与基础表相同
    + 每个索引分区的子分区数量与相应的基础表分区相同
    + 基础表的自分区中的行的索引项，被存储在该索引的相应的自分区中，例如
      #+BEGIN_EXAMPLE	
      create index TG_CDR04_SERV_ID_IDX on TG_CDR04(SERV_ID)
      Pctfree 5
      Tablespace TBS_AK01_IDX
      Storage(
      MaxExtents 32768
      PctIncrease 0
      FreeLists 1
      FreeList Groups 1
      )
      local
      #+END_EXAMPLE
  7. 如何创建范围分区的全局索引？
    + 基础表可以是全局表和分区表
      #+BEGIN_EXAMPLE	
      create index idx_start_date on tg_cdr01(start_date)
      global partition by range(start_date)
      (partition p01_idx vlaues less than ('0106')
      partition p01_idx vlaues less than ('0111')
      partition p01_idx vlaues less than ('0401'))
      #+END_EXAMPLE
  8. 如何重建现存的索引？
    + 重建现存的索引的当前时刻不会影响查询
    + 重建索引可以删除额外的数据块
    + 提高索引查询效率
      #+BEGIN_EXAMPLE	
    alter index idx_name rebuild nologging;
      #+END_EXAMPLE
  9. 对于分区索引
      #+BEGIN_EXAMPLE
    alter index idx_name rebuild partition partition_name nologging;
      #+END_EXAMPLE
  10. 删除索引的原因？
    + 不再需要的索引
    + 索引没有针对其相关的表所发布的查询提供所期望的性能改善
    + 应用没有用该索引来查询数据
    + 该索引无效，必须在重建之前删除该索引
    + 该索引已经变的太碎了，必须在重建之前删除该索引
    语句：
      #+BEGIN_EXAMPLE
      drop index idx_name;
      drop index idx_name partition partition_name;
      #+END_EXAMPLE
  11. 建立索引的代价？
  基础表维护时，系统要同时维护索引，不合理的索引将严重影响系统资源，
  主要表现在CPU和I/O上。
  插入、更新、删除数据产生大量db file sequential read锁等待。
** 关于创建索引的建议
虽然说，在表中是否创建索引，不会影响到Oracle数据库的使用，也不会影响数据库语句的使用。这就好像即使字典没有目录的话，用户仍然可以使用它一样。可是，若字典没有目录，那么可想而知，用户要查某个条目的话，其不得不翻遍整本字典。数据库也是如此。若没有建立相关索引的话，则数据库在查询记录的时候，不得不去查询整个表。当表中的记录比较多的时候，其查询效率就会很低。所以，合适的索引，是提高数据库运行效率的一个很好的工具。
不过，并不是说表上的索引越多越好。过之而不及。故在数据库设计过程中，还是需要为表选择一些合适的索引。宁缺勿滥，这是建立索引时的一个遵循标准。在理论上，虽然一个表可以设置无限的索引。但是，数据库管理员需要知道，表中的索引越多，维护索引所需要的开销也就越大。每当数据表中记录有增加、删除、更新变化的时候，数据库系统都需要对所有索引进行更新。故数据库表中的索引绝对不是多多益善。具体来说，在索引建立上，笔者对大家有如下建议。

** 建议一：在基数小的字段上要善于使用位图索引。
 基数是位图索引中的一个基本的定义，它是指数据库表中某个字段内容中不重复的数值。如在员工信息表中的性别字段，一般就只有男跟女两个值，所以，其基数为2;婚姻状况字段的话，则其只有已婚、未婚、离婚三种状态，其基数就为3;民族一览内也是只有有限的几个值。
对于要查询基数小的字段，如现在用户想查找所有婚姻状况为“已婚”的“女性”时，利用位图索引可以提高查询的效率。这主要是因为标准索引是通过在索引中保存排序过的索引列以及对应的ROWID来实现的。若我们在基数小的列上建立标准索引的话，则其会返回大量的记录。
而当我们在创建位图索引的时候，在Oracle会对整个表进行扫描，并且会为索引列的每个取值建立一个位图。若内容相同，则在位图上会以一个相同的数字表示。此时，若这个字段的基数比较小的话，则若需要实现对整个字段的查询的话，效率就会非常的高。因为此时，数据库只要位图中数字相同的内容找出来即可。
除了在数据表某列基数比较小的情况下，采用位图索引外，我们往往在一些特殊的情况下，也会建议采用位图索引。最常见的情况是，在Where限制条件中，若我们多次采用AND或者OR条件时，也建议采用位图索引。因为当一个查询饮用了一些部署了位图索引的列的时候，这些位图可以很方便的与AND或者Or 运算符操作结合以快速的找出用户所需要的记录。
但是，这里要注意，不是在条件语句中包含运算符的时候，采用位图索引都能够提供比较高的效率。一般来说，只有AND 或者OR运算符的时候，位图索引才会比较具有优势。若此时用户采用大于号或者不等于号作为条件语句中的限制条件的时候，则往往采用标准索引具有更大的优势。
所以，笔者在数据库设置中，一般只有在三种情况下才采用位图索引。一是列的基数比较小，而有可能需要根据这些字段的内容查找相关的记录;二是在条件语句中，用到了AND或者OR运算符的时候。除了这两种情况外，最好能够采用其他适合的索引。第三种情况是，需要用到NULL作为查询的限制条件。因为标准查询一般情况下，会忽略所有的NULL值列。也就是说，若需要查询“所有没有身份证号码”的员工的信息的时候，标准索引并不能够起到加速查询速度的作用。此时，就需要采用位图索引。因为位图索引会记录相关的NULL值列信息。

** 建议二：创建索引的一些限制条件。
并不说，表或者列建立的索引越多越好。相反，索引建的越多，有时会反而会影响数据库运行的整体性能。所以，在建立索引的时候，仍然会有一些限制条件。
一是不要对一些记录内容比较少的表建立索引。在一个应用系统设计的时候，如设计一个ERP系统的数据库，其虽然有几千张表。但是，并不是每张表都有大量记录的。相反，其中有近一半左右的数据表，可能其存储的数据不会超过百条。如员工登陆帐户密码表、企业部门信息表等等。对于这些记录内容比较少的表，我们建立最好不要为其建立索引。无论是表上的，还是字段上，都不要建立索引。


二是若表中的内容比较大，但是，这个表基本上不怎么查询的时候，则只需要在表上建立索引即可;而不需要在字段上建立索引。如现在在ERP系统中，有一张表是“AD_Table”。其存储的是这个数据库中相关表的信息。这张表只有在数据库设计的时候才会用到。故这张表中的记录虽然比较多，但是由于用户用的比较少，所以，一般没有必要为这张表建立列级别上的索引。而直接用表索引来代替。

三是在一些NULL字段上，要根据实际情况来判断是否要建立索引。如现在有一张人事档案的表格，其上面有两个字段，分别为“身份证号码”与“地区”。有时会为了某个原因，企业需要所有员工都在系统中登记他们的身份证号码，以方便他们办工资卡、社会保险等等。所以人事管理可能需要经常的查询系统，看看有没有没有身份证号码的员工信息。此时，就需要利用条件“IS NULL”来查询我们所需要的记录。故为了提高查询效率，若某个记录可能为空，并且经常需要以NULL为条件进行查询的时候，则最好给这个字段添加一个索引，并且最好建立位图索引。相反，若虽然可能会以NULL这个条件作为查询的限制语句，但是，用的不是很多的时候，则就没有必要为其建立索引。

** 建议三：多表连接查询的索引设计。

如现在有一个人事管理系统。人事经理想知道员工的社保缴纳情况。他需要知道员工的姓名、职务、户籍性质(农民户口跟居民户口费用不一样)、缴纳的情况等等。但是，这些信息包含在不同的表中。因为为了提高数据库的性能，在表中存储的可能只是某些序号，而不是具体的内容。如在社保表中，存储的是员工对应的编号，而不是员工的名字。所以，要得到这份报表的话，就可能需要关联员工基本信息表、公司组织结构表等表格，才能够查询到用户所需要的内容。

为此，就需要利用Join语句，把这些表格关联起来。为了提高数据库的查询效率，这些用来关联的字段，最好能够建立索引。这可以显著的提高查询的速度。

** 建议四：在表的更新速度与查询速度之间寻求一个平衡点。

众所周知，索引本身并不影响数据库的使用，其主要是为了提高数据库的查询效率。但是，由于当数据库的表中的数据更新的时候，包括记录的增加、删除、更改等等，都会对虽有的索引进行更新。

很明显，索引虽然可以提高查询速度。但是，也会对一些表的更新操作产生不良的影响。当在表中建立的索引越多，这个不利影响也会越大。故数据库管理员在设置索引的时候，还需要注意，在这两个之间需要一个均衡点。

按照一般的理论来说，当某个表多数用来查询、更新相对来说比较上的话，则要多多采用索引。相反，当某个表记录更新居主导，查询相对来说比较少的话，则不要建立太多的索引，避免对更新的速度差生不利影响。
* minus使用
** 建立测试数据及表
  #+BEGIN_EXAMPLE
  CREATE TABLE test1 (str VARCHAR2(15));
  CREATE TABLE test2 (str VARCHAR2(15));
  CREATE TABLE test3 (str VARCHAR2(15));
  INSERT INTO test1 VALUES('1');
  INSERT INTO test1 VALUES('2');
  INSERT INTO test1 VALUES('3');
  INSERT INTO test1 VALUES('4');
  INSERT INTO test1 VALUES('5');
  INSERT INTO test1 VALUES('6');
  INSERT INTO test2 VALUES('4');
  INSERT INTO test2 VALUES('5');
  INSERT INTO test2 VALUES('6');
  INSERT INTO test3 VALUES('1');
  INSERT INTO test3 VALUES('2');
  INSERT INTO test3 VALUES('3');
  INSERT INTO test3 VALUES('4');
  INSERT INTO test3 VALUES('5');
  INSERT INTO test3 VALUES('6');
  #+END_EXAMPLE
** 测试
  #+BEGIN_EXAMPLE
  --没查到数据说明完全相等
  SELECT STR, COUNT(1)
    FROM (SELECT STR FROM TEST1 UNION ALL SELECT STR FROM TEST3)
  GROUP BY STR
  HAVING COUNT(*) < 2;-- 这里的2不是固定的，如果是三个表关联，就是小于3， 每一个组中str里的数据不能重复，否则结果可能不对
  --查到数据说明不相等 
  (
    SELECT *
      FROM TEST1
    MINUS
    SELECT *
      FROM TEST2)
    UNION ALL (SELECT * FROM TEST2 MINUS SELECT * FROM TEST1)
  #+END_EXAMPLE
* oracle数据查询结果转json
#+BEGIN_EXAMPLE
执行这个过程， 得到sql语句, 执行sql获取的数据就是json格式
SET SERVEROUTPUT ON;

DECLARE
    v_count        NUMBER;
    v_table_name   VARCHAR2(100) := 'T_RECEIVEBDGDATA'; --表名
    v_sql          CLOB;
    v_i            NUMBER := 0;
BEGIN
    SELECT
        COUNT(*)
    INTO
        v_count
    FROM
        user_tab_cols
    WHERE
        table_name = v_table_name;

    v_sql := 'select  ''{';
    FOR col_cur IN (
        SELECT
            column_name,
            data_type,
            data_length
        FROM
            user_tab_cols
        WHERE
            table_name = v_table_name
    ) LOOP
        IF
            ( col_cur.data_type = 'DATE' )
        THEN
            v_sql := v_sql
             || '"'
             || col_cur.column_name
             || ' ":"'' || TO_CHAR('
             || col_cur.column_name
             || ',''yyyy-mm-dd HH24:mi:ss'') || ''"''';
        ELSIF ( col_cur.data_type = 'VARCHAR2' ) THEN
            v_sql := v_sql
             || '"'
             || col_cur.column_name
             || '":"''||'
             || col_cur.column_name
             || '|| ''"''';
        ELSIF ( col_cur.data_type = 'NUMBER' ) THEN

--格式化数字
            v_sql := v_sql
             || '"'
             || col_cur.column_name
             || '":''|| nvl(RTRIM(to_char('
             || col_cur.column_name
             || ',''fm9999999990.99999''),''.''),''""'')';
        END IF;

        v_i := v_i + 1;
        IF
            ( v_i < v_count )
        THEN
            v_sql := v_sql || '|| '',';
        END IF;

--如果拼接的sql字符串太长，50个字段拼接为1列
        IF
            ( v_i MOD 50 = 0 )
        THEN
            dbms_output.put_line(v_i);
            v_sql := v_sql || ''',''';
        END IF;

        IF
            ( v_i = v_count )
        THEN
            v_sql := v_sql || ' || '' } ''';
        END IF;

--VARCHAR2

--NUMBER
    END LOOP;

    v_sql := v_sql || ' from ' || v_table_name;
    dbms_output.put_line(v_sql);
END;
#+END_EXAMPLE

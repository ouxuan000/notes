1、javascript包括三部分语法，基础语法，dom（document object model）和bom（brower object model）
2、javascript可以出现在html的任何一个地方，一般把函数定义写在head里，操作语句出现在body里面
3、如果ie里面打开一个窗口不能操作其他的叫model
4、javascript调试
	ie-工具-internet选项-高级-把禁用脚本调试的勾勾去掉，显示每个脚本提示勾上
5、多段javascript中的变量共享
6****html 中 meta元素属性：charset=utf-8。 在script中引入：charset="gb2312“， 便可解决乱码了。******
7、javascript中的数组跟java不同，这里下标相当于是java对象中的成员变量，变量名是0.1.2等数字，但是在java中变量名不能是数字，这也是数组定义也没用的原因
8、内置对象this指的是当前的这个标签
9、学习javascript主要也是去看别人的源代码，看javascript for web 看不懂英文看目录，看例子程序，实在看不懂再看内容!不要被英文吓到
10、Javascript写在哪里？概括起来就是三种形式：
	 内部：Html网页的<body></body>中；
	 内部：Html网页的<head></head>中；
	 外部：外部JS文件里。

(1) Javascript写在<body></body>中
当浏览器载入网页Body部分的时候，就执行其中的Javascript语句，执行之后输出的内容就显示在网页中。

(2) Javascript写在<head></head>中
有时候并不需要一载入HTML就运行Javascript，而是用户点击了HTML中的某个对象，触发了一个事件，才需要调用Javascript。这时候，通常将这样的Javascript放在HTML的<head></head>里。


(2) Javascript写在<head></head>中
将Javascript程序放到一个后缀名为.js的文本文件里。
在HTML里引用外部文件里的Javascript，应在Head里写一句<script src="文件名"></script>，其中src的值，就是Javascript所在文件的文件路径。示例代码如下：
11、一般函数定义出现在head里，操作出现在body里面
12、form表单中，onsubmit得到的返回值是true就会提交表单，返回false不会提交



*****************思软实习**********************************
1、可以直接在html页面中通过<script type="text/javascript"></scrpit>编写javascipt代码，也可以使用<script type="text/javascript" src="xxxx"></scrpit>使用外部文件的javascript。如果好多文件使用同一份代码，推荐使用外部调用式。

2、没有使用var声明变量的时候。这个变量就是全局变量。但是定义这个变量的方法必须被执行到，它才会作为全局变量存在
	例如  function fn2（）{
		c=20；
		alert（c）；
		}
	    function fn(3){
		alert(c); //如果fn2这个方法没有执行。c是访问不到的，但是如果fn2执行了以后，就可以输出c。
		} 	

3、javascript变量的类型Number String  Array Date；

4、如果强制转换一个非数字类型的字符串为数字，会得到NaN 表示not a number

5、使用parseInt（）可以把字符串中开头的数字转换位number。例如可以parseInt("14px") == 14;

6、typeof（a）方法显示a的类型。例如定义var a ={‘a’,'b','c'}  typeof(a),值位object，因为对于数组，它的类型就是object。

7、在js中非0为true，0是false。注意NaN表示false，档一个变量没有定义值的时候是underfined类型，Underfined是false。特别注意，在js中出了NaN，underfined，0以外，其余的全是true。

8、如何在js中创建对象？
	//感觉这个玩意儿像是类中的构造方法，但是js中没有构造方法一说，这个就是算创建一个类了吧。
	function Person(name,age){
		this.name = name;//person类中的name属性。下同上
		this.age = age;//
		this.address = "ningwu"//

		var c = 10;//如果不像上面一样使用this声明，c仅仅是一个局部变量，不会当做对象的属性。
	}
	//创建了一个person对象。
	var p1 = new Person("张三"，20);
	alert(p1.name);

9、var x = function(){
	}
	//此时的x就是一个function；

	function fn(){

	}
	var y = fn;//此时y这个变量只想函数fn，可以通过y()来调用函数。

10、在js中对于对象而言，可以使用for in遍历对象的属性。
	for(var a in p1){//a表示遍历的数据类型，p1代表遍历哪个对象，类似与增强的for循环，因为js中只有一种类型，所以写成var。
		//可以获取对象中所有显示声明的属性。
		alert(a);//显示属性名字
		alert(a + ":" + p1[a]);//属性名：属性值；
	}	
	
11、function fn1(obj){
	//设置这个对象的颜色，在js中设置文本样式，使用xx.style.样式名称
	obj.style.color="#f00";
	//当使用js来设置样式时，如过在css中通过-表示的，在js中统一使用驼峰标示，例如font-size在js中表示位fontSize；
	obj.style.fontSize = "20px"
	}

12、function fn(obj){
	obj.innerHTML;//innerHTM属性用来得到这个obj标签对象后面的文本
	如果获得文本框输入值，使用obj.value;
	}
	例如<div onclick="fn(this)">呵呵</div>，那么如果点击这个div它就会把div当做对象穿过方法中，innerHTML属性就会得到  呵呵，this表示当前对象。

13、//在一秒之后执行bigger这个函数，setTimeout的意思就是间隔一段时间执行某个函数
	setTimeout（“bigger（）”，500）；但是setTimeout仅仅实惠执行一次
	setInterval（“bigger（）”，500）；这个方法会多次执行。
14、document.getElementById("id");//获取叫id的标签对象。

15、var btn = documentgetElementById（“btn”）；
	//通过如下方式来绑定时间，使用这种方式绑定时间，就可以完成事件和代码的解耦和；
	//实际开发中一般都会使用事件绑定
	
	btn.onclick = funtion(){
		//这里的this指的就是叫btn的哪个标签对象（这里this怎么找到这个标签的？？）
		this.value;
	}
	
	//这个事件处理函数默认有一个event的参数，用来获取相应的事件信息。
	btn.onclick = function(event){
		alert(event.type);
		//对于ie而言这种方式不行 ,ie需要通过window.event来获取事件。
		//alert(window.event.type);
		ie使用上面这个可以了，但是非ie内核的浏览器firefox等又不行了
		一般使用下面这种方式
		event = event || window.event;
		alert(event.type);
	}

16、事件绑定方式带来的问题是，如果这段代码在head中定义，在执行到绑定事件时候，世纪中还没有在html中把这个标签渲染出来，意思就是说，叫btn的哪个标签还没有出现呢，通过dom得到的节点是null，所以我们应该想到，应该让所有标签先渲染出来，然后再去执行其他的事件绑定代码。
	解决方案：让页面加载完成之后来获取事件，可以在body中通过onload事件处理
	<head>
	<script type="text/javascript">
    	/**
    	* 当窗口加载完成之后才来执行init函数
    	*/
    	window.onload = init;
    	/**
    	* 此时init方法是在body的onload之后执行的，就等于在所有的页面标签加载完成之后执行init方法
    	*/
    	
    	function init() {
	    	
    	}
    </script></head>

17、<html>
	<!-- 早期都是这样访问，document.body是固定的对象，然后所有的image、form、table都是body的下级。

	由于这样的方法可能太混乱了，所以现在才使用document.GetElemntById这样的方法，提倡使用id来定位部件。 -->
	<head>
	  <script>
		window.onload = function() {
			alert(abc.p.value);  //这样也可以访问 是什么语法？
		};
	  </script>
	</head>
	<body>
	  <form name="abc">
	    <input type="hidden" name="p" value="1"/>
	  </form>
	</body>
	</html>


18、如何把session中的变量赋给javascript变量
如下：

<%
   BmInfo bm=(BmInfo)session.getAttribute("bm");
   KhUsers user=(KhUsers)session.getAttribute("userInfo");
  
  %>
  <script type="text/javascript">
   var bm='<%=bm.getBmMc() %>'; 
   var curreceUserName='<%=user.getUserName() %>';
  </script> 

 

赋值时<% %>两边要加上单引号，这是关键。

如：'<%=user.getUserName() %>' 

19、javascript闭包和python闭包：貌似都是返回了带有所在位置环境变量的一个函数

20、javascript正则表达式
test：测试string是否包含有匹配结果，包含返回true，不包含返回false。 
[javascript] view plain copy
在CODE上查看代码片派生到我的代码片

    <script type="text/javascript">  
        var str = "bbs.byr.cn";  
        var reg = /b/;  
        var ret = reg.test(str);  
        alert(ret); //true  
    </script>  



match：根据pattern进行正则匹配,如果匹配到,返回匹配结果,如匹配不到返回null
[javascript] view plain copy
在CODE上查看代码片派生到我的代码片

    <script type="text/javascript">  
        var str = "ThIS isn't me";   
        var reg = /is/ig;  
        var ret = str.match(reg);  
        alert(ret); //IS, is  
        console.log(ret); //["IS", "is"]   
    </script>   



search ：根据pattern进行正则匹配,如果匹配到一个结果,则返回它的索引数;否则返回-1 
[javascript] view plain copy
在CODE上查看代码片派生到我的代码片

    <script type="text/javascript">  
        var str = "This isn't me";  
        var reg = /is/;  
        var ret = str.search(reg);  
        alert(ret);//2  
    </script>  


replace：根据pattern进行正则匹配,把匹配结果替换为replacement 
[javascript] view plain copy
在CODE上查看代码片派生到我的代码片

    <script type="text/javascript">  
        var str = "i love china!";  
        var pattern = /i/g;  
        var ret = str.replace(pattern, "I");  
        alert(ret); //I love chIna!  
    </script>  


split：根据pattern进行正则分割,返回一个分割的数组
[javascript] view plain copy
在CODE上查看代码片派生到我的代码片

    <script type="text/javascript">  
        var  str = 'http://www.baidu.com/';  
        var  reg = /\W/;  
        var  ret = str.split(reg);  
        console.log(ret); //["http", "", "", "www", "baidu", "com", ""]   
    </script>  



exec：对string进行正则处理,并返回匹配结果.array[0]为原字符串,array[i]为匹配在整个被搜索字符串中的位置。
[javascript] view plain copy
在CODE上查看代码片派生到我的代码片

    <script type="text/javascript">  
        var str = "i love china!";   
        var reg = /i\B/g;   
        var ret = reg.exec(str);   
        alert(ret); // i  
        console.log(ret); //["i", index: 9, input: "i love china!"]   
    </script> 

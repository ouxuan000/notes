第二十七讲中：1、让页面中某个元素在body中，左右居中，可以定义上下固定，左右定义auto即可
2、为什么在列表中，左浮动，图片显示不会 覆盖，但是前面几个颜色块会覆盖？？

一、学习心得------参考优秀的网站

1、我们制作的静态页面主要使用的技术是xhtml+css 只要网上能看到的他的源码是公开的。

【1】、分析优秀网站是如何布局的（结构化）
【2】、试着去做一个--模仿
【3】、尝试创新---高手

css精灵技巧优化网页的http请求次数，提高网页效率。

******css精灵的核心思想，就是多张图片，合成为一张图片，谈后通过背景属性中的定位来控制到底显示图片的那些部分。

*****如果网页中能选择中的图片，肯定就是插入的图片，选不中的就是背景图片

二、css布局方式：

1、默认的就是按文档流的顺序，按html的结构顺序。

2、浮动方式

3、定位方式：

三、浮动
	浮动式将快元素的霸道属性独占一行的行为取消，允许别人使用该行
	浮动其实是这个块从原来的文档流模式中分离出来它后面的对象，后面的对象视他不存在
 
	常用的布局效果，一行并列式，即一行中显示几个块元素。

css吧网页元素分为俩类，一种是块，一种是内联元素。

body，div，p，h1

ul与li默认情况下是块元素，想让他们在一行中显示，就要使用浮动。

******当IE6父元素中的子元素高度超过了父元素的高度，IE6默认会把父元素的高度自动增加。

*****如果想让多个块显示在同一行中，可以将这些块都设置为浮动，并且浮动方向相同

*******浮动浮动，先浮后动，浮动对象会先漂浮起来，离开原来的位置。后动就是他后面的对象向他原来位置动起来。

******如果俩个块后面的块漂浮，相对于前面的块位置没影响。
四、清除浮动
	就是可以去掉前面对象的浮动对后面对象的影响，注意同级标签中，如果上一个标签添加了浮动，那么下一个标签要注意加clean清除浮动




×××××××××××××××××××××××思软实习×××××××××××××××××××××××××××××××××××××××××××××
	默认标签的顺序是从左向右，然后从上到下，对于具有霸道属性的标签，去掉霸道属性后，其他标签就可以跟到其后面，如果后面的剩余宽度不够，就会自动换行

	
	background-image和image的区别：background的图片会保存在本地，而image标签添加的图片每次都会从网上下载，所以，对于经常变化的图片使用img，对于不变化的图片是哟个background-image

	定位垂直居中的一般做法，使用span定位
	span{
		position:relative;
		top:xxpx;	
	}

注意：在html中a标签和span标签类似，仅仅只是用来设置文本。这俩个标签在w3c中默认不能设置宽度等样式，所以，位span和a设置宽度等样式是没用的，需要通过display:block之后才会有效果。
例子 span{
		border:1px red solid;
		width:200px;
		display:block;	
	}

使用了绝对定位后，原来的位置就不被占用了，比如在一个div中使用俩个子类div，如果子类1中使用了相对定位，那么子类2中的位置只能占用出了div1后的位置！如果div使用绝对行为，那它的位置就会让出去，div2可以直接顶到头。

包含选择器和子对象选择器：
	包含选择器 标签与标签之间使用空格
	div span{
		color:ss;
	}
	
	子对象选择器：不包括子标签中的h2，仅仅支持第一级的子对象
	div > h2{
	
	}

浏览器兼容性  对于padding而言，如果一个标签设置了height和width，此时在设置padding，对于ie而言padding的设置不会加入到width和height中，对于获取等浏览器，padding的值会加到width和height中。

绝对定位absolute是相对于上一级设置了position位absolute的，如果他的所有上级都没有设置absolute，那么他的位置相对于浏览器而言的，相对定位relative是相对于父节点而言的。

推荐的居中方式（不存在浏览器兼容性）
	position:absolute;
	left:50%;
	margin-left:512px;

background: mpx ypx; 前一个位置定位左右，后一个定义上下。

鼠标放上去改变成手形，在hover伪类中使用cursor:pointer;

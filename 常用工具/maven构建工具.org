* maven简单使用
  1. 安装配置JAVA环境
  2. 下载安装maven (http://maven.apache.org/)，配置环境变量M2_HOME
  3. 生成项目骨架: mvn archetype:generate -DgroupId=com.lx.app -DartifactId=helloworld -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
     + 如果遇到,[INFO] Generating project in Batch mode
       + 增加一个-X参数         
        #+BEGIN_EXAMPLE
          mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false -X
        #+END_EXAMPLE
       + 停留在了 [DEBUG] Searching for remote catalog: http://repo1.maven.org/maven2/archetype-catalog.xml
       + 下载缓存文件
        1. 把上述地址复制到浏览器中，下载这个文件到本地。
        2. 把文件archetype-catalog.xml复制到目录.m2\repository\org\apache\maven\archetype\archetype-catalog\2.2下面。
        3. 在上述命令后增加参数-DarchetypeCatalog=local，变成读取本地文件即可。 
  4. 创建HelloWorld.java
    #+BEGIN_SRC java
    package com.lx.app;

    /**
    * Hello world!
    * 
      */
    public class HelloWorld 
    {
          public static void main( String[] args )
        {
            System.out.println(new HelloWorld().sayHello());
        }

        public String sayHello(){
            return "HelloWorld";
        }
    }
    #+END_SRC
  5. 编译
    mvn clean compile
  6. 创建 HelloWorldTest.java
    #+BEGIN_SRC 
    package com.lx.app;
    import org.junit.Test;
    import static org.junit.Assert.assertEquals;
    public class HelloWorldTest 
    {
        @Test
        public void testSayHello()
        {
            HelloWorld helloWorld = new HelloWorld();
            String result = helloWorld.sayHello();
            assertEquals("HelloWorld", result);
        }
    }
    #+END_SRC
  7. 测试HelloWorld (这里不需要引入HelloWorld 他们属于同一层级)
    mvn clean test
  8. 打包 （默认会打成jar包）
    mvn clean package
  9. 安装到本地库(打包后只有安装到本地库, 其他的模块才可以引用他)
    mvn install
  10. 生成可执行jar包 修改pom.xml文件
    #+BEGIN_EXAMPLE
      <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>

        <groupId>com.lx.app</groupId>
        <artifactId>helloworld</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>jar</packaging>

        <name>helloworld</name>
        <url>http://maven.apache.org</url>

        <properties>
          <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        </properties>

        <dependencies>
          <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.7</version>
            <scope>test</scope>
          </dependency>
        </dependencies>

        <build>  
              <plugins>  
                  <plugin>  
                      <groupId>org.apache.maven.plugins</groupId>  
                      <artifactId>maven-shade-plugin</artifactId>  
                      <version>1.2.1</version>  
                      <executions>  
                          <execution>  
                              <phase>package</phase>  
                              <goals>  
                                  <goal>shade</goal>  
                              </goals>  
                              <configuration>  
                              <!-- 打包带有主函数入口的jar包 -->  
                                  <transformers>  
                                      <transformer  
                                          implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">  
                                          <mainClass>com.lx.app.HelloWorld</mainClass>  
                                      </transformer>  
                                  </transformers>  
                              </configuration>  
                          </execution>  
                      </executions>  
                  </plugin>  
              </plugins>  
          </build> 

      </project>
    #+END_EXAMPLE
  11. maven中央仓库
    http://mvnrepository.com/
  12. mvn archetype:crawl 生成本地maven构建可选列表, 下次构建时候使用 mvn archetype:generate -DarchetypeCatalog=local ,构建会从本地选择构建项目类型
* 问题解决
1. 不能再maven项目下通过命令添加模块:  需要修改父级目录下的pom.xml里面package标签中war改成pom
2. 打包以后发现包名与artifactid指定的不一致，与父目录指定了下面的配置有关系，覆盖或删掉
   #+BEGIN_EXAMPLE
   <build>
           <finalName>oem</finalName>
       </build>
   #+END_EXAMPLE
3. studentbbs model模块通过mvn命令一直编译不过，配着依赖关系都没用，打开包中心发现大的包里有一段引用父级的配置，删掉就好，具体如下
   #+BEGIN_EXAMPLE
   [ERROR] Failed to execute goal on project studentbbs-model: Could not resolve dependencies for project com.lx.studentbbs:studentbbs-model:jar:1.0-SNAPSHOT: Failed to    collect dependencies at com.lx.studentbbs:studentbbs-util:jar:1.0-SNAPSHOT: Failed to read artifact descriptor for com.lx.studentbbs:studentbbs-util:jar:1.0-SNAPSHOT: Could    not find artifact com.lx.studentbbs:studentbbs:pom:1.0-SNAPSHOT -> [Help 1]
   #+END_EXAMPLE
   #+BEGIN_EXAMPLE
    studentbbs-model dependency configration like this
    no problem but cant mvn compile
   <dependency>
      <groupId>com.lx.studentbbs</groupId>
      <artifactId>studentbbs-util</artifactId>
      <version>1.0-SNAPSHOT</version>
 </dependency>
   #+END_EXAMPLE
   #+BEGIN_EXAMPLE
    why?
    repontory  studentbbs-util-1.0-SNAPSHOT.pom conf
    <?xml version="1.0"?>
   <project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
       <modelVersion>4.0.0</modelVersion>
       <!-- reason this delete or zhushi this-->
       <parent>
        <groupId>com.lx.studentbbs</groupId>
           <artifactId>studentbbs</artifactId>
        <version>1.0-SNAPSHOT</version>
       </parent>
        <~--reason end-->
           <groupId>com.lx.studentbbs</groupId>
               <artifactId>studentbbs-util</artifactId>
           <version>1.0-SNAPSHOT</version>
       </project>
   #+END_EXAMPLE
4. The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
   解決:systemctl start mysqld.service

* 依赖范围和classpath
依赖范围{scope:[compile, {test: junit},{provided: serverlet-api}, {runtime: jdbc 驱动}, {system: 系统本地jar文件, 与provided范围一致}， import]} 就是用来控制 {编译, 测试, 运行}classpath, 以junit为例， scope设置为 test, 如果是测试阶段classpath, 就会引入junit， 如果是编译阶段classpath就不会引入junit

下图标识依赖范围和classpath的关系
| 依赖范围 | 编译classpath有效 | 测试classpath有效 | 运行classpath有效 | 例子        |
|----------+-------------------+-------------------+-------------------+-------------|
| compiler | Y                 | Y                 | Y                 | spring-core |
| test     | ----              | Y                 | ----              | junit       |
| provided | Y                 | Y                 | ----              | servlet-api |
| runtime  | ----              | Y                 | Y                 | jdbc        |
| system   | Y                 | Y                 | ----              | 本地jar文件 |

* 传递性依赖和依赖范围 
(如下图： 左一列为第一依赖范围， 最上一行为第二依赖范围, 表格为空的部分表示不传递)
| 第一依赖\第二依赖 | compiler | test | provided | runtime  |
|-------------------+----------+------+----------+----------|
| compiler          | compiler | ---- | ----     | runtime  |
| test              | test     | ---- | ----     | test     |
| provided          | provided | ---- | provided | provided |
| runtime           | runtime  | ---- | ----     | runtime  |
解释: 如果第二依赖是compiler， 最终对于项目来说依赖范围与第一一致 例如: a<--b(第一： compiler),  b<-c(第二: compiler)  a&c？(compiler)

* 依赖调解
  1. 路径最短
  2. 第一声明(文件中位置)
* 生命周期和插件
  1. 命令的输入代表了生命周期[clean:{清理项目}, default:{构建项目 compile, xxxx}, site:{建立站点}] (抽象: 生命周期只定义， 具体插件实现), 三套生命周期相互独立, 例如: mvn compile不会clean， 只有mvn clean compile才会去clean
* 最佳实践:
  1.  seting.xml 放到用户目录 cp /opt/maven/setting.xml ~/.m2/ 配置用户范围seting
  2. 自定义脚手架，自动生成项目(general servelet)
  3. 排除依赖 (去掉不想使用的依赖版本(版权， 非正式版), 手动指定)
  4. 归类依赖: 设置全局变量， 设置版本， 方便统一升级 ${springframework.version}
  5. 优化依赖: mvn dependency: {tree, list, analyze} 从当前项目开始找到依赖关系， 当前项目配置的依赖为顶层依赖
  6. artifacid  maven自动生成的项目目录以artifactid开头, 所以这里推荐以 项目-模块起名
  7. 一般不推荐修改maven默认目录结构， 但是如果是遗留项目，不能修改项目结构， 修改成maven项目， 需要配置项目结构
  为什么叫资源过滤，资源过滤相当于grep，取出来以后再选择包含，或者不包含过滤文件
* 常用操作
  1. 生成普通项目模块
  #+BEGIN_EXAMPLE
    mvn archetype:generate -DgroupId=com.lx.app -DartifactId=helloworld -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
  #+END_EXAMPLE
  2. 生成web项目模块
  #+BEGIN_EXAMPLE
  mvn archetype:generate -DarchetypeArtifactId=maven-archetype-webapp -DgroupId=com.lx.ssm -DartifactId=web
  #+END_EXAMPLE
  3. 常用插件https://www.cnblogs.com/pixy/p/4977550.html
* 好用的插件
  + 这个插件效果类似spring-boot, 打成的jar包可以直接运行, 配置后直接执行 mvn -Dmaven.test.skip -U clean package, 然后在打好的路径下 java -jar xxx.jar
  #+BEGIN_EXAMPLE
  <plugins>
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.1</version>
                <executions>
                    <execution>
                        <id>tomcat-run</id>
                        <goals>
                            <goal>exec-war-only</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <!-- ServletContext path -->
                            <path>/</path>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
  #+END_EXAMPLE

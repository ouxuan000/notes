1，凡是老师讲过的程序自己敲一遍（注：看懂以后自己敲，不要当打字机）

2.java 成员变量：class里面的   局部变量：方法里面的
变量作用域：出了定义变量的括号里别人就不认识了。

3.boolean里面只有俩个值：true forse

4.ascii码，英文字母一般占一个字节（8bit），unicode统一了全球语言编码（注：它所表示的每个字符均占俩个字节）

5.线程是一个程序内部不同的执行路径。

6.遇到程序的异常，记下异常的名字，以后就认识了。

7.infinity 无穷大，double转换float可能产生溢出

8.代码格式特别重要：
	1>遇到左大括号tab缩进；
	2>语句 方法之间留空行；
	3>并排语句之间加空格；
	4>运算符俩边夹空格；
	5>成对编程（防止丢括号）；
9."+"运算符俩侧的操作数中只要有一个是字符串（string）类型，系统会自动将另一个操作数转换为字符串然后在进行连接。
	例如：int c=12；
		System.out.println("c="+d);

10.System.out.println();语句打印时，如果语句不是string类型，会自动转换成string然后打印；

11.初学者尽量不要省略大括号；

12.for语句中的i 也是出了for后，没人认识他

13.for语句执行过程，先判断初值是否满足条件，然后执行，接着执行第二个分号后面的语句，在判断，才决定是否执行；

14.内存中stack中装局部变量；

15.switch语句中 不写break会出现穿透；

16.多看例子

17.看到整数编译器默认当做int类型，看到小数，编译器默认当做double类型；

18.byte short char 互相之间不转化，用的时候全部转化成int类型

19.短路与和逻辑与的区别：短路就是有前面一个值就可以确定结果，第二个就不用看了

20.面向对象的思维，看到一个东西，首先应该想到里面有什么东西（哪些类，哪些对象），其次想到类或者对象里面应该具有什么样的属性和成员变量，最后想到类与类、对象与对象之间有什么关系。不考虑怎么做；


21.属性和成员变量是一回事；

22.类与类之间的关系，关联，继承，聚合，实现，多态。

23.必须首先定义类才有对象，类和对象是分不开的

24.局部变量和成员变量的区别(重要)：局部变量程序不会默认初始化，必须先定义，然后赋值，最后才能使用；而成员变量（类体里的变量），定义后系统会给默认值。

25.基础类型 ：四类八种，其余均为引用类型，基础类型定义后在内存分配一块空间，而引用类型则是分配俩快。

26.一小块内存指向一大块内存。

27.方法的局部变量（在栈中）在方法调用完成之后自动消失。

28.构造方法前面没有返回值，即便是void都不行。

29.类名首字母大写，变量名方法名首字母小写，驼峰标识。

30.分析一个程序时 从main方法的第一句话开始。

31.调用一个方法，必须new一个对象，然后用“引用名.方法名”的形式调用这个方法

32.通过对象的引用调这个对象里面的方法，才可以改变堆里面的值。

33.类Test2 是公共的，应在名为Test2.java的文件中声明public class Test2

33.一个package里面 貌似不能定义俩个一样的类

34.方法的返回值存在一个临时的区域里面。

35.对哪个对象调的这个方法，this就指的是谁。

36.this关键字  就近声明原则，（见基础教程3 图）

34.什么样的方法构成重载：a。方法名一样 b。参数个数或参数类型不一样

35.非静态的方法必须针对某个对象进行调用（方法前面没有写static，调用的时候一定要写new一个对象才能调）

36.类的任何一个对象都访问同一个静态变量，没有对象，类名.xx也是访问的静态变量。

37.静态的方法中不能访问非static的成员（注：如果静态成员和main方法在一个类中，则可以直接调用方法）;不在同一个类中静态变量可以不用new一个对象，而直接使用（类名.方法名），非静态变量必须new一个对象才能使用。

38.无论你new多少个对象，或者不new对象，static变量都在datasegament中只保存一份。

39.package总结：
	a.如果把一个类放在包里面，第一句话写package，编译出来的class文件必须位于正确的目录下面（和包的层次要完全一致）；
	b.如果想在另外一个类里用这个包里的类，必须把名字写全了zhangsan.lisi.cat=new zhangsan.lisi.cat()；
	c.如果第一句话是package，在命令行运行class文件的时候，必须在类名前面加上包的路径，才可以运行。

40.java.lang包不需要引入，直接使用。

41.jar包可以直接设置成classpath，里面的东西就可以都找到。

42.private的东西，你可以继承，但是你不能动，出了这个类就不能访问。

43.方法的重写 在子类中可以根据需要从基类继承来的方法进行重写
		重写的方法必须和被重写的方法具有相同的方法名称、参数列表和返回类型（方法的重写尽量用复制粘贴的方式，防止出错）。
		重写的方法不能使用比被重写的方法更严格的访问权限。

44.父类和基类指的是一个东西。

45.引用数据类型就是对对象的引用，包括对象，接口，数组的引用，它实际存放的是一个地址。

46.严格来讲，字符串常量放在data segament  通过一个引用来指向它；

47.object类是所有类的基类；所有的对象（包括数组）都要实现这个类的方法（默认继承object类）。

48.toString方法：
	Object类中有public String toString（）方法，其返回值是String类型，描述当前对象的有关信息。
	在进行String与其它类型数据的连接操作时（如：System。out.println("info"+person)）,将自动调用该对象类的toString（）方法；
	根据需要用户自定义类型中重写toString（）方法

49.hashcodes独一无二的代表了一个对象，并且通过它可以找到这个对象的位置。

50.equals方法默认的实现是，比较调用他的对象和被比较的那个对象是不是指向同一对象，一样才返回真值。

51.可以使用  引用变量+instanceof+类名 来判断该引用型变量实际所“指向”的对象是否属于该类或该类的子类，使用强制类型转换把他转换为子类类型，就可以访问子类新增的成员

52.一个程序可扩展性好指的是加入其它功能的时候不用去修改主程序

53.动态绑定是指在执行期间（而非编译期）判断所引用对象的实际类型，根据其实际的类型调用其相应的方法

54.存在的三个必要条件：第一、要有继承；第二、要有重写；第三、父类引用指向子类对象

55.对变量赋值时：要么在定义的时候直接赋值，要么在方法中赋值（注：第一、java的类中只包含变量和方法；第二、java中除了定义和声明外的其他语句都需要放在方法内部，方法必须放到类中，而例子
 public class Test{ int i=2（此处不对i赋值同样出错）； i=1；}中 int i = 2；是一个定义和声明变量的语句，而那个i=1；是一个赋值语句，必须在方法中进行）。

56.private 代码是我写的，如果我不在private 变量所在的类中写使用它的方法，那么其他类肯定访问不到，提高了安全性

57.abstract 抽象：第一、当一个方法只定义不实现的时候，把它定义为抽象方法，而一个类中有抽象方法，该类必须被定义为抽象类。第二、子类中抽象方法就是用来被重写的且必须被重写，或者子类也定义成抽象类，然后再把这个方法复制一遍，由子类的子类再去继承；第三、抽象的类new不出来，抽象类必须被继承（不继承没意义）。

58.final关键字
	第一、final可以修饰成员变量和局部变量（形参），final修饰的变量的值不能够被改变；
	第二、final的方法不能够被重写；
	第三、final的类不能够被继承；

59.接口特性（interface）
	第一、接口中所有的方法不用显示的表明abstract，默认所有方法都是；
	第二、接口中声明的属性默认为public static final的，也只能是public static final的
	第三、接口可以多重实现；
	第四、接口可以继承其他的接口，并添加新的属性和抽象方法；abstract的。
	    注意：
		第一、使用implements关键字，在类中声明部分声明该类将实现哪些接口；
		第二、一个类可以实现多个接口；
		第三、一个非抽象类实现接口的时候，类中必须包含所有接口中定义的方法实现；
		第四、对接口中方法进行实现，必须显示的使用public访问控制符；
		第五、对接口中方法进行实现，类中对应的实现的方法的方法名、方法返回值和方法的参数列表形式必须与		      接口中的方法一直，否则视为一个新的方法的重载。


60.接口之间可以相互继承，一个类只可以实现接口，类和类之间可以相互继承

61.递归调用是指在方法执行过程中出现该方法本身的调用。（对于递归问题，肯定有一个递归的方法，对于这个问题，首先要想到他的方法）

62.java异常指的是运行期出现的错误（观察错误的名字和行号最重要，要敢于调试）。

63.error 系统出错，虚拟机出错了，处理不了的错误
	exception：能够处理了的错误（俩类）；
	第一、runtimeexception：经常出现的错误，可以catch也可以不catch；
	第二、必须被catch的异常，在jdk里方法后面写了throw的，都需要catch。

64.try语句中有多个异常，那么异常语句之后的语句就不会执行，而是直接catch，finally语句无论如何都执行，即使没有异常也执行。

65.5个关键字 try catch throw throws finally

66.捕获异常时，应该先小后大。如果并列无所谓。

67.重写方法需要抛出与原方法所抛出异常类型一致的异常，或者不抛异常

68.捕获到的异常一定要做出处理。

69.throw 后面跟一个对象抛出异常。

70.必须有try才能catch，try是尝试运行这些语句，catch是逮住这些异常该怎么办

71.java语言中声明数组的时候不能指明其长度。

72.定义一个数组  声明数组+创建数组对象（注：需要new关键字）

74.main方法中的string[] args 作用是打印出 java命令中的各个参数；

75.搜索往往建立在已经排好顺序的基础之上。

76.复制后的数组中数值发生改变，那么原来数组的值也会改变。

77.经常打印一些东西，对调试程序非常有帮助

78.变量的作用域规则告诉我们一个变量的有效范围，它在哪创建在哪销毁（也就是超出了作用域）（即生存周期结束）。变量的有效作用域从他的定义点开始，到和定义变量之前最临近的开括号配对的以一个闭括号。（注：解释了在for语句中，为什么可以重复定义变量而不发生冲突）

79.windows下反斜杠（“\”）就是路径分隔符,而在linux下是（“/”）,sparater常量，在windows中代表反斜杠，在linux中代表正斜杠，为了跨平台使用。（注意：实际中你只要写正斜杠，无论在windows还是linux中都可以使用）

80.java.io.file 代表系统中逻辑上的文件即能看到的那些东西，而不是物理上的文件（磁盘空间中的数据）。

81.String类型代表不可变的字符序列。

82.容器：1（图） 1类 3知识点 6接口

83.重写equals方法必须重写hashcode方法，当类里面这个对象当做索引的时候会用到hashcode（）方法。俩个对象互相equals（），俩个对象必须互相hashcode（）。

84.hashcode做键的时候，索引一样那么索引到的对象必须一样。

85.instanceof关键字，用来测试其左边的对象是否是右边类的一个实例

86.set list map 数组 jdk只提供了这几种容器

87.Iterator（） 就是一个统一的遍历collection里面所有元素的方法

88.对public的一个总结：一个java源文件中最多只能有一个public类，当有一个public类是，源文件必须与之一致，否则无法编译，如果源文件中没有public类则文件名与类中没有一致性要求。至于main（）不是必须放在public类中才能运行。

89.Iterator对象的remove（）方法是迭代过程中删除元素唯一的安全的方法。

90.array读的快改的慢  linked改的快读的慢   hash介于俩者之间

91.map类中存储的键-值对通过建来表示，所以键值不能重复，比较键值重复使用的是equals方法，但是该方法执行效率太低，多以要用hashcode方法，多以重写equals（）要重写hashcode（）。

92.输入流输出流，都是站在程序的角度来说的（输入流： 读数据。输出：写数据）。
       输入流：将外部数据源转化为流，通过对流的读取，完成外部数据的读入；
	输出流：向流中写入数据，完成奖数据写入到对应的外部数据源中。

93.java里面是unicode编码，一个字符是俩个字节。

94.读：数据从文件（硬盘）到程序；
   写：数据从程序到文件；
   入：不建立新文件，从已有文件中读取；
   出：建立新文件，如果有新文件则覆盖掉；

95。良好的编程习惯先写flush（），在写close（）（为了能在关闭之前保存数据）；

96.系统能帮你建好文件（例如：**.txt），但是不能帮你建目录（如：d：/bak/**.txt）。

97.java中使用键盘输入数据的方式：
	一、控制台输入：1、主方法的形参；2、字节输入流；3、字符输入流；4、文本扫描类；
	二、对话框输入数据

98.int float 占四个字节 long 8字节 double 八个字节 boolean 一个字节

99.先写的先读，（队列）

100.如果想对某一个对象序列化，必须实现serializable接口

101.transient修饰的成员变量在序列化的时候不予考虑。

102.线程是一个程序里面不同的执行路径。

103.进程是一个静态的概念，一般说的进程在进行其实说的是线程在进行

104.在哪个线程里调用sleep（），哪个线程就睡着了！！

105.线程启动必须调用thread类里面的start（）；（注：直接调用run（）那叫做方法调用）

106.能使用接口就不要使用继承。

107.yield（）会让出cpu，但是只会让一次

108.同一个线程对象可以用来启动俩个线程。

109.一个对象中锁只有一把！

110.当前被锁住的线程wait，停止住，等着，notify叫醒一个在当前对象wait的线程。

111.网络编程的时候，server和client应该一起写，启动的时候要先启动server

112.端口号，用来区分不同的应用程序，（俩个字节，最多有65536个端口号）

113.ip地址，用来区分不同的机器。

114.window可以独立显示，panel必须加在window中才能显示。frame是打开后其他还能执行，dialog类似于帮助窗口，打开后主程序就不能在动了。container是一种component，同时他也用来装component。

115.事件和监听某件事的接口一一对应，实现某件事，那么监听某件事的类就得实现某一个对应接口。

116.内部类可以非常方便的访问外部类的成员变量和成员方法，不需要或者不想被其他类访问时使用内部类。

117.每次需要重画的时候自动调用paint方法（paint方法是container类的一个方法

118.方法里面逻辑比较少，而且不经常变动，可以使用匿名类

119.排序算法时间复杂度，背也得背下来，链表了之类的

120.java编译出现的问题要自习看，javac编译默认是在当前目录下寻找。

121.java -verbose 能看到使用了哪些类

122.java try块中定义的变量在try块执行完后不再了，编译会报错，找不到变量（需要网上具体查一下try catch里面变量的生存周期）

123、awt（abstract window tookit） java做的界面抽象了windows和linux的界面，可能图形界面是vc，vb开发的

124、所有的可以显示出来的图形元素都叫做componet

125、panel必须放在windows中显示，不能独立的窗口显示出来

126、事件模型很重要

127、如果一个类中含有多个方法，一个方法中可以调用其他的方法，要执行一系列的方法，只要在这个方法中直接写其他的方法名，在其他地方new一个对象，调用这个方法即可
例如：
	package GUI;
	import java.awt.*;

	public class TestMultiFrame {
	    public static void main(String args[]) {
		MyFrame6 f1 = 
		    new MyFrame6(100,100,200,200,Color.BLUE);
		MyFrame6 f2 = 
		    new MyFrame6(300,100,200,200,Color.YELLOW);
		MyFrame6 f3 = 
		    new MyFrame6(100,300,200,200,Color.GREEN);
		MyFrame6 f4 = 
		    new MyFrame6(300,300,200,200,Color.MAGENTA);
	    }
	}




	class MyFrame6 extends Frame{
	    static int id = 0;
	    MyFrame6(int x,int y,int w,int h,Color color){ //可以在一个构造方法中直接调用这些其他的方法
		super("MyFrame " + (++id));
		setBackground(color);
		setLayout(null);
		setBounds(x,y,w,h);
		setVisible(true);
	    }
	}

128、碰到错误从第一个开始修改，因为可能后面错误是前面错误引起的

129、建议可以看一本书，tcp/ip详解

130、一个ipv4地址是四个字节，一共32位

131、socket client端的插座，serversocket是server端的插座  严格意义来讲，udp中没有所谓的client和server

132、ftp端口21 网络协议端口80 smtp端口25 邮件接收协议端口110（pop3）

133、tcp端口和udp端口是分开的，每个都是65536个端口

134、异步连接效率更高，同步连接，需要等待处理，比如输入流的等待，比如accept的等待

135、分层好处 接口统一，写程序方便，煤一层单独房展，扩展性好；

136、socket这一章中，注意long类型如何转成byte数组发出去，复习io一章节。

137、io补充：
	FileReader是InputStreamReader(转换流)的子类,子类高级在于:自动使用系统默认编码(无法手动自定),如果文件是utf-8格式的,就必须手动指定编码,此时就必须用转换流了!!

138、utf8比较省空间

139、处理流中，某个管道尽管是套接在其他管道外面，但是是直接操作文件中的数据

140、先写入的数据先读（第七讲 ByteArrayOutputStream）

141、如果实现一个对象的序列化，必须实现serializable，否则不能序列化，jdk帮你序列化，你自己不能控制如何序列化

142、transient（透明的）修饰的成员变量，在序列化的时候不与考虑，意思是不会被序列化

143、externalizable接口能让你自己定义如何实现序列化，这个接口是serializable的子接口

144、如果类中成员变量和方法中都定义个一个变量，会不会方法中的变量覆盖成员变量？

145、对于管道，如果一边使用循环不断的写出数据，另外一边也要不断的接受数据，看聊天第八节

146、每一个thread对象都是一个线程，只有通过thread的start方法启动的那才叫线程，不然就是方法调用。线程的创建分为俩步：第一步创建一个线程对象，然后new一个thread对象让他启动。

147、线程对象创建，实现接口 继承thread( 注：如果继承thread，在main中直接new这个对象，然后直接调用start方法，如果是实现了接口，还是的先new一个thread对象，然后才能启动线程)

148、能使用接口就不要从thread类继承，接口更加灵活

149、线程第二节  run（）方法中不能用throws抛出sleep（）中的异常，原因是，重写的方法不能抛出与被重写的方法不同的异常，run是重写了thread或者接口中的方法

150、同一个线程对象可以建立对个线程。

151、线程结束的问题到底是不是可以控制的，在第几个结束，cpu不是随机分配使用时间么，正好能在那个点上让主线程运行一下么？（实验发现，那个interrupt方法总是瞅到他要结束的那个方法sleep时候，偷偷上去一盆凉水就叫醒了，不能真正固定时间，是在拼人品）

152、synchronized可以直接使用synchronized（this）{}表示锁定当前对象，也可以在一个方法中，表示调用这个方法的时候锁定当前对象

153、为什么要使用synchronized，个人理解，其实很简单，加入我们平时使用俩个方法去操作同一个对象，比如一个类里面，只有一个成员变量，然后一个方法，在main中new出来这个对象，我们使用俩次调用这个方法的语句，那么实际执行中，先执行前面的，再执行后面的；但是线程不一样，线程执行每个语句都是由cpu分配的，可能前一秒还是你执行，后面执行权就给了别人，那么同一个成员变量的变化就不由人控制了；所以，为了产生期望的结果，我们用一把大锁，谁先拿到，谁就可以一直执行到结束。
	例子：public class TestThread implements Runnable{
		Test t = new Test();//t是成员变量
		public static void main(String[] args){
			TestThread tt = new TestThread();
			Thread t1 = new Thread(t);
			Thread t2 = new Thread(t);//俩个线程使用了同一个线程对象，访问的也是同一个对象
			t1.setName("t1");
			t2.setName("t2");
			t1.start();
			t2.start();
		}
		void run(){
			t.add();		
		}
	}

	class Test{
		int num = 0;//公用变量
		public void add(){
			num++;
			Thread.sleep();
			System.out.println("你是第几个线程：" + num);
		}
	}



	public class TestThread implements Runnable{
		Test t = new Test();//t是成员变量
		public static void main(String[] args){
			TestThread tt = new TestThread();
			Thread t1 = new Thread(t);
			Thread t2 = new Thread(t);//俩个线程使用了同一个线程对象，访问的也是同一个对象
			t1.setName("t1");
			t2.setName("t2");
			t1.start();
			t2.start();
		}
		void run(){
			t.add();		
		}
	}

	class Test{
		int num = 0;//公用变量
		public synchronized void add(){
			//synchronized(this){
				num++;
				Thread.sleep();
				System.out.println("你是第几个线程：" + num);
			//}
		}
	}

154、对于线程的一个小认识，线程是一个程序的不同的执行路径（个人理解：执行路径其实就是代码顺序），我们以前使用的main方法其实就是一个线程，而且以前所有的都是只有一条执行路径，都是按照文档顺序，从头到尾；现在使用了线程我们就可以建立和main线程同时存在的多个线程（出现了根据run（）方法里面代码顺序执行的一个新的路径），并且可以执行main执行过得同样的代码，他们相互独立，各自走自己的路径，但是对于同一个对象，如果有公共变量，可能互相照成影响。

155、在线程同步第四节里面有一个面试题，线程锁定只是把当前对象加锁的那部分代码块锁定了，该对象可能还有其他的方法使用了加锁快内部的变量，其他线程访问不加锁的方法时候，还是按照正常代码执行。

156、同一个对象中可以有多个synchronized的代码快，但是每个对象只有一把锁，一个线程使用了锁，那么另一个线程就得等着这把锁使用完。

157、背写死锁，生产者，消费者

158、wait（）和notify方法必须一起使用，wait让调用当前对象的线程停止，并且把锁交出来（sleep不交，这是一个巨大的区别），notify方法是叫醒当前对象的一个睡着的方法。

159、构造方法链：在任何情况下构造一个类的实例时，将会沿着继承连调用所有父类的构造方法，父类的构造方法在子类的构造方法之前调用

160、父类的构造方法不会传给子类，只能从之类的构造方法中用关键字super调用。如果一个类要扩展，最好提供一个无惨构造方法以避免编程错误。如果没有显示的调用，编译器讲把super（）当做构造方法的第一条语句

161、方法名和参数列表构成了方法签名   重载就是提供多余一个方法，这些方法具有相同的名字，但是签名不同；覆盖方法就是在子类中定义一个方法，该方法与父类中方法使用相同的签名，并且返回值类型也相同。

162、对象成员访问运算符（.）优先与类型转换运算符，使用括号保证在（.）运算之前转换。例如：（（circle）object）.getArea();

163、可见性递增  private none（if no modifier is used）, protected, public

164、使用引用变量调用实例方法时，变化所引用对象的实际类型在运行是决定使用该方法的哪个实现。访问数据域或静态方法是，引用变量所生命的类型在编译时决定使用哪个数据域或静态方法。这是调用实例方法与访问数据域或静态方法的主要不同。

165、可以覆盖一个实例方法，但是不能覆盖一个数据域（实例或静态的）或静态方法。如果子类中声明的数据域或静态方法与父类中的名字相同，父类中的将被隐藏，但是它依旧存在。这俩个数据域或静态方法是独立的。在子类中可以使用super关键字调用隐藏的数据域或静态方法，隐藏的域或方法也能通过父类类型的引用变量来访问。
	程序清单9-10
	public class HidingDemo{
		public static void main(String[] args){
			A x = new B();
			
			//Acess instance data field i		
			System.out.println("(1) x.i is" + x.i);
			System.out.println("(2) (b)x.i is" + ((B)x).i);
			
			//access static data field j
			System.out.println("(3) x.j is" + x.j);
			System.out.println("(4) ((B)x).j is" + ((B)x).j);
		
			//Invoke static method m1
			System.out.println("(5) x.m1() is" + x.m1());
			System.out.println("(6) ((B)x).m1() is" + ((B)X).m1());

			//invoke instance method m2
			System.out.println("(7) x.m2() is" + x.m2());
			System.out.println("(8) x.m3() is" + x.m3());
		
		}
	}
	
	class A{
		public int i = 1;
		public static int j = 11;
	
		public statci String m1(){
			return "A's static m1";
		}

		public String m2(){
			return "A's instance m2";		
		}

		public String m3(){
			return "A's instance m3";
		}
	}

	class B extends A{
		public int i = 2;
		public static int j = 12;

		public static String m1(){
			return"B's static m1";		
		}

		public String m2(){
			return "B's instance m2";		
		}
	}
	程序输出结果：
	（1） x.i is 1 //因为x的声明类型是A，所以x。i是1
	  (2) (b)x.i is 2 //使用b类中的i需要强制转换成B
	 (3) x.i is 11 //X的声明类型是A
	(4) ((b)x.j is 12 //使用B类中的j
	(5) x.m1 is A's static m1 //x声明为类A
	(6) ((B)x).m1 is B's static m1//（B）x的类型位B
	(7) x.m2() is B's instance m2 //x实际引用了B类的对象 调用b的m2方法
	 (8) x.m3() is A's instance m3 //继承了A中的m3方法。 x。m3（）运行时调用B中的m3方法。

166、可以用final修饰符来指明一个类是终极的，不能成为父类。

167、如果局部变量和一个类属变量具有相同的名字，那么局部变量优先，同门类属变量将被隐藏。

168、包含抽象房哪个发的类必须声明为抽象类。抽象方法只有方法签名而没有实现。抽象方法是非静态的，子类继承一个抽象类，必须实现里面是所有的抽象方法。
	抽象类不能new出来，但是可以有构造方法，为了给子类调用。 允许定义没有抽象方法的抽象类，这种类仍然不能new，只是为了给子类实现。
	抽象类不能new但是可以作为数据类型，例如有一个B抽象类，不能new B但是可以写B[] object = new B[11]

169动态绑定（详细参见深入理解多态）：当超类对象引用变量引用子类对象时，被引用对象的类型，而不是引用变量的类型决定了调用谁的成员方法，但是这个被调用的方法必须是在超类中定义过的。 或者是这个方法是子类重写了超类中的方法（有时候虽然子类没有重写父类的方法，但是确继承了最近父类的方法，调用的时候实际上还是由这个实际调用对象决定了调用哪个方法，它没有重写，就会调用紧跟着的上一个父类实现的那个方法（假设构成了一个继承链））
	动态绑定其实是java本身就有的一个机制，只要继承了，父类引用指向子类对象了，父类引用调用一个方法便会根据实际类型，由实际类型决定使用哪个实现，实际类型中有重写覆盖的调用重写的方法实现，没有重写则从最近父类开始找，直到找到第一个显示实现（重写）了父类所调用的这个方法，一直找到父类，没有则直接使用父类的实现。
	但是如果要实现跟父类不同的实现效果，那么就一定需要重写父类的方法，这样从运行结果看到了不同的效果，这可能才是真真一个方法，多种结果，即是我们说的多态。某种意义来讲，多态是在动态绑定基础上诞生的，多态不等于动态绑定。   
	个人理解：只要父类引用指向子类对象，那么就有了动态绑定，但如果需要同一个方法产生不同的行为，并且表现出来，才需要重写
（如果强制把超类转换成子类的话，就可以调用子类中新添加而超类中没有的方法了）

170、 抽象类和常规类一样具有数据和方法,但是不能用new操作做符创建它的实例.抽象方法只有方法签名而没有实现,他的实现由子类提供.包含抽象方法的类必须声明为抽象类

171、 依赖与类的具体实例的变量或者方法应为实例变量或方法.一个变量如果被类中的所有实例共享,它应该声明为静态的。静态变量或方法可以从实例方法中调用，但是实例变量或方法不能从静态方法中调用。

172、GUI类分三种，容器类，辅助类，组件类。使用jFrame创建一个框架，用来存放组件，每个JFrame中都包含一个内容窗格，每个窗格都是java.awt.container的一个实例。按钮之类的GUI组件都放在框架的内容窗格中。

173、在JFrame中的visible属性默认位false，所以要显示的话，必须使用setVisible（true），然而其他的JComponent的实例，例如jbutton和JLabel等，默认的visible属性都是true，使用setvisible（false）方法可以是他们不可见

174、可以使用ImageIcon icon = newImageIcon（“image/ttgif”）；创建一个图标对象，可以使用new button（icon），讲图标应用到button上面去。

175、GUI组件不能被多个容器共享，，一个GUI组件只能一次在一个容器中出现。但是边界和固表是可以共享的。
	例如 p1.setBorder(p);  p2.setBorder(p);       btn.setIcon(icon); btn.setIcon(icon);

176、默认情况下，框架的布局是BorderLayout而penel的布局是FlowLayou

177、显示组件的时候，jvm会自动在本地为组件创建一个graphics对象，使用getGraphics（）方法可以得到该对象。可以使用该组件的graphics的方法在该组件上绘画
	想要得到graphics对象，必须确保该组件显示，只有在frame调用了setvisible（）方法后，所有的组件才会显示

178、创建一个file类实例并没有在机器上建立一个文件，不关文件存在与否，都可以创建任何文件名的file实例。使用exists（）方法检查文件是否存在
	使用java.io.PrintWriter pw = new java.io.PrintWriter(file)之后创建一个文件，如果文件已经存在，文件中当前内容被删除。
	new PrintWriter(String filename);  new PrintWriter(File file);

179、排序思想，
	选择排序：用每一个数和后面的所有数字比较，用一个专门的指针指向数组中的最大值，如果这个当前数与专门指针k指向的值不一致，说明不是最小值，就把这个最小值跟当前数交换。
	冒泡排序：每一个数跟后面所有数字比较，只要找到一个比当前数小的就交换位置，冒泡是在一直交换。选择排序是只跟最大数或者最小数字交换，具体看从大到小排序，还是从小到大排序。

180、在集合中，重复的意思是，俩个对象互相equals就算是重复。
	list和set是一个一个存，而map是一对一对存储，map的好处是，相当于你给一堆瓶子上贴标签，你不需要打开瓶子就知道它放的是什么。

181、抽象方法只能被public或者protected修饰

182、基本数据类型转换成String的方法，使用基本类型的包装类，调用toString(),或者使用toString("基本数据类型")；或者使用String类的valueOf（“基本数据类型”）；
	String类型转换成基本数据类型。使用基本数据类型的parseInt之类的方法。或者通过先转换成基本数据类型包装类，基本数据类型的valueOf(String str),然后调用intValue（）；方法转换成基本数据类型。
	String类中有其他类型转换成String类型的方法，但是没有String类型转换其他类型的方法。转换其他类型的方法都在各个包装类中，同时包装类中有转换String的方法。

182、private到底能不能被继承：
	说白了，现在讨论的只是对“继承”这个词的意思了。。。。
	
		private属性会在子类创建对象的时候被分配内存
		private属性不能被子类对象访问

	这两句话既可以理解为被继承了，也可以理解为没被继承，就这么回事儿吧。。

183、即便是私有属性也会被继承，但是你不能动，不能碰。就像放在个黑匣子里，你知道有，但是你不能打开

184、调用方法的俩种方式：
	正常的，new 然后调用
	使用反射：加载类，实例化，方法调用
	//new E().d();
		
		//上面一个new E().d()相当于下面除了循环的那一部分，赶紧应该就是jdk默认new出来调用方法时候的内部加载机制。
		Class c = Class.forName("testExtends.E");
		E e = (E)c.newInstance();
		Method[] methods = c.getMethods();
		for(Method method:methods){
			//System.out.println(method.getName());
			if(method.getName().equals("d")){
				method.invoke(e, null);
			}
		}

185、java中的泛型（参数化类型）类似与方法中的形参。方法中的形参表示在方法中出现这个形参的地方，都跟调用这个方法传入的类型一致，而在类上定义的泛型，表示在这个类中所有出现这个泛型类型的地方，都与外部传入的类型一致。泛型会随着外部传入的类型不同而不同，但是形参类型是不会改变的。如果使用了泛型的类，new的时候没指定泛型，里面用到泛型类型的部分会被当做object类型.泛型接受的是类型，形参接受的是对象。

186、泛型的疑惑
	public <T> T loadById(Class cla, int id) {
		SqlSession sqlSession = null;
		T t = null;
		try{
			sqlSession = DB.getSession();
			//u = sqlSession.selectOne("com.sram.model.User.load", id);
			t = sqlSession.selectOne(cla.getName() + ".load", id);
		}finally{
			DB.close(sqlSession);
		}
		return t;
	}

	使用其他类调用方法loadById(User.class, 5);返回值为什么不需要强转就知道是User类型。是class默认变成class<T>，还是t得到一个对象时候还会得到它的类型。诡异

187、单例（shopping项目中，productManager.java）
	定义一个内部自己的对象，把自己的构造方法写成private的，不让别人new，弄一个静态初始化static{}，弄一个getInstance方法得到实例 

188、
	一、为什么equals()方法要重写？

判断两个对象在逻辑上是否相等，如根据类的成员变量来判断两个类的实例是否相等，而继承Object中的equals方法只能判断两个引用变量是否是同一个对象。这样我们往往需要重写equals()方法。

我们向一个没有重复对象的集合中添加元素时，集合中存放的往往是对象，我们需要先判断集合中是否存在已知对象，这样就必须重写equals方法。

 

 

二、怎样重写equals()方法？

    重写equals方法的要求：
    1.自反性：对于任何非空引用x，x.equals(x)应该返回true。
    2.对称性：对于任何引用x和y，如果x.equals(y)返回true，那么y.equals(x)也应该返回true。
    3.传递性：对于任何引用x、y和z，如果x.equals(y)返回true，y.equals(z)返回true，那么x.equals(z)也应该返回true。
    4.一致性：如果x和y引用的对象没有发生变化，那么反复调用x.equals(y)应该返回同样的结果。
    5.非空性：对于任意非空引用x，x.equals(null)应该返回false。

格式：

Java代码  收藏代码

    public boolean equals(Object obj) {  
        if(this == obj)  
            return false;  
        if(obj == null)  
            return false;  
        if(getClass() != obj.getClass() )  
            return false;  
        MyClass other = (MyClass)obj;  
        if(str1 == null) {  
             if(obj.str1 != null) {  
                  return false;  
             }  
        }else if (!str1.equals(other.str1) )  
                 return false;  
         }  
        if(var1 != other.var1)  
            return false;  
        return true;  
    }  

 如果子类中增加了新特性，同时保留equals方法，这时比较复杂。


设计模式
189、任何对象封装了对象产生的相关的逻辑，都可以叫做工厂方法
190、抽象工厂和普通工厂：普通工厂是用来扩展产品的，抽象工厂是扩展产品系列的j。普通工厂产生产品系列会出现工厂泛滥，抽象工厂产生产品时候也不方便。

191、java模拟hibernate思路总结:
	可以分为俩大类:从界面到数据库的持久化，从数据库读取
	持久花的有save delete update，这些方法在反射中设计时，传入的参数应该时对象，因为需要对象中的数据。
	读取的有load list find等，这些只需要约定好名字即可，如果T在类上，可以不传参数，如果只是写在方法上，需要传递当前类。

192、使用反射createNewInstance("")和使用new 对象的方式都是new一个对象而已，有什么好处？
	今天终于发现，反射你传的参数是一个字符串，可以通过配置文件，参数，随便怎么传过来，实现动态new对象，但是如果普通new的方式，只能改变源代码

	*************************提高扩展性*************************************
193、程序员修炼之道第五章 墨忒尔法则：依赖减少，依赖我感觉就是一个类中出现其他类的数量，不要自己去主动请求，要别人灌输给你最好.
	函数中需要的东西，不要透过多层对象去拿，要什么就从最底层对象去拿，会更好.

194、系统高度可配置,不只是界面提示文本之类的可配置，数据库，中间件，界面分割都可配置
	我考虑的java的可配置地方：代码中会写死的字符串，比如异常提醒，之类的，但是类似动态sql的个人感觉不能配置，也不需要。实际应该问自己这个地方会不会去改变.
	类似帖子的分类，板块之流，这些东西不适合在配置文件中，应该配到数据库中，这些东西关联其他东西的外键，如果时配置文件改变可能会造成不匹配,还需要专门同步

195、时间耦合：钟表的滴答，滴总是在答之前,这就是时间耦合，考虑并发，滴答同时进行.线性编程，和并发编程，多多理解java的消费者模式

196、多多去考虑并发，当你为上午工作做准备，多少任务时可以并发进行的，通过并发，更好的提高效率。

197、O()表示时间复杂度，比如O(n2)表示时间随着n的平方变化，在坐标中就是可以把横坐标看作时数据量，纵坐标看作时时间，横坐标变化，纵坐标就是按照它的平方变化
	算法和时间复杂度对应关系:
		O(n):简单循环、穷举查找、找数祖中最大值、生成校验和
		O(n2):嵌套循环
		O(lg(n)):二分法、二叉树
		O(nln(n)):分而治之、快速排序

198、当遇到使用枚举类型表示某种类型的各种变体时：例如使用1，2，3分别表示圆形、正方形、三角形之类的，通过switch执行具体的代码，这样的可以把这些图形都写成形状的子类更好。(程序员修炼之道39题)

*****************************设计模式*************************************
199、拒绝不成熟的抽象和抽象本身一样重要，不要乱用抽象。

200、各个设计模式其实是相互包含渗透的，没有某一种写法就是固定的某种设计模式，比如工厂方法也设计了开放封闭原则等。

******************************java解惑************************************
12、想要将一个char[]转换成字符串，需要调用String.valueOf(char[]);

13、String a = "11" + "22"; String x = "22"; String b = "11" + x;  a == b?  答案是false，这里比较的是内存地址，如果都是string确实相等，但是这里是个变量，所以内存地址不同。
	教训:字符串比较用equals不用==;
	     +号不论是做连接还是做加法都比==优先级高
	    
14、Java在编译程序之前会先将unicode编码转换成所表示的字符，例如System.out.println("a\u0022.length() + \u0022b".length()); //2
	等价于System.out.println("a".length() + "b".length());
	unicode编码在编译之前就会转化，而ascii和转义字符都是编译时候进行
	
15、在javadoc注释中应该使用html实体转义字符代替unicode字符。

16、想要打印俩行空格，可以写俩次println(),可以使用printf(%n%n),println('\n')或者println('\r\n')最后才考虑使用println('\u000A');

17、只有在需要插入其他任何方式无法表达的字符时才考虑使用unicode，否则应该避免使用它们。

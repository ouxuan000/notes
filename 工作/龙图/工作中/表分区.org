#+BEGIN_SRC sql
  create or replace package pkg_brushpartition is
    procedure addsubpartition(tablename        varchar2,
                              partitionname    varchar2,
                              subpartitionname varchar2);
    procedure addsubpartition(tablename        varchar2,
                              partitionname    varchar2,
                              subpartitionname varchar2,
                              tablespace       varchar2);
    procedure updatepartition(tablename varchar2, partitionname varchar2);
    procedure updatepartition(tablename     varchar2,
                              partitionname varchar2,
                              year          in varchar2);
    procedure addpartition(tablename varchar2, partitionname varchar2);
    procedure addpartition(tablename     varchar2,
                          partitionname varchar2,
                          year          varchar2);
    procedure addpartition(tablename     varchar2,
                          partitionname varchar2,
                          year          varchar2,
                          tablespace    varchar2);
    procedure brushpartition(tablename  varchar,
                            admdiv     varchar2,
                            year       varchar2,
                            tablespace varchar2);
    procedure brushpartition(admdiv     varchar2,
                            year       varchar2,
                            tablespace varchar2);
    procedure brushpartition(tablename     varchar,
                            year          varchar2,
                            tablespace    varchar2,
                            onlypartition integer);
    procedure getalltable(alltable out varchar2);
    procedure nopartition(returnsql out varchar2,
                          tablename in varchar2,
                          admdiv    in varchar2);
    procedure havepartition(returnsql out varchar2,
                            tablename in varchar2,
                            admdiv    in varchar2);
  end pkg_brushpartition;

  create or replace package body pkg_brushpartition is
    procedure addsubpartition(tablename        varchar2,
                              partitionname    varchar2,
                              subpartitionname varchar2) is
      v_sql varchar(1000);
    begin
      v_sql := 'alter table ' || tablename || ' modify partition ' ||
              partitionname || ' add subpartition ' || partitionname || '_' ||
              subpartitionname || ' values (''' ||
              substr(subpartitionname, 2) || ''')';
      --   dbms_output.put_line('addsubpartition:' || v_sql);
      execute immediate v_sql;

    end;

    procedure addsubpartition(tablename        varchar2,
                              partitionname    varchar2,
                              subpartitionname varchar2,
                              tablespace       varchar2) is
      v_sql varchar(1000);
    begin
      v_sql := 'alter table ' || tablename || ' modify partition ' ||
              partitionname || ' add subpartition ' || partitionname || '_' ||
              subpartitionname || ' values (''' ||
              substr(subpartitionname, 2) || ''') tablespace ' || tablespace || '';
      --   dbms_output.put_line('addsubpartition:' || v_sql);
      execute immediate v_sql;

    end;

    procedure updatepartition(tablename varchar2, partitionname varchar2) is
      v_sql varchar(1000);
      TYPE ref_cursor_type IS REF CURSOR;
      yea   varchar2(15);
      years ref_cursor_type;
    begin

      v_sql := 'SELECT year
    FROM (SELECT YEAR FROM FW_T_YEAR) t1
    LEFT JOIN (select table_name,substr(c.subpartition_name,instr(c.subpartition_name,''_'') + 2) as SUBPARTITION_NAME from USER_TAB_SUBPARTITIONS c where c.TABLE_NAME = ''' ||
              tablename || ''' and c.partition_name = ''' || partitionname ||
              ''') t2
      ON t1.YEAR = t2.SUBPARTITION_NAME
  where TABLE_NAME is null';
    -- dbms_output.put_line('updatepartition2:' || v_sql);

      open years for v_sql;
      loop
        fetch years
          into yea;
        exit when years%notfound;

        addsubpartition(tablename, partitionname, 'Y' || yea);
      end loop;
    end;

    procedure updatepartition(tablename     varchar2,
                              partitionname varchar2,
                              year          in varchar2) is
      v_sql varchar(1000);
      TYPE ref_cursor_type IS REF CURSOR;
      yea   varchar2(15);
      years ref_cursor_type;
    begin

      v_sql := 'SELECT year
    FROM (SELECT YEAR FROM FW_T_YEAR t where t.year=''' || year ||
              ''') t1
    LEFT JOIN (select table_name,substr(c.subpartition_name,instr(c.subpartition_name,''_'') + 2) as SUBPARTITION_NAME from USER_TAB_SUBPARTITIONS c where c.TABLE_NAME = ''' ||
              tablename || ''' and c.partition_name = ''' || partitionname ||
              ''') t2
      ON t1.YEAR = t2.SUBPARTITION_NAME
  where TABLE_NAME is null';
    -- dbms_output.put_line('updatepartition3:' || v_sql);

      open years for v_sql;
      loop
        fetch years
          into yea;
        exit when years%notfound;

        addsubpartition(tablename, partitionname, 'Y' || yea);
      end loop;
    end;

    procedure updatepartition(tablename     varchar2,
                              partitionname varchar2,
                              year          in varchar2,
                              tablespace    in varchar2) is
      v_sql varchar(1000);
      TYPE ref_cursor_type IS REF CURSOR;
      yea   varchar2(15);
      years ref_cursor_type;
    begin

      v_sql := 'SELECT year
    FROM (SELECT YEAR FROM FW_T_YEAR t where t.year=''' || year ||
              ''') t1
    LEFT JOIN (select table_name,substr(c.subpartition_name,instr(c.subpartition_name,''_'') + 2) as SUBPARTITION_NAME from USER_TAB_SUBPARTITIONS c where c.TABLE_NAME = ''' ||
              tablename || ''' and c.partition_name = ''' || partitionname ||
              ''') t2
      ON t1.YEAR = t2.SUBPARTITION_NAME
  where TABLE_NAME is null';
    -- dbms_output.put_line('updatepartition4:' || v_sql);

      open years for v_sql;
      loop
        fetch years
          into yea;
        exit when years%notfound;

        addsubpartition(tablename, partitionname, 'Y' || yea, tablespace);
      end loop;
    end;

    procedure addpartition(tablename varchar2, partitionname varchar2) is
      v_sql varchar(1000);
    begin

      v_sql := 'ALTER TABLE ' || tablename || ' ADD PARTITION ' ||
              partitionname || ' VALUES (''' || substr(partitionname, 2) ||
              ''')(';

      for temp in (select t.year from FW_T_YEAR t) loop

        v_sql := v_sql || 'subpartition ' || partitionname || '_' || 'Y' ||
                temp.year || ' values (''' || temp.year || '''),';
      end loop;
      v_sql := substr(v_sql, 0, length(v_sql) - 1) || ')';
      --dbms_output.put_line('addpartition2:' || v_sql);
      execute immediate v_sql;
    end;

    procedure addpartition(tablename     varchar2,
                          partitionname varchar2,
                          year          varchar2) is
      v_sql varchar(1000);
      i     integer;
    begin

      v_sql := 'ALTER TABLE ' || tablename || ' ADD PARTITION ' ||
              partitionname || ' VALUES (''' || substr(partitionname, 2) ||
              ''')(';
      select count(1)
        into i
        from FW_T_YEAR t
      where t.year = '' || year || '';

      if i > 0 then

        v_sql := v_sql || 'subpartition ' || partitionname || '_' || 'Y' || year ||
                ' values (''' || year || '''))';
      end if;
      --dbms_output.put_line('addpartition3:' || v_sql);
      execute immediate v_sql;
    end;

    procedure addpartition(tablename     varchar2,
                          partitionname varchar2,
                          year          varchar2,
                          tablespace    varchar2) is
      v_sql varchar(1000);
      i     integer;
    begin

      v_sql := 'ALTER TABLE ' || tablename || ' ADD PARTITION ' ||
              partitionname || ' VALUES (''' || substr(partitionname, 2) ||
              ''') tablespace ' || tablespace || ' (';

      select count(1)
        into i
        from FW_T_YEAR t
      where t.year = '' || year || '';
      if i > 0 then
        v_sql := v_sql || 'subpartition ' || partitionname || '_' || 'Y' || year ||
                ' values (''' || year || ''') tablespace ' || tablespace || ')';
      end if;
      --dbms_output.put_line('addpartition4:' || v_sql);
      execute immediate v_sql;
    end;

    procedure brushpartition(tablename  varchar,
                            admdiv     varchar2,
                            year       varchar2,
                            tablespace varchar2) is
      v_sql_partition varchar(1000);
      TYPE ref_cursor_type IS REF CURSOR;
      partition_name  varchar2(15);
      partition_names ref_cursor_type;

    begin

      nopartition(v_sql_partition, tablename, admdiv);
      if length(v_sql_partition) = 0 then
        return;
      end if;
      /*没有主分区的添加主子分区*/
      open partition_names for v_sql_partition;
      loop
        fetch partition_names
          into partition_name;
        exit when partition_names%notfound;
        if year is null then
          addpartition(tablename, partition_name);
        elsif tablespace is null then
          addpartition(tablename, partition_name, year);
        else
          addpartition(tablename, partition_name, year, tablespace);
        end if;
      end loop;

      havepartition(v_sql_partition, tablename, admdiv);
      if length(v_sql_partition) = 0 then
        return;
      end if;
      /*有主分区的更新自分区*/
      open partition_names for v_sql_partition;
      loop
        fetch partition_names
          into partition_name;
        exit when partition_names%notfound;
        if year is null then
          updatepartition(tablename, partition_name);
        elsif tablespace is null then
          updatepartition(tablename, partition_name, year);
        else
          updatepartition(tablename, partition_name, year, tablespace);
        end if;
      end loop;

    end;

    /*特殊处理thips的只有年度主分区*/
    procedure brushpartition(tablename     varchar,
                            year          varchar2,
                            tablespace    varchar2,
                            onlypartition integer) is
      v_sql_partition varchar(1000);
      TYPE ref_cursor_type IS REF CURSOR;
      partition_name  varchar2(15);
      partition_names ref_cursor_type;
      v_sql           varchar2(500);

    begin

      v_sql_partition := 'SELECT YEAR
    FROM (SELECT ''P_Y''||YEAR AS YEAR FROM FW_T_YEAR where YEAR = ''' || year ||
                        ''') A
    LEFT JOIN (select table_name,PARTITION_NAME from USER_TAB_PARTITIONS c where c.TABLE_NAME = ''' ||
                        tablename || ''') B
      ON A.YEAR = B.PARTITION_NAME
  where b.TABLE_NAME is null';

      open partition_names for v_sql_partition;
      loop
        fetch partition_names
          into partition_name;
        exit when partition_names%notfound;
        if year is null then
          v_sql := '';
          --execute immediate v_sql;
        elsif tablespace is null then
          v_sql := 'ALTER TABLE ' || tablename || ' ADD PARTITION ' ||
                  partition_name || ' VALUES (''' ||
                  substr(partition_name, 4) || ''')';
          execute immediate v_sql;
        else
          v_sql := 'ALTER TABLE ' || tablename || ' ADD PARTITION ' ||
                  partition_name || ' VALUES (''' ||
                  substr(partition_name, 4) || ''') tablespace '||tablespace||'';
          execute immediate v_sql;
        end if;
      end loop;

    end;

    procedure brushpartition(admdiv     varchar2,
                            year       varchar2,
                            tablespace varchar2) is
      alltable varchar(500);
      TYPE ref_cursor_type IS REF CURSOR;
      tablename  varchar2(50);
      tablenames ref_cursor_type;
    begin
      if admdiv is null then
        return;
      end if;
      if year is null then
        return;
      end if;
      getalltable(alltable);

      open tablenames for alltable;
      loop
        fetch tablenames
          into tablename;
        exit when tablenames%notfound;
        if instr(tablename, 'P#THIPS_') > 0 then
          brushpartition(tablename, year, tablespace, 1);
        else
          brushpartition(tablename, admdiv, year, tablespace);
        end if;
      end loop;

    end;

    /* 拿到所有P#开头的物理表*/
    procedure getalltable(alltable out varchar2) is
      v_sql varchar(500);
    begin
      v_sql    := 'SELECT distinct t.table_name FROM USER_TAB_PARTITIONS t WHERE t.TABLE_NAME in (select t.TABLE_NAME from user_tables t where t.TABLE_NAME like upper(''p#%'')) and t.table_name not in (select t.TABLE_NAME from user_tables t where regexp_like(t.TABLE_NAME, ''_$'')) and t.table_name <> ''P#FASP_T_ACCTSYSDETAIL''';
      --v_sql    := 'select ''P#THIPS_T_TEST'' as table_name from dual';
      alltable := v_sql;
    end;

    /*没有主分区的表*/
    procedure nopartition(returnsql out varchar2,
                          tablename in varchar2,
                          admdiv    in varchar2) is
      v_sql varchar(1000);
    begin
      if admdiv is null then
        return;
      end if;
      v_sql     := 'SELECT code
    FROM (SELECT ''P''||CODE AS CODE FROM FW_T_ADMINDIV where code = ''' ||
                  admdiv ||
                  ''') A
    LEFT JOIN (select table_name,PARTITION_NAME from USER_TAB_PARTITIONS c where c.TABLE_NAME = ''' ||
                  tablename || ''') B
      ON A.CODE = B.PARTITION_NAME
  where b.TABLE_NAME is null';
      returnsql := v_sql;
    end;

    /*有主分区的表*/
    procedure havepartition(returnsql out varchar2,
                            tablename in varchar2,
                            admdiv    in varchar2) is
      v_sql varchar(1000);
    begin
      if admdiv is null then
        return;
      end if;
      v_sql     := 'SELECT code
    FROM (SELECT ''P''||CODE AS CODE FROM FW_T_ADMINDIV where code = ''' ||
                  admdiv ||
                  ''') A
    LEFT JOIN (select table_name,PARTITION_NAME from USER_TAB_PARTITIONS c where c.TABLE_NAME = ''' ||
                  tablename || ''') B
      ON A.CODE = B.PARTITION_NAME
  where b.TABLE_NAME is not null';
      returnsql := v_sql;
    end;
  end pkg_brushpartition;
#+END_SRC

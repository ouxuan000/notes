*  验证是否满足条件
#+BEGIN_SRC java
/**
 * 验证是否满足条件, 将数据组织成类似表结果集数据，校验
 * @param data 业务数据
 * @param condition　条件
 * @return　是否满足条件
 */
private boolean isValidCondition(Map data,String condition){
    String sql  = null;
    StringBuilder tablenamebuf = new StringBuilder(1000);
    for (Iterator it = data.keySet().iterator(); it.hasNext();) {
        String column = (String) it.next();
        String value = String.valueOf(data.get(column));
        if(tablenamebuf.length()>0){
            tablenamebuf.append(",");
        }
        tablenamebuf.append("'"+value+"' as ").append(column);
    }
    sql = "SELECT count(1) as count from (select "+tablenamebuf.toString()+" from dual) t where "+condition;
    int count = this.queryForInt(sql);
    return count>0;
}

#+END_SRC
* 并发锁, 与使用static作为全局静态变量效果， 这个使用volatile感觉起来更专业
#+BEGIN_SRC java
/**
 * @author Administrator
 *对需要控制线程并发并非阻塞式的控制锁
 */
public final class LockStore{
   // volatile保证所有线程看到的锁相同  
    private static volatile Map<String, Date> locks = new HashMap<String, Date>();  
  
    private LockStore() {
  
    }
    /** 
     * 根据锁名获取锁 
     *  
     * @param lockName 
     *            锁名 
     * @return 是否锁定成功 
     */  
    public synchronized static Boolean getLock(String lockName) {  
        Boolean locked = false;  
  
        if (lockName == null || lockName.equals("")) {  
            throw new RuntimeException("Lock name can't be empty");  
        }  
  
        Date lockDate = locks.get(lockName);  
        if (lockDate == null) {  
            locks.put(lockName, new Date());  
            locked = true;  
        }  
        return locked;  
    }  
  
    /** 
     * 根据锁名释放锁 
     *  
     * @param lockName 
     *            锁名 
     */  
    public synchronized static void releaseLock(String lockName) {  
       if (lockName == null || lockName.equals("")) {  
            throw new RuntimeException("Lock name can't be empty");  
        }  
        Date lockDate = locks.get(lockName);  
        if (lockDate != null) {  
            locks.remove(lockName);  
        }  
    }  
  
    /** 
     * 获取上次成功锁定的时间 
     *  
     * @param lockName 
     *            锁名 
     * @return 如果还没有锁定返回NULL 
     */  
    public synchronized static Date getLockDate(String lockName) {  
       if (lockName == null || lockName.equals("")) {  
            throw new RuntimeException("Lock name can't be empty");  
        }  
        Date lockDate = locks.get(lockName);  
        return lockDate;  
    }  
    
    
}
#+END_SRC
* aop指定切面方法， 公司业务框架实现方式
#+BEGIN_SRC java
<bean id="buscommon.dr.DataRightRuleServiceNoLog" class="gov.mof.fasp2.buscommon.dataright.rule.DataRightRuleService"></bean>

<bean id="buscommon.rulelog.datarightloginterceptor" class="gov.mof.fasp2.buscommon.rulelog.interceptor.LogInterceptor">
    <property name="ruleLog" ref="buscommon.rulelog.datarightrulelogimpl"></property>
</bean>
<bean id="buscommon.dr.DataRightRuleService" class="org.springframework.aop.framework.ProxyFactoryBean">  
    <property name="target">  
        <!--要被aop的class-->
        <ref local="buscommon.dr.DataRightRuleServiceNoLog" />  
    </property>  
    <property name="interceptorNames">  
        <list>  
            <!--使用的切面工具， 因为它的内部处理， 可以不用切所有的方法-->
            <value>buscommon.rulelog.datarightloginterceptor</value>  
        </list>  
    </property>
    <!--使用proxyTargetClass的方式会用cglib形式处理-->
    <property name="proxyTargetClass">
    <value>true</value>
    </property>
</bean>
同时可参考： http://uule.iteye.com/blog/869309

import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;

public class LogInterceptor implements MethodInterceptor {

    private RuleLogCommonService logCommonService;

    private IRuleLog ruleLog;

    /*
    * (non-Javadoc)
    * 
    * @see
    * org.aopalliance.intercept.MethodInterceptor#invoke(org.aopalliance.intercept
    * .MethodInvocation)
    */
    @Override
    public Object invoke(MethodInvocation arg0) throws Throwable {
        Object result = null;
        String methodname = "runFunction".equalsIgnoreCase(arg0.getMethod()
                .getName()) ? arg0.getArguments()[0].toString() : arg0
                .getMethod().getName();
        Object[] args = "runFunction".equalsIgnoreCase(arg0.getMethod()
                .getName()) ?(Object[])arg0.getArguments()[1]:arg0.getArguments();
        // 判断此次调用会不会引起规则的变化，根据方法名之类（此方法必须由每种业务自己定义获取方法）
        System.out.println("调用方法" + methodname);
        //
        boolean needDeal = getRuleLog().needDeal(methodname,args);

        if (needDeal) {
            long time1 = Calendar.getInstance().getTimeInMillis();
            // 本次操作的guid
            String guid = new RandomGUID().createGUID();
            Date starttime = Calendar.getInstance().getTime();
            // 根据sql将数据库中的数据转存一张表tmp中
            try {
                // 执行业务
                result = arg0.proceed();
                time3 = Calendar.getInstance().getTimeInMillis();
                System.out.println("业务操作用时：" + (time3 - time2) + "毫秒");
            } catch (Throwable t) {
                // 删除临时表
                deleteTmpTable(sqlsToTable);
                throw t;
            }
            return result;
        } else {// 直接执行业务方法
            return arg0.proceed();
        }
    }

}

/**
*
*代码实现 类似上面xml注册拦截器方式,  这个类就是个代理类
*/
public class BusGTXTransactionBeanDefinitionParser extends BaseBeanDefinitionParser {

    /**
     * 全局事务的拦截器
     */
    private static final String INTERCEPTERNAME = "gtx.intercepter";

    /**
     * 初始化bean.
     * <p>
     * Title: doParse
     * </p>
     * <p>
     * Description:
     * </p>
     * @param element
     * @param parserContext
     * @param builder
     * @see org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser#doParse(org.w3c.dom.Element,
     *      org.springframework.beans.factory.xml.ParserContext,
     *      org.springframework.beans.factory.support.BeanDefinitionBuilder)
     */
    protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {
        String id = element.getAttribute("id");
        String refbeanid = element.getAttribute("refbeanid");
        // 设置需要代理的bean id
        builder.addPropertyReference("target", refbeanid);
        // 设置intercepter
        List<String> intercepters = new ArrayList<String>();
        intercepters.add(INTERCEPTERNAME);
        builder.addPropertyValue("interceptorNames", intercepters);
        //增加对非接口的支持
        builder.addPropertyValue("proxyTargetClass", "true");
        // parserContext.getRegistry().registerBeanDefinition(beanid, builder);

    }

    protected Class getBeanClass(Element element) {
        return org.springframework.aop.framework.ProxyFactoryBean.class;
    }

}

#+END_SRC

* 如何大批量执行sql语句, sql分割, 美一百条执行一次
#+BEGIN_SRC java
public void batchSingleUpdate(List sqls) {
    int loop = sqls.size();
    if (loop != 0) {
        String[] sql = null;
        sql = new String[loop > 100 ? 100 : loop];

        for(int i = 0; i < loop; ++i) {
            if (i % 100 == 0 && i > 0) {
                this.batchUpdate(sql);
                sql = new String[loop - i > 100 ? 100 : loop - i];
            }

            sql[i % 100] = sqls.get(i).toString();
        }

        this.batchUpdate(sql);
    }
}
#+END_SRC
* 如何使用spring的扫描类
  #+BEGIN_SRC java
 //
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import javax.servlet.ServletContext;
import javax.sql.DataSource;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.beans.factory.xml.ResourceEntityResolver;
import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;
import org.springframework.web.context.support.AbstractRefreshableWebApplicationContext;

public class IfmisInitClasspathXmlApplicationContext extends AbstractRefreshableWebApplicationContext {
    private static IfmisInitClasspathXmlApplicationContext icxa = null;
    public static final String DEFAULT_CONFIG_LOCATION = "/WEB-INF/applicationContext.xml";
    public static final String DEFAULT_CONFIG_LOCATION_PREFIX = "/WEB-INF/";
    private final Object startupShutdownMonitor = new Object();
    public static final String DEFAULT_CONFIG_LOCATION_SUFFIX = ".xml";
    private static boolean init = false;
    private static boolean isCommon = false;
    private DataSource ds = null;
    private DataSource dids = null;
    boolean isOa = false;
    boolean isIndi = false;
    boolean oaDrive = false;
    private final FaspReaderEventListener listener = new FaspReaderEventListener();
    public static String NEST_VERSION = null;
    public static String FASP_VERSION = null;
    public static String NESTDB_VERSION = null;
    private Set<String> pathxml = new HashSet();

    public IfmisInitClasspathXmlApplicationContext() {
    }

    protected DefaultListableBeanFactory createBeanFactory() {
        return new FaspDefaultListableBeanFactory(this.getInternalParentBeanFactory());
    }

    public FaspReaderEventListener getListener() {
        return this.listener;
    }

    protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws IOException {
        XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);
        beanDefinitionReader.setDocumentReaderClass(FaspBeanDefinitionDocumentReader.class);
        beanDefinitionReader.setResourceLoader(this);
        beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));
        this.initBeanDefinitionReader(beanDefinitionReader);
        this.loadBeanDefinitions(beanDefinitionReader);
    }

    public void refresh() throws BeansException, IllegalStateException {
        if (!init) {
            icxa = this;
            init = false;
            super.refresh();
            this.ds = (DataSource)this.getBean("fasp2datasource");
            LoadAppidFactory.getDBType();
            DBDetector.getJNDIInfo();
            this.initContext();
            this.initCommonSqlInfo();
            ILoadAppid ils = LoadAppidFactory.newInstance(this.ds);
            ServletContext sc = this.getServletContext();
            ils.setContentRootPath(sc.getContextPath());
            this.initSqlInfo();
            if (ils.getAllApp().size() == 0) {
                ils.initAppupgrade();
            }

            isCommon = ils.isCommon();
            if (isCommon) {
                this.dids = (DataSource)this.getBean("fasp2dubboDataSource");
                DubboJdbcDaoSupport djds = new DubboJdbcDaoSupport();
                boolean zkServerStartup = ils.getServerArguments().indexOf("-Dfasp2.zkserver.startup=true") >= 0;
                Collection<String> appids = ils.getAppid();
                boolean commons = ils.isCommon();
                String sysid = "";
                boolean iswritedubbo = false;
                int count1;
                int count2;
                if (zkServerStartup && commons) {
                    iswritedubbo = true;
                    sysid = "fasp";
                } else if (!zkServerStartup && !commons) {
                    iswritedubbo = true;
                    count1 = appids.toString().indexOf("[") + 1;
                    count2 = appids.toString().indexOf("]");
                    sysid = appids.toString().substring(count1, count2);
                }

                if (iswritedubbo) {
                    count1 = djds.queryForInt("select count(*) from user_tables where TABLE_NAME = 'FASP_T_DIINFO'");
                    count2 = djds.queryForInt("select count(*) from user_tables where TABLE_NAME = 'FASP_T_DIFUNCTION'");
                    if (count1 + count2 == 2) {
                        djds.execute("delete from fasp_t_diinfo where syside = '" + sysid + "'");
                        djds.execute("delete from fasp_t_difunction where syside = '" + sysid + "'");
                    }
                }
            }

            Properties version;
            try {
                version = new Properties();
                version.load(this.getClass().getResourceAsStream("/NEST.VERSION"));
                NEST_VERSION = version.get("VERSION").toString();
            } catch (Exception var12) {
                ;
            }

            try {
                version = new Properties();
                version.load(this.getClass().getResourceAsStream("/FASP.VERSION"));
                FASP_VERSION = version.get("VERSION").toString();
            } catch (Exception var11) {
                ;
            }

            System.out.println("当前平台版本：" + FASP_VERSION + "，当前NEST版本：" + NEST_VERSION);
            if (isCommon) {
                System.out.println("当前为主域");
                System.out.println("启动日志记录");
                (new Thread(new LogQueueServiceImpl())).start();
            } else {
                System.out.println("当前为从域");
            }

            init = true;
            super.refresh();
            System.out.println("加载完毕");
            this.listener.afertReflash();
        }
    }

    public void refresh(boolean boo) throws BeansException, IllegalStateException {
        super.refresh();
    }

    public void addXml(String path) {
        this.pathxml.add(path);
    }

    private void initContext() {
        String develop = this.getServletContext().getInitParameter("develop");
        if ("true".equals(develop)) {
            LoadAppidFactory.setDevelop(true);
        }

        String oaDrive = this.getServletContext().getInitParameter("oaDrive");
        if (oaDrive != null && "true".equals(oaDrive.trim())) {
            this.oaDrive = true;
        }

        CheckStartService.newInstance().initStart();
        CheckStartService.newInstance().checkStart();
        CheckStartService.newInstance().setDbGuid();
    }

    private void initCommonSqlInfo() {
        (new WebContextLoader()).initCommonSqlContext(this.getServletContext());
    }

    private void initSqlInfo() {
        (new WebContextLoader()).initSqlContext(this.getServletContext());
    }

    public DataSource getDataSource() {
        return this.ds;
    }

    public DataSource getDubboDataSource() {
        return this.dids;
    }

    protected void initBeanDefinitionReader(XmlBeanDefinitionReader beanDefinitionReader) {
        this.listener.clear();
        this.listener.addListener(new ParesPageInitListener());
        this.listener.addListener(new HearbeatStartListener());
        this.listener.addListener(new AfterReflashEeventInit());
        ServletContext sc = this.getServletContext();
        String readerEventListener = sc.getInitParameter("readerEventListener");
        if (readerEventListener != null && readerEventListener.trim().length() > 0) {
            String[] str = readerEventListener.split(";");
            String[] var8 = str;
            int var7 = str.length;

            for(int var6 = 0; var6 < var7; ++var6) {
                String s = var8[var6];

                try {
                    Class cls = Class.forName(s);
                    this.listener.addListener((IFaspReaderEventListener)cls.newInstance());
                } catch (Exception var10) {
                    this.logger.error("spring监听器" + s + "未找到或者接口对象不是org.springframework.beans.factory.parsing.ReaderEventListener！");
                }
            }
        }

        beanDefinitionReader.setEventListener(this.listener);
    }

    protected void loadBeanDefinitions(XmlBeanDefinitionReader reader) throws BeansException, IOException {
        String[] configLocations = this.getConfigLocations();
        if (configLocations != null) {
            for(int i = 0; i < configLocations.length; ++i) {
                reader.loadBeanDefinitions(configLocations[i]);
            }
        }

    }

    private String[] getSuperConfigLocations() {
        String[] strs = super.getConfigLocations();
        if (strs == null || strs.length == 0) {
            strs = new String[]{"classpath:datasource.xml"};
        }

        return strs;
    }

    public String[] getConfigLocations() {
        return !init ? this.getSuperConfigLocations() : this.getDefConfigLocations();
    }

    public String[] getDefConfigLocations() {
        String str = this.getServletContext().getInitParameter("defcontextConfigLocation");
        ArrayList<String> list = new ArrayList();
        String[] sup = this.getSuperConfigLocations();
        String[] var7 = sup;
        int var6 = sup.length;

        for(int var5 = 0; var5 < var6; ++var5) {
            String s = var7[var5];
            list.add(s);
        }

        list.add("classpath:common-context.xml");
        list.add("classpath:common-transaction.xml");
        list.add("classpath:common-appupgrade.xml");
        if (str != null && str.trim().length() > 0) {
            String[] files = (String[])null;
            files = str.split(",");
            String[] var8 = files;
            int var17 = files.length;

            for(var6 = 0; var6 < var17; ++var6) {
                String s = var8[var6];
                list.add(s);
            }
        }

        if (isCommon) {
            list.add("classpath:common-logaop.xml");
            list.add("classpath:common-context-server.xml");
        } else {
            list.add("classpath:common-context-client.xml");
        }

        list.addAll(this.pathxml);
        Collection<CommonDTO> myappdto = LoadAppidFactory.newInstance().getAppDTO();
        ServletContext sc = this.getServletContext();
        String cp = sc.getContextPath();
        Collection<String> myapp = new HashSet();

        String key;
        for(Iterator var9 = myappdto.iterator(); var9.hasNext(); myapp.add(key)) {
            CommonDTO dto = (CommonDTO)var9.next();
            key = dto.getString("appid");
            if ("hqoa".equalsIgnoreCase(key)) {
                this.isOa = true;
            }

            if ("indi".equalsIgnoreCase(key)) {
                this.isIndi = true;
            }

            if (cp.equals(dto.getString("rootpath"))) {
                myapp.add(key);
            }

            if (cp.trim().length() > 0 && cp.equals("/" + dto.getString("rootpath"))) {
                myapp.add(key);
            }
        }

        list.addAll(this.faspModules());
        Set<String> apps = LoadAppidFactory.newInstance().getAllApp().keySet();
        Iterator var22 = apps.iterator();

        String app;
        while(var22.hasNext()) {
            app = (String)var22.next();
            if (!"common".equals(app) && !"fasp".equals(app)) {
                if (myapp.contains(app)) {
                    list.add("classpath:" + app + "-context.xml");
                    list.add("classpath:" + app + "-context-server.xml");
                    list.add("classpath:" + app + "-appupgrade.xml");
                } else {
                    list.add("classpath:" + app + "-context-client.xml");
                }
            }
        }

        app = "classpath:gl-appupgrade.xml";
        key = "classpath:busfw-appupgrade.xml";
        if (!list.contains(app)) {
            list.add(app);
        }

        if (!list.contains(key)) {
            list.add(key);
        }

        String[] s = this.hashContext(list);
        return s;
    }

    private ArrayList<String> faspModules() {
        String[] str = (String[])null;
        if (LoadAppidFactory.newInstance().isAppupgrade()) {
            str = FaspModule.DEF_MODULES;
        } else {
            str = FaspModule.FASP_MODULES;
        }

        ArrayList<String> list = new ArrayList();
        String[] var6 = str;
        int var5 = str.length;

        for(int var4 = 0; var4 < var5; ++var4) {
            String s = var6[var4];
            list.add("classpath:fasp2-" + s.toLowerCase() + ".xml");
            if (isCommon) {
                list.add("classpath:fasp2-" + s.toLowerCase() + "-server.xml");
            } else {
                list.add("classpath:fasp2-" + s.toLowerCase() + "-client.xml");
            }
        }

        return list;
    }

    private String[] hashContext(List<String> contexts) {
        ArrayList<String> ctx = new ArrayList();
        Iterator var4 = contexts.iterator();

        while(var4.hasNext()) {
            String c = (String)var4.next();

            try {
                if (c.indexOf("classpath:") == 0) {
                    if (this.getClassLoader().getResourceAsStream(c.replaceFirst("classpath:", "")) != null) {
                        ctx.add(c);
                        this.logger.debug("找到配置文件：" + c);
                    } else {
                        this.logger.warn("配置文件" + c + "未找到！");
                    }
                } else if (this.getServletContext().getResourceAsStream(c) != null) {
                    ctx.add(c);
                    this.logger.debug("找到配置文件：" + c);
                } else {
                    this.logger.warn("配置文件" + c + "未找到！");
                }
            } catch (Exception var6) {
                var6.printStackTrace();
            }
        }

        return (String[])ctx.toArray(new String[ctx.size()]);
    }

    public static IfmisInitClasspathXmlApplicationContext getThis() {
        return icxa;
    }

    public static void setIscommon(boolean b) {
        isCommon = b;
    }
}

//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package gov.mof.fasp2.buscore.framework.integration;

import com.longtu.framework.springexp.IfmisInitClasspathXmlApplicationContext;
import gov.mof.fasp2.buscore.framework.dto.CommonDTO;
import gov.mof.fasp2.buscore.framework.springexp.CommonXmlApplicationContext;
import gov.mof.fasp2.buscore.framework.sql.ParseXmlFactory;
import gov.mof.fasp2.buscore.framework.util.Fasp2Util;
import gov.mof.fasp2.buscore.framework.util.LoadAppidFactory;
import gov.mof.fasp2.buscore.framework.util.NetUtils;
import gov.mof.fasp2.license.exception.FaspLicenseException;
import gov.mof.fasp2.license.service.FaspLicenseService;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.sql.DataSource;
import org.springframework.beans.BeansException;
import org.springframework.web.context.WebApplicationContext;

public class BusInitClasspathXmlApplicationContext extends IfmisInitClasspathXmlApplicationContext {
    private static boolean init = false;
    private static Date licenseVilidTime = null;
    private static long licenseInvilidDays = 30L;

    public BusInitClasspathXmlApplicationContext() {
    }

    public void setWebApplicationContext(WebApplicationContext webApplicationContext) {
        CommonXmlApplicationContext.setWebApplicationContext(webApplicationContext);
    }

    public Object getBean(String beanid) throws BeansException {
        if (beanid != null && beanid.indexOf("install.init.") != -1) {
            String dm = NetUtils.getDomainName();
            beanid = beanid.replaceAll(dm + "_", "");
        }

        return super.getBean(beanid);
    }

    public void refresh() throws BeansException, IllegalStateException {
        this.setWebApplicationContext(this);
        super.refresh();
    }

    protected void finishRefresh() {
        super.finishRefresh();
        if (!init) {
            init = true;
            DataSource ds = (DataSource)this.getBean("fasp2datasource");
            LoadAppidFactory.newInstance().loadAppid2DB(ds);
            this.initSqlContext();
            this.initFaspLicenseConfig();
        }

    }

    public String[] getDefConfigLocations() {
        String[] configLocations = super.getDefConfigLocations();
        String serveraddress = NetUtils.getLocalServerIP();
        String serverport = NetUtils.getLocalServerPort();
        String address = serveraddress + ":" + serverport;
        Collection<String> appids = Fasp2Util.getAppid();
        String[] files = new String[]{"bus-core-common.xml", "buscommon-context.xml", "buscommon-context-server.xml", "buscommon-appupgrade.xml", "busfw-context.xml", "busfw-context-server.xml", "busfw-appupgrade.xml", "busportal-context.xml", "busportal-context-server.xml", "busportal-appupgrade.xml", "buspa-context.xml", "buspa-context-server.xml", "buspa-appupgrade.xml", "busbc-context.xml", "busgl-context.xml", "buspa-context.xml", "datacommon-context.xml", "datacommon-appupgrade.xml"};
        List<String> busconfigLocations = new ArrayList(configLocations.length + files.length + appids.size());
        int i = 0;

        String location;
        String location;
        for(int len = configLocations.length; i < len; ++i) {
            location = configLocations[i];
            if ("classpath:task-context.xml".equals(location)) {
                CommonDTO sysdomain = Fasp2Util.getDTOByAppid("task");
                location = sysdomain.getString("domainip") + ":" + sysdomain.getString("domainport");
                boolean contains = false;
                if (location.equals(address)) {
                    contains = true;
                } else {
                    List<String> iplist = NetUtils.getLocalIPList();
                    Iterator var16 = iplist.iterator();

                    while(var16.hasNext()) {
                        String ip = (String)var16.next();
                        address = ip + ":" + serverport;
                        if (location.equals(address)) {
                            contains = true;
                            break;
                        }
                    }
                }

                if (!contains) {
                    continue;
                }
            }

            if (!busconfigLocations.contains(location)) {
                busconfigLocations.add(location);
            }

            if ("classpath:common-context.xml".equals(location)) {
                for(int k = 0; k < files.length; ++k) {
                    location = null;

                    try {
                        InputStream io = this.getClass().getResourceAsStream("/" + files[k]);
                        if (io != null) {
                            location = "classpath:" + files[k];
                            if (!busconfigLocations.contains(location)) {
                                busconfigLocations.add(location);
                            }
                        }
                    } catch (Exception var18) {
                        var18.printStackTrace();
                    }
                }
            }
        }

        Iterator var20 = busconfigLocations.iterator();

        String appid;
        while(var20.hasNext()) {
            appid = (String)var20.next();
            System.out.println(appid);
        }

        var20 = appids.iterator();

        while(var20.hasNext()) {
            appid = (String)var20.next();
            location = null;

            try {
                String file = appid + "-appupgrade.xml";
                InputStream io = this.getClass().getResourceAsStream("/" + file);
                if (io != null) {
                    location = "classpath:" + file;
                    if (!busconfigLocations.contains(location)) {
                        busconfigLocations.add(location);
                    }
                }
            } catch (Exception var17) {
                var17.printStackTrace();
            }
        }

        return (String[])busconfigLocations.toArray(new String[busconfigLocations.size()]);
    }

    private static boolean inBufferTime() {
        if (licenseVilidTime != null) {
            return Calendar.getInstance().getTimeInMillis() < licenseVilidTime.getTime();
        } else {
            return false;
        }
    }

    public static boolean isLicenseWarning() {
        return inBufferTime();
    }

    private void initLicenseVilidTime() {
    }

    private void initFaspLicenseConfig() {
        this.initLicenseVilidTime();

        try {
            FaspLicenseService fls = FaspLicenseService.getService();
            System.out.println(fls.getWarning());
        } catch (FaspLicenseException var2) {
            var2.printStackTrace();
            if (!isLicenseWarning()) {
                System.exit(0);
            }
        }

    }

    private void initSqlContext() {
        Collection<String> files = new ArrayList();
        files.add("fasp2-buspa-sql.xml");
        files.add("fasp2-pa-sql.xml");
        files.add("fasp2-gl-sql.xml");
        files.add("portal-sql.xml");
        files.add("buspa-contextsql.xml");
        files.add("busgl-contextsql.xml");
        files.add("busportal-contextsql.xml");
        Collection<String> appids = Fasp2Util.getAppid();
        Iterator var4 = appids.iterator();

        String file;
        while(var4.hasNext()) {
            file = (String)var4.next();
            if (!files.contains(file + "-contextsql.xml")) {
                files.add(file + "-contextsql.xml");
            }
        }

        var4 = files.iterator();

        while(var4.hasNext()) {
            file = (String)var4.next();
            InputStream io = null;

            try {
                io = this.getClass().getResourceAsStream("/" + file);
                if (io != null) {
                    ParseXmlFactory.parseXml(io);
                }
            } catch (Exception var7) {
                var7.printStackTrace();
            }
        }

    }
}

  #+END_SRC
* js页面跳转通过post提交传递大量参数
  #+BEGIN_SRC js
  /**
  * url超长时，通过post提交跳转
  */
  $.extend({
      StandardPost:function(url,args){
        var body = $(document.body),
          form = $("<form method='post'></form>"),
          input;
        form.attr({"action":url});
        $.each(args,function(key,value){
        input = $("<input type='hidden'>");
        input.attr({"name":key});
        input.val(value);
        form.append(input);
      });
      form.appendTo(document.body);
      form.submit();
      document.body.removeChild(form[0]);
      }
    });

  #+END_SRC
* 校验方法超时
  #+BEGIN_SRC java
        final ExecutorService exec = Executors.newFixedThreadPool(1);
        Callable<String> call = new Callable<String>() {
            public String call() throws Exception {
                //这里写可能需要超时的逻辑, 这里写2000, 下面只允许1000必定会超时得
                Thread.sleep(2000);
                return "true";
            }
        };

        try {
            Future<String> future = exec.submit(call);
            // set db connection timeout to 10 seconds
            String obj = future.get(1000, TimeUnit.MILLISECONDS);
            System.out.println("the return value from call is :" + obj);
        } catch (TimeoutException ex) {
            System.out.println("====================task time out===============");
            ex.printStackTrace();
        } catch (Exception e) {
            System.out.println("failed to handle.");
            e.printStackTrace();
        }
        // close thread pool
        exec.shutdown();
  #+END_SRC

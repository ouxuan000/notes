* 缓存管理页面
** 获取缓存信息 gov.mof.fasp2.buscore.framework.cache.service.CacheManager#getCacheinfo
** 刷新所有缓存 gov.mof.fasp2.buscore.framework.cache.service.CacheManager#refreshCaches
* 注册缓存
** 自定义标签, buscore-context.xml
   + spring自定义标签配置文件
    + /WebRoot/WEB-INF/lib/devlop_framework.jar!/META-INF/spring.schemas
    + /WebRoot/WEB-INF/lib/devlop_framework.jar!/META-INF/spring.handlers
** 设计接口并实现
   + gov.mof.fasp2.bdg.common.cache.ICacheServer 
    #+BEGIN_SRC java
        package gov.mof.fasp2.bdg.common.cache;

        import gov.mof.fasp2.buscore.framework.cache.service.ICacheInit;
        import gov.mof.fasp2.buscore.framework.cache.service.ICacheService;

        public interface ICacheServer extends ICacheInit {
            ICacheService getCacheService();
        }

    #+END_SRC
   + gov.mof.fasp2.bdg.common.cache.RequestConfigCacheServer
     #+BEGIN_SRC java
        package gov.mof.fasp2.bdg.common.cache;

        import gov.mof.fasp2.buscore.framework.cache.service.ICacheService;
        import gov.mof.fasp2.buscore.framework.daosupport.Fasp2DaoSupport;

        import javax.annotation.Resource;
        import java.util.ArrayList;
        import java.util.List;
        import java.util.Map;

        /**
        * 加入到框架控制的缓存管理页面， 统一刷新
        */
        public class RequestConfigCacheServer implements ICacheServer {

            public ICacheService getCacher() {
                return cacher;
            }

            public void setCacher(ICacheService cacher) {
                this.cacher = cacher;
            }

            /**
            * 注入 service初始化类
            */
            @Resource(name = "bdg.cache.requestconfigcache")
            private ICacheService cacher;


            @Override
            public ICacheService getCacheService() {
                return cacher;
            }

            /**
            * 启动服务时会调用该方法刷新缓存
            * @param iCacheService
            */
            @Override
            public void initCache(ICacheService iCacheService) {
                this.setCacher(iCacheService);
                this.initCacheData();
            }

            /**
            * 初始化缓存信息
            */
            private void initCacheData() {
                List l = getFasp2DaoSupport().queryForList("SELECT * FROM BDG_T_REQUESTCONFIG");
                if(l!=null&&l.size()!=0){
                    Map m;
                    for (Object aL : l) {
                        m = (Map) aL;
                        cacher.put(m.get("guid").toString(), m.get("config"));
                    }
                }
            }

            /**
            *  根据传入key获取 配置信息
            * @param key
            * @return
            */
            public String getConfigByKey(String key){
                return String.valueOf(cacher.get(key));
            }

            /**
            * 保存配置信息
            */
            public synchronized void saveConfigCache(String guid, String config) {
                Object o = cacher.get(guid);
                if (o == null) {
                    String sql = "insert into BDG_T_REQUESTCONFIG (guid, config) values ('" + guid + "', '" + config + "')";
                    getFasp2DaoSupport().update(sql);
                } else {
                    String sql = "update BDG_T_REQUESTCONFIG t set t.config = ? where t.guid = ?";
                    List list = new ArrayList();
                    list.add(config);
                    list.add(guid);
                    getFasp2DaoSupport().update(sql, list);
                }
                cacher.put(guid, config);
            }

            /**
            * 平台dao.
            */
            private static Fasp2DaoSupport fasp2Dao = null;

            /**
            * 获取平台dao.
            * @return 平台dao.
            */
            private static Fasp2DaoSupport getFasp2DaoSupport() {
                if (fasp2Dao == null) {
                    fasp2Dao = (Fasp2DaoSupport) gov.mof.fasp2.buscore.framework.util.ServiceFactory.getBean("buscore.framework.dao");
                }
                return fasp2Dao;
            }
        }

     #+END_SRC
** bdg-context.xml中注册
   #+BEGIN_EXAMPLE
   	<!--用户自定义请求缓存 id为缓存唯一标识 -->
    <buscore_cache:domain id="bdg.cache.requestconfigcache" maxsize="10000" partition="true"
                initbeanid="bdg.cacheinit.requestconfigcache" />
    <bean id="bdg.cacheinit.requestconfigcache"
        class="gov.mof.fasp2.bdg.common.cache.RequestConfigCacheServer">
    </bean>
   #+END_EXAMPLE
** 加载流程
   + 服务启动时, 通过spring调用 gov.mof.fasp2.buscore.framework.cache.service.impl.CacheServiceImpl#init(boolean), 从而调用各个业务的缓存实现
